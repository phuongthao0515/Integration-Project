{
  "version": 3,
  "sources": ["../../hast-util-from-dom/lib/index.js"],
  "sourcesContent": ["/**\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('hast').DocType} HastDoctype\r\n * @typedef {import('hast').Element} HastElement\r\n * @typedef {import('hast').Text} HastText\r\n * @typedef {import('hast').Comment} HastComment\r\n * @typedef {import('hast').Content} HastContent\r\n */\r\n\r\n/**\r\n * @typedef {HastContent | HastRoot} HastNode\r\n *\r\n * @callback AfterTransform\r\n *   Callback called when each node is transformed.\r\n * @param {Node} domNode\r\n *   DOM node that was handled.\r\n * @param {HastNode} hastNode\r\n *   Corresponding hast node.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {AfterTransform | null | undefined} [afterTransform]\r\n *   Callback called when each node is transformed.\r\n */\r\n\r\nimport {webNamespaces} from 'web-namespaces'\r\nimport {h, s} from 'hastscript'\r\n\r\n/**\r\n * Transform a DOM tree to a hast tree.\r\n *\r\n * @param {Node} tree\r\n *   DOM tree to transform.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {HastNode}\r\n *   Equivalent hast node.\r\n */\r\nexport function fromDom(tree, options) {\r\n  const result = tree ? transform(tree, options || {}) : undefined\r\n  return result || {type: 'root', children: []}\r\n}\r\n\r\n/**\r\n * @param {Node} node\r\n *   DOM node to transform.\r\n * @param {Options} options\r\n *   Configuration.\r\n * @returns {HastNode | undefined}\r\n *   Equivalent hast node.\r\n *\r\n *   Note that certain legacy DOM nodes (i.e., Attr nodes (2),  CDATA, processing instructions)\r\n */\r\nfunction transform(node, options) {\r\n  const transformed = one(node, options)\r\n  if (transformed && options.afterTransform)\r\n    options.afterTransform(node, transformed)\r\n  return transformed\r\n}\r\n\r\n/**\r\n * @param {Node} node\r\n *   DOM node to transform.\r\n * @param {Options} options\r\n *   Configuration.\r\n * @returns {HastNode | undefined}\r\n *   Equivalent hast node.\r\n */\r\nfunction one(node, options) {\r\n  switch (node.nodeType) {\r\n    case 1 /* Element */: {\r\n      // @ts-expect-error TypeScript is wrong.\r\n      return element(node, options)\r\n    }\r\n\r\n    // Ignore: Attr (2).\r\n\r\n    case 3 /* Text */: {\r\n      // @ts-expect-error TypeScript is wrong.\r\n      return text(node)\r\n    }\r\n\r\n    // Ignore: CDATA (4).\r\n    // Removed: Entity reference (5)\r\n    // Removed: Entity (6)\r\n    // Ignore: Processing instruction (7).\r\n\r\n    case 8 /* Comment */: {\r\n      // @ts-expect-error TypeScript is wrong.\r\n      return comment(node)\r\n    }\r\n\r\n    case 9 /* Document */: {\r\n      // @ts-expect-error TypeScript is wrong.\r\n      return root(node, options)\r\n    }\r\n\r\n    case 10 /* Document type */: {\r\n      return doctype()\r\n    }\r\n\r\n    case 11 /* Document fragment */: {\r\n      // @ts-expect-error TypeScript is wrong.\r\n      return root(node, options)\r\n    }\r\n\r\n    default: {\r\n      return undefined\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Transform a document.\r\n *\r\n * @param {Document | DocumentFragment} node\r\n *   DOM node to transform.\r\n * @param {Options} options\r\n *   Configuration.\r\n * @returns {HastRoot}\r\n *   Equivalent hast node.\r\n */\r\nfunction root(node, options) {\r\n  return {type: 'root', children: all(node, options)}\r\n}\r\n\r\n/**\r\n * Transform a doctype.\r\n *\r\n * @returns {HastDoctype}\r\n *   Equivalent hast node.\r\n */\r\nfunction doctype() {\r\n  // @ts-expect-error hast types out of date.\r\n  return {type: 'doctype'}\r\n}\r\n\r\n/**\r\n * Transform a text.\r\n *\r\n * @param {Text} node\r\n *   DOM node to transform.\r\n * @returns {HastText}\r\n *   Equivalent hast node.\r\n */\r\nfunction text(node) {\r\n  return {type: 'text', value: node.nodeValue || ''}\r\n}\r\n\r\n/**\r\n * Transform a comment.\r\n *\r\n * @param {Comment} node\r\n *   DOM node to transform.\r\n * @returns {HastComment}\r\n *   Equivalent hast node.\r\n */\r\nfunction comment(node) {\r\n  return {type: 'comment', value: node.nodeValue || ''}\r\n}\r\n\r\n/**\r\n * Transform an element.\r\n *\r\n * @param {Element} node\r\n *   DOM node to transform.\r\n * @param {Options} options\r\n *   Configuration.\r\n * @returns {HastElement}\r\n *   Equivalent hast node.\r\n */\r\nfunction element(node, options) {\r\n  const space = node.namespaceURI\r\n  const fn = space === webNamespaces.svg ? s : h\r\n  const tagName =\r\n    space === webNamespaces.html ? node.tagName.toLowerCase() : node.tagName\r\n  /** @type {DocumentFragment | Element} */\r\n  const content =\r\n    // @ts-expect-error Types are wrong.\r\n    space === webNamespaces.html && tagName === 'template' ? node.content : node\r\n  const attributes = node.getAttributeNames()\r\n  /** @type {Record<string, string>} */\r\n  const props = {}\r\n  let index = -1\r\n\r\n  while (++index < attributes.length) {\r\n    props[attributes[index]] = node.getAttribute(attributes[index]) || ''\r\n  }\r\n\r\n  return fn(tagName, props, all(content, options))\r\n}\r\n\r\n/**\r\n * Transform child nodes in a parent.\r\n *\r\n * @param {Document | DocumentFragment | Element} node\r\n *   DOM node to transform.\r\n * @param {Options} options\r\n *   Configuration.\r\n * @returns {Array<HastContent>}\r\n *   Equivalent hast nodes.\r\n */\r\nfunction all(node, options) {\r\n  const nodes = node.childNodes\r\n  /** @type {Array<HastContent>} */\r\n  const children = []\r\n  let index = -1\r\n\r\n  while (++index < nodes.length) {\r\n    const child = transform(nodes[index], options)\r\n\r\n    if (child !== undefined) {\r\n      // @ts-expect-error Assume no document inside document.\r\n      children.push(child)\r\n    }\r\n  }\r\n\r\n  return children\r\n}\r\n"],
  "mappings": ";;;;;;;;;AAwCO,SAAS,QAAQ,MAAM,SAAS;AACrC,QAAM,SAAS,OAAO,UAAU,MAAM,WAAW,CAAC,CAAC,IAAI;AACvD,SAAO,UAAU,EAAC,MAAM,QAAQ,UAAU,CAAC,EAAC;AAC9C;AAYA,SAAS,UAAU,MAAM,SAAS;AAChC,QAAM,cAAc,IAAI,MAAM,OAAO;AACrC,MAAI,eAAe,QAAQ;AACzB,YAAQ,eAAe,MAAM,WAAW;AAC1C,SAAO;AACT;AAUA,SAAS,IAAI,MAAM,SAAS;AAC1B,UAAQ,KAAK,UAAU;AAAA,IACrB,KAAK,GAAiB;AAEpB,aAAO,QAAQ,MAAM,OAAO;AAAA,IAC9B;AAAA;AAAA,IAIA,KAAK,GAAc;AAEjB,aAAO,KAAK,IAAI;AAAA,IAClB;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,KAAK,GAAiB;AAEpB,aAAO,QAAQ,IAAI;AAAA,IACrB;AAAA,IAEA,KAAK,GAAkB;AAErB,aAAO,KAAK,MAAM,OAAO;AAAA,IAC3B;AAAA,IAEA,KAAK,IAAwB;AAC3B,aAAO,QAAQ;AAAA,IACjB;AAAA,IAEA,KAAK,IAA4B;AAE/B,aAAO,KAAK,MAAM,OAAO;AAAA,IAC3B;AAAA,IAEA,SAAS;AACP,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAYA,SAAS,KAAK,MAAM,SAAS;AAC3B,SAAO,EAAC,MAAM,QAAQ,UAAU,IAAI,MAAM,OAAO,EAAC;AACpD;AAQA,SAAS,UAAU;AAEjB,SAAO,EAAC,MAAM,UAAS;AACzB;AAUA,SAAS,KAAK,MAAM;AAClB,SAAO,EAAC,MAAM,QAAQ,OAAO,KAAK,aAAa,GAAE;AACnD;AAUA,SAAS,QAAQ,MAAM;AACrB,SAAO,EAAC,MAAM,WAAW,OAAO,KAAK,aAAa,GAAE;AACtD;AAYA,SAAS,QAAQ,MAAM,SAAS;AAC9B,QAAM,QAAQ,KAAK;AACnB,QAAM,KAAK,UAAU,cAAc,MAAM,IAAI;AAC7C,QAAM,UACJ,UAAU,cAAc,OAAO,KAAK,QAAQ,YAAY,IAAI,KAAK;AAEnE,QAAM;AAAA;AAAA,IAEJ,UAAU,cAAc,QAAQ,YAAY,aAAa,KAAK,UAAU;AAAA;AAC1E,QAAM,aAAa,KAAK,kBAAkB;AAE1C,QAAM,QAAQ,CAAC;AACf,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,WAAW,QAAQ;AAClC,UAAM,WAAW,KAAK,CAAC,IAAI,KAAK,aAAa,WAAW,KAAK,CAAC,KAAK;AAAA,EACrE;AAEA,SAAO,GAAG,SAAS,OAAO,IAAI,SAAS,OAAO,CAAC;AACjD;AAYA,SAAS,IAAI,MAAM,SAAS;AAC1B,QAAM,QAAQ,KAAK;AAEnB,QAAM,WAAW,CAAC;AAClB,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,UAAM,QAAQ,UAAU,MAAM,KAAK,GAAG,OAAO;AAE7C,QAAI,UAAU,QAAW;AAEvB,eAAS,KAAK,KAAK;AAAA,IACrB;AAAA,EACF;AAEA,SAAO;AACT;",
  "names": []
}
