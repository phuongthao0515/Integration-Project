{
  "version": 3,
  "sources": ["../../ms/index.js", "../../debug/src/common.js", "../../debug/src/browser.js", "../../micromark/dev/lib/initialize/content.js", "../../micromark/dev/lib/initialize/document.js", "../../micromark/dev/lib/initialize/flow.js", "../../micromark/dev/lib/initialize/text.js", "../../micromark/dev/lib/create-tokenizer.js", "../../micromark/dev/lib/constructs.js", "../../micromark/dev/lib/parse.js", "../../micromark/dev/lib/preprocess.js", "../../micromark/dev/lib/postprocess.js", "../../mdast-util-from-markdown/dev/lib/index.js", "../../remark-parse/lib/index.js"],
  "sourcesContent": ["/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\r\n/**\r\n * This is the common logic for both the Node.js and web browser\r\n * implementations of `debug()`.\r\n */\r\n\r\nfunction setup(env) {\r\n\tcreateDebug.debug = createDebug;\r\n\tcreateDebug.default = createDebug;\r\n\tcreateDebug.coerce = coerce;\r\n\tcreateDebug.disable = disable;\r\n\tcreateDebug.enable = enable;\r\n\tcreateDebug.enabled = enabled;\r\n\tcreateDebug.humanize = require('ms');\r\n\tcreateDebug.destroy = destroy;\r\n\r\n\tObject.keys(env).forEach(key => {\r\n\t\tcreateDebug[key] = env[key];\r\n\t});\r\n\r\n\t/**\r\n\t* The currently active debug mode names, and names to skip.\r\n\t*/\r\n\r\n\tcreateDebug.names = [];\r\n\tcreateDebug.skips = [];\r\n\r\n\t/**\r\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\r\n\t*\r\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\r\n\t*/\r\n\tcreateDebug.formatters = {};\r\n\r\n\t/**\r\n\t* Selects a color for a debug namespace\r\n\t* @param {String} namespace The namespace string for the debug instance to be colored\r\n\t* @return {Number|String} An ANSI color code for the given namespace\r\n\t* @api private\r\n\t*/\r\n\tfunction selectColor(namespace) {\r\n\t\tlet hash = 0;\r\n\r\n\t\tfor (let i = 0; i < namespace.length; i++) {\r\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\r\n\t\t\thash |= 0; // Convert to 32bit integer\r\n\t\t}\r\n\r\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\r\n\t}\r\n\tcreateDebug.selectColor = selectColor;\r\n\r\n\t/**\r\n\t* Create a debugger with the given `namespace`.\r\n\t*\r\n\t* @param {String} namespace\r\n\t* @return {Function}\r\n\t* @api public\r\n\t*/\r\n\tfunction createDebug(namespace) {\r\n\t\tlet prevTime;\r\n\t\tlet enableOverride = null;\r\n\t\tlet namespacesCache;\r\n\t\tlet enabledCache;\r\n\r\n\t\tfunction debug(...args) {\r\n\t\t\t// Disabled?\r\n\t\t\tif (!debug.enabled) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst self = debug;\r\n\r\n\t\t\t// Set `diff` timestamp\r\n\t\t\tconst curr = Number(new Date());\r\n\t\t\tconst ms = curr - (prevTime || curr);\r\n\t\t\tself.diff = ms;\r\n\t\t\tself.prev = prevTime;\r\n\t\t\tself.curr = curr;\r\n\t\t\tprevTime = curr;\r\n\r\n\t\t\targs[0] = createDebug.coerce(args[0]);\r\n\r\n\t\t\tif (typeof args[0] !== 'string') {\r\n\t\t\t\t// Anything else let's inspect with %O\r\n\t\t\t\targs.unshift('%O');\r\n\t\t\t}\r\n\r\n\t\t\t// Apply any `formatters` transformations\r\n\t\t\tlet index = 0;\r\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\r\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\r\n\t\t\t\tif (match === '%%') {\r\n\t\t\t\t\treturn '%';\r\n\t\t\t\t}\r\n\t\t\t\tindex++;\r\n\t\t\t\tconst formatter = createDebug.formatters[format];\r\n\t\t\t\tif (typeof formatter === 'function') {\r\n\t\t\t\t\tconst val = args[index];\r\n\t\t\t\t\tmatch = formatter.call(self, val);\r\n\r\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\r\n\t\t\t\t\targs.splice(index, 1);\r\n\t\t\t\t\tindex--;\r\n\t\t\t\t}\r\n\t\t\t\treturn match;\r\n\t\t\t});\r\n\r\n\t\t\t// Apply env-specific formatting (colors, etc.)\r\n\t\t\tcreateDebug.formatArgs.call(self, args);\r\n\r\n\t\t\tconst logFn = self.log || createDebug.log;\r\n\t\t\tlogFn.apply(self, args);\r\n\t\t}\r\n\r\n\t\tdebug.namespace = namespace;\r\n\t\tdebug.useColors = createDebug.useColors();\r\n\t\tdebug.color = createDebug.selectColor(namespace);\r\n\t\tdebug.extend = extend;\r\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\r\n\r\n\t\tObject.defineProperty(debug, 'enabled', {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: () => {\r\n\t\t\t\tif (enableOverride !== null) {\r\n\t\t\t\t\treturn enableOverride;\r\n\t\t\t\t}\r\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\r\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\r\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn enabledCache;\r\n\t\t\t},\r\n\t\t\tset: v => {\r\n\t\t\t\tenableOverride = v;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Env-specific initialization logic for debug instances\r\n\t\tif (typeof createDebug.init === 'function') {\r\n\t\t\tcreateDebug.init(debug);\r\n\t\t}\r\n\r\n\t\treturn debug;\r\n\t}\r\n\r\n\tfunction extend(namespace, delimiter) {\r\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\r\n\t\tnewDebug.log = this.log;\r\n\t\treturn newDebug;\r\n\t}\r\n\r\n\t/**\r\n\t* Enables a debug mode by namespaces. This can include modes\r\n\t* separated by a colon and wildcards.\r\n\t*\r\n\t* @param {String} namespaces\r\n\t* @api public\r\n\t*/\r\n\tfunction enable(namespaces) {\r\n\t\tcreateDebug.save(namespaces);\r\n\t\tcreateDebug.namespaces = namespaces;\r\n\r\n\t\tcreateDebug.names = [];\r\n\t\tcreateDebug.skips = [];\r\n\r\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '')\r\n\t\t\t.trim()\r\n\t\t\t.replace(' ', ',')\r\n\t\t\t.split(',')\r\n\t\t\t.filter(Boolean);\r\n\r\n\t\tfor (const ns of split) {\r\n\t\t\tif (ns[0] === '-') {\r\n\t\t\t\tcreateDebug.skips.push(ns.slice(1));\r\n\t\t\t} else {\r\n\t\t\t\tcreateDebug.names.push(ns);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the given string matches a namespace template, honoring\r\n\t * asterisks as wildcards.\r\n\t *\r\n\t * @param {String} search\r\n\t * @param {String} template\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction matchesTemplate(search, template) {\r\n\t\tlet searchIndex = 0;\r\n\t\tlet templateIndex = 0;\r\n\t\tlet starIndex = -1;\r\n\t\tlet matchIndex = 0;\r\n\r\n\t\twhile (searchIndex < search.length) {\r\n\t\t\tif (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {\r\n\t\t\t\t// Match character or proceed with wildcard\r\n\t\t\t\tif (template[templateIndex] === '*') {\r\n\t\t\t\t\tstarIndex = templateIndex;\r\n\t\t\t\t\tmatchIndex = searchIndex;\r\n\t\t\t\t\ttemplateIndex++; // Skip the '*'\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsearchIndex++;\r\n\t\t\t\t\ttemplateIndex++;\r\n\t\t\t\t}\r\n\t\t\t} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition\r\n\t\t\t\t// Backtrack to the last '*' and try to match more characters\r\n\t\t\t\ttemplateIndex = starIndex + 1;\r\n\t\t\t\tmatchIndex++;\r\n\t\t\t\tsearchIndex = matchIndex;\r\n\t\t\t} else {\r\n\t\t\t\treturn false; // No match\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Handle trailing '*' in template\r\n\t\twhile (templateIndex < template.length && template[templateIndex] === '*') {\r\n\t\t\ttemplateIndex++;\r\n\t\t}\r\n\r\n\t\treturn templateIndex === template.length;\r\n\t}\r\n\r\n\t/**\r\n\t* Disable debug output.\r\n\t*\r\n\t* @return {String} namespaces\r\n\t* @api public\r\n\t*/\r\n\tfunction disable() {\r\n\t\tconst namespaces = [\r\n\t\t\t...createDebug.names,\r\n\t\t\t...createDebug.skips.map(namespace => '-' + namespace)\r\n\t\t].join(',');\r\n\t\tcreateDebug.enable('');\r\n\t\treturn namespaces;\r\n\t}\r\n\r\n\t/**\r\n\t* Returns true if the given mode name is enabled, false otherwise.\r\n\t*\r\n\t* @param {String} name\r\n\t* @return {Boolean}\r\n\t* @api public\r\n\t*/\r\n\tfunction enabled(name) {\r\n\t\tfor (const skip of createDebug.skips) {\r\n\t\t\tif (matchesTemplate(name, skip)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (const ns of createDebug.names) {\r\n\t\t\tif (matchesTemplate(name, ns)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t* Coerce `val`.\r\n\t*\r\n\t* @param {Mixed} val\r\n\t* @return {Mixed}\r\n\t* @api private\r\n\t*/\r\n\tfunction coerce(val) {\r\n\t\tif (val instanceof Error) {\r\n\t\t\treturn val.stack || val.message;\r\n\t\t}\r\n\t\treturn val;\r\n\t}\r\n\r\n\t/**\r\n\t* XXX DO NOT USE. This is a temporary stub function.\r\n\t* XXX It WILL be removed in the next major release.\r\n\t*/\r\n\tfunction destroy() {\r\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\r\n\t}\r\n\r\n\tcreateDebug.enable(createDebug.load());\r\n\r\n\treturn createDebug;\r\n}\r\n\r\nmodule.exports = setup;\r\n", "/* eslint-env browser */\r\n\r\n/**\r\n * This is the web browser implementation of `debug()`.\r\n */\r\n\r\nexports.formatArgs = formatArgs;\r\nexports.save = save;\r\nexports.load = load;\r\nexports.useColors = useColors;\r\nexports.storage = localstorage();\r\nexports.destroy = (() => {\r\n\tlet warned = false;\r\n\r\n\treturn () => {\r\n\t\tif (!warned) {\r\n\t\t\twarned = true;\r\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\r\n\t\t}\r\n\t};\r\n})();\r\n\r\n/**\r\n * Colors.\r\n */\r\n\r\nexports.colors = [\r\n\t'#0000CC',\r\n\t'#0000FF',\r\n\t'#0033CC',\r\n\t'#0033FF',\r\n\t'#0066CC',\r\n\t'#0066FF',\r\n\t'#0099CC',\r\n\t'#0099FF',\r\n\t'#00CC00',\r\n\t'#00CC33',\r\n\t'#00CC66',\r\n\t'#00CC99',\r\n\t'#00CCCC',\r\n\t'#00CCFF',\r\n\t'#3300CC',\r\n\t'#3300FF',\r\n\t'#3333CC',\r\n\t'#3333FF',\r\n\t'#3366CC',\r\n\t'#3366FF',\r\n\t'#3399CC',\r\n\t'#3399FF',\r\n\t'#33CC00',\r\n\t'#33CC33',\r\n\t'#33CC66',\r\n\t'#33CC99',\r\n\t'#33CCCC',\r\n\t'#33CCFF',\r\n\t'#6600CC',\r\n\t'#6600FF',\r\n\t'#6633CC',\r\n\t'#6633FF',\r\n\t'#66CC00',\r\n\t'#66CC33',\r\n\t'#9900CC',\r\n\t'#9900FF',\r\n\t'#9933CC',\r\n\t'#9933FF',\r\n\t'#99CC00',\r\n\t'#99CC33',\r\n\t'#CC0000',\r\n\t'#CC0033',\r\n\t'#CC0066',\r\n\t'#CC0099',\r\n\t'#CC00CC',\r\n\t'#CC00FF',\r\n\t'#CC3300',\r\n\t'#CC3333',\r\n\t'#CC3366',\r\n\t'#CC3399',\r\n\t'#CC33CC',\r\n\t'#CC33FF',\r\n\t'#CC6600',\r\n\t'#CC6633',\r\n\t'#CC9900',\r\n\t'#CC9933',\r\n\t'#CCCC00',\r\n\t'#CCCC33',\r\n\t'#FF0000',\r\n\t'#FF0033',\r\n\t'#FF0066',\r\n\t'#FF0099',\r\n\t'#FF00CC',\r\n\t'#FF00FF',\r\n\t'#FF3300',\r\n\t'#FF3333',\r\n\t'#FF3366',\r\n\t'#FF3399',\r\n\t'#FF33CC',\r\n\t'#FF33FF',\r\n\t'#FF6600',\r\n\t'#FF6633',\r\n\t'#FF9900',\r\n\t'#FF9933',\r\n\t'#FFCC00',\r\n\t'#FFCC33'\r\n];\r\n\r\n/**\r\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\r\n * and the Firebug extension (any Firefox version) are known\r\n * to support \"%c\" CSS customizations.\r\n *\r\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\r\n */\r\n\r\n// eslint-disable-next-line complexity\r\nfunction useColors() {\r\n\t// NB: In an Electron preload script, document will be defined but not fully\r\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\r\n\t// explicitly\r\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Internet Explorer and Edge do not support colors.\r\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tlet m;\r\n\r\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\r\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\r\n\t// eslint-disable-next-line no-return-assign\r\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\r\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\r\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\r\n\t\t// Is firefox >= v31?\r\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\r\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\r\n\t\t// Double check webkit in userAgent just in case we are in a worker\r\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\r\n}\r\n\r\n/**\r\n * Colorize log arguments if enabled.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction formatArgs(args) {\r\n\targs[0] = (this.useColors ? '%c' : '') +\r\n\t\tthis.namespace +\r\n\t\t(this.useColors ? ' %c' : ' ') +\r\n\t\targs[0] +\r\n\t\t(this.useColors ? '%c ' : ' ') +\r\n\t\t'+' + module.exports.humanize(this.diff);\r\n\r\n\tif (!this.useColors) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst c = 'color: ' + this.color;\r\n\targs.splice(1, 0, c, 'color: inherit');\r\n\r\n\t// The final \"%c\" is somewhat tricky, because there could be other\r\n\t// arguments passed either before or after the %c, so we need to\r\n\t// figure out the correct index to insert the CSS into\r\n\tlet index = 0;\r\n\tlet lastC = 0;\r\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\r\n\t\tif (match === '%%') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tindex++;\r\n\t\tif (match === '%c') {\r\n\t\t\t// We only are interested in the *last* %c\r\n\t\t\t// (the user may have provided their own)\r\n\t\t\tlastC = index;\r\n\t\t}\r\n\t});\r\n\r\n\targs.splice(lastC, 0, c);\r\n}\r\n\r\n/**\r\n * Invokes `console.debug()` when available.\r\n * No-op when `console.debug` is not a \"function\".\r\n * If `console.debug` is not available, falls back\r\n * to `console.log`.\r\n *\r\n * @api public\r\n */\r\nexports.log = console.debug || console.log || (() => {});\r\n\r\n/**\r\n * Save `namespaces`.\r\n *\r\n * @param {String} namespaces\r\n * @api private\r\n */\r\nfunction save(namespaces) {\r\n\ttry {\r\n\t\tif (namespaces) {\r\n\t\t\texports.storage.setItem('debug', namespaces);\r\n\t\t} else {\r\n\t\t\texports.storage.removeItem('debug');\r\n\t\t}\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n}\r\n\r\n/**\r\n * Load `namespaces`.\r\n *\r\n * @return {String} returns the previously persisted debug modes\r\n * @api private\r\n */\r\nfunction load() {\r\n\tlet r;\r\n\ttry {\r\n\t\tr = exports.storage.getItem('debug');\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n\r\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\r\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\r\n\t\tr = process.env.DEBUG;\r\n\t}\r\n\r\n\treturn r;\r\n}\r\n\r\n/**\r\n * Localstorage attempts to return the localstorage.\r\n *\r\n * This is necessary because safari throws\r\n * when a user disables cookies/localstorage\r\n * and you attempt to access it.\r\n *\r\n * @return {LocalStorage}\r\n * @api private\r\n */\r\n\r\nfunction localstorage() {\r\n\ttry {\r\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\r\n\t\t// The Browser also has localStorage in the global context.\r\n\t\treturn localStorage;\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n}\r\n\r\nmodule.exports = require('./common')(exports);\r\n\r\nconst {formatters} = module.exports;\r\n\r\n/**\r\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\r\n */\r\n\r\nformatters.j = function (v) {\r\n\ttry {\r\n\t\treturn JSON.stringify(v);\r\n\t} catch (error) {\r\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\r\n\t}\r\n};\r\n", "/**\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {InitialConstruct} */\r\nexport const content = {tokenize: initializeContent}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeContent(effects) {\r\n  const contentStart = effects.attempt(\r\n    this.parser.constructs.contentInitial,\r\n    afterContentStartConstruct,\r\n    paragraphInitial\r\n  )\r\n  /** @type {Token} */\r\n  let previous\r\n\r\n  return contentStart\r\n\r\n  /** @type {State} */\r\n  function afterContentStartConstruct(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return factorySpace(effects, contentStart, types.linePrefix)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function paragraphInitial(code) {\r\n    assert(\r\n      code !== codes.eof && !markdownLineEnding(code),\r\n      'expected anything other than a line ending or EOF'\r\n    )\r\n    effects.enter(types.paragraph)\r\n    return lineStart(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function lineStart(code) {\r\n    const token = effects.enter(types.chunkText, {\r\n      contentType: constants.contentTypeText,\r\n      previous\r\n    })\r\n\r\n    if (previous) {\r\n      previous.next = token\r\n    }\r\n\r\n    previous = token\r\n\r\n    return data(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function data(code) {\r\n    if (code === codes.eof) {\r\n      effects.exit(types.chunkText)\r\n      effects.exit(types.paragraph)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      effects.exit(types.chunkText)\r\n      return lineStart\r\n    }\r\n\r\n    // Data.\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\n/**\r\n * @typedef {[Construct, ContainerState]} StackItem\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {splice} from 'micromark-util-chunked'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {InitialConstruct} */\r\nexport const document = {tokenize: initializeDocument}\r\n\r\n/** @type {Construct} */\r\nconst containerConstruct = {tokenize: tokenizeContainer}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeDocument(effects) {\r\n  const self = this\r\n  /** @type {Array<StackItem>} */\r\n  const stack = []\r\n  let continued = 0\r\n  /** @type {TokenizeContext | undefined} */\r\n  let childFlow\r\n  /** @type {Token | undefined} */\r\n  let childToken\r\n  /** @type {number} */\r\n  let lineStartOffset\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    // First we iterate through the open blocks, starting with the root\r\n    // document, and descending through last children down to the last open\r\n    // block.\r\n    // Each block imposes a condition that the line must satisfy if the block is\r\n    // to remain open.\r\n    // For example, a block quote requires a `>` character.\r\n    // A paragraph requires a non-blank line.\r\n    // In this phase we may match all or just some of the open blocks.\r\n    // But we cannot close unmatched blocks yet, because we may have a lazy\r\n    // continuation line.\r\n    if (continued < stack.length) {\r\n      const item = stack[continued]\r\n      self.containerState = item[1]\r\n      assert(\r\n        item[0].continuation,\r\n        'expected `continuation` to be defined on container construct'\r\n      )\r\n      return effects.attempt(\r\n        item[0].continuation,\r\n        documentContinue,\r\n        checkNewContainers\r\n      )(code)\r\n    }\r\n\r\n    // Done.\r\n    return checkNewContainers(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinue(code) {\r\n    assert(\r\n      self.containerState,\r\n      'expected `containerState` to be defined after continuation'\r\n    )\r\n\r\n    continued++\r\n\r\n    // Note: this field is called `_closeFlow` but it also closes containers.\r\n    // Perhaps a good idea to rename it but it’s already used in the wild by\r\n    // extensions.\r\n    if (self.containerState._closeFlow) {\r\n      self.containerState._closeFlow = undefined\r\n\r\n      if (childFlow) {\r\n        closeFlow()\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when dealing with lazy lines in `writeToChild`.\r\n      const indexBeforeExits = self.events.length\r\n      let indexBeforeFlow = indexBeforeExits\r\n      /** @type {Point | undefined} */\r\n      let point\r\n\r\n      // Find the flow chunk.\r\n      while (indexBeforeFlow--) {\r\n        if (\r\n          self.events[indexBeforeFlow][0] === 'exit' &&\r\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\r\n        ) {\r\n          point = self.events[indexBeforeFlow][1].end\r\n          break\r\n        }\r\n      }\r\n\r\n      assert(point, 'could not find previous flow chunk')\r\n\r\n      exitContainers(continued)\r\n\r\n      // Fix positions.\r\n      let index = indexBeforeExits\r\n\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = Object.assign({}, point)\r\n        index++\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(\r\n        self.events,\r\n        indexBeforeFlow + 1,\r\n        0,\r\n        self.events.slice(indexBeforeExits)\r\n      )\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index\r\n\r\n      return checkNewContainers(code)\r\n    }\r\n\r\n    return start(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function checkNewContainers(code) {\r\n    // Next, after consuming the continuation markers for existing blocks, we\r\n    // look for new block starts (e.g. `>` for a block quote).\r\n    // If we encounter a new block start, we close any blocks unmatched in\r\n    // step 1 before creating the new block as a child of the last matched\r\n    // block.\r\n    if (continued === stack.length) {\r\n      // No need to `check` whether there’s a container, of `exitContainers`\r\n      // would be moot.\r\n      // We can instead immediately `attempt` to parse one.\r\n      if (!childFlow) {\r\n        return documentContinued(code)\r\n      }\r\n\r\n      // If we have concrete content, such as block HTML or fenced code,\r\n      // we can’t have containers “pierce” into them, so we can immediately\r\n      // start.\r\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\r\n        return flowStart(code)\r\n      }\r\n\r\n      // If we do have flow, it could still be a blank line,\r\n      // but we’d be interrupting it w/ a new container if there’s a current\r\n      // construct.\r\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\r\n      // needed in micromark-extension-gfm-table@1.0.6).\r\n      self.interrupt = Boolean(\r\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\r\n      )\r\n    }\r\n\r\n    // Check if there is a new container.\r\n    self.containerState = {}\r\n    return effects.check(\r\n      containerConstruct,\r\n      thereIsANewContainer,\r\n      thereIsNoNewContainer\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsANewContainer(code) {\r\n    if (childFlow) closeFlow()\r\n    exitContainers(continued)\r\n    return documentContinued(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsNoNewContainer(code) {\r\n    self.parser.lazy[self.now().line] = continued !== stack.length\r\n    lineStartOffset = self.now().offset\r\n    return flowStart(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinued(code) {\r\n    // Try new containers.\r\n    self.containerState = {}\r\n    return effects.attempt(\r\n      containerConstruct,\r\n      containerContinue,\r\n      flowStart\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function containerContinue(code) {\r\n    assert(\r\n      self.currentConstruct,\r\n      'expected `currentConstruct` to be defined on tokenizer'\r\n    )\r\n    assert(\r\n      self.containerState,\r\n      'expected `containerState` to be defined on tokenizer'\r\n    )\r\n    continued++\r\n    stack.push([self.currentConstruct, self.containerState])\r\n    // Try another.\r\n    return documentContinued(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowStart(code) {\r\n    if (code === codes.eof) {\r\n      if (childFlow) closeFlow()\r\n      exitContainers(0)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    childFlow = childFlow || self.parser.flow(self.now())\r\n    effects.enter(types.chunkFlow, {\r\n      contentType: constants.contentTypeFlow,\r\n      previous: childToken,\r\n      _tokenizer: childFlow\r\n    })\r\n\r\n    return flowContinue(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowContinue(code) {\r\n    if (code === codes.eof) {\r\n      writeToChild(effects.exit(types.chunkFlow), true)\r\n      exitContainers(0)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      writeToChild(effects.exit(types.chunkFlow))\r\n      // Get ready for the next line.\r\n      continued = 0\r\n      self.interrupt = undefined\r\n      return start\r\n    }\r\n\r\n    effects.consume(code)\r\n    return flowContinue\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @param {boolean | undefined} [eof]\r\n   * @returns {void}\r\n   */\r\n  function writeToChild(token, eof) {\r\n    assert(childFlow, 'expected `childFlow` to be defined when continuing')\r\n    const stream = self.sliceStream(token)\r\n    if (eof) stream.push(null)\r\n    token.previous = childToken\r\n    if (childToken) childToken.next = token\r\n    childToken = token\r\n    childFlow.defineSkip(token.start)\r\n    childFlow.write(stream)\r\n\r\n    // Alright, so we just added a lazy line:\r\n    //\r\n    // ```markdown\r\n    // > a\r\n    // b.\r\n    //\r\n    // Or:\r\n    //\r\n    // > ~~~c\r\n    // d\r\n    //\r\n    // Or:\r\n    //\r\n    // > | e |\r\n    // f\r\n    // ```\r\n    //\r\n    // The construct in the second example (fenced code) does not accept lazy\r\n    // lines, so it marked itself as done at the end of its first line, and\r\n    // then the content construct parses `d`.\r\n    // Most constructs in markdown match on the first line: if the first line\r\n    // forms a construct, a non-lazy line can’t “unmake” it.\r\n    //\r\n    // The construct in the third example is potentially a GFM table, and\r\n    // those are *weird*.\r\n    // It *could* be a table, from the first line, if the following line\r\n    // matches a condition.\r\n    // In this case, that second line is lazy, which “unmakes” the first line\r\n    // and turns the whole into one content block.\r\n    //\r\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\r\n    // whether the lazy line started a new flow block.\r\n    // If it did, we exit the current containers between the two flow blocks.\r\n    if (self.parser.lazy[token.start.line]) {\r\n      let index = childFlow.events.length\r\n\r\n      while (index--) {\r\n        if (\r\n          // The token starts before the line ending…\r\n          childFlow.events[index][1].start.offset < lineStartOffset &&\r\n          // …and either is not ended yet…\r\n          (!childFlow.events[index][1].end ||\r\n            // …or ends after it.\r\n            childFlow.events[index][1].end.offset > lineStartOffset)\r\n        ) {\r\n          // Exit: there’s still something open, which means it’s a lazy line\r\n          // part of something.\r\n          return\r\n        }\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when closing flow in `documentContinue`.\r\n      const indexBeforeExits = self.events.length\r\n      let indexBeforeFlow = indexBeforeExits\r\n      /** @type {boolean | undefined} */\r\n      let seen\r\n      /** @type {Point | undefined} */\r\n      let point\r\n\r\n      // Find the previous chunk (the one before the lazy line).\r\n      while (indexBeforeFlow--) {\r\n        if (\r\n          self.events[indexBeforeFlow][0] === 'exit' &&\r\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\r\n        ) {\r\n          if (seen) {\r\n            point = self.events[indexBeforeFlow][1].end\r\n            break\r\n          }\r\n\r\n          seen = true\r\n        }\r\n      }\r\n\r\n      assert(point, 'could not find previous flow chunk')\r\n\r\n      exitContainers(continued)\r\n\r\n      // Fix positions.\r\n      index = indexBeforeExits\r\n\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = Object.assign({}, point)\r\n        index++\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(\r\n        self.events,\r\n        indexBeforeFlow + 1,\r\n        0,\r\n        self.events.slice(indexBeforeExits)\r\n      )\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} size\r\n   * @returns {void}\r\n   */\r\n  function exitContainers(size) {\r\n    let index = stack.length\r\n\r\n    // Exit open containers.\r\n    while (index-- > size) {\r\n      const entry = stack[index]\r\n      self.containerState = entry[1]\r\n      assert(\r\n        entry[0].exit,\r\n        'expected `exit` to be defined on container construct'\r\n      )\r\n      entry[0].exit.call(self, effects)\r\n    }\r\n\r\n    stack.length = size\r\n  }\r\n\r\n  function closeFlow() {\r\n    assert(\r\n      self.containerState,\r\n      'expected `containerState` to be defined when closing flow'\r\n    )\r\n    assert(childFlow, 'expected `childFlow` to be defined when closing it')\r\n    childFlow.write([codes.eof])\r\n    childToken = undefined\r\n    childFlow = undefined\r\n    self.containerState._closeFlow = undefined\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContainer(effects, ok, nok) {\r\n  // Always populated by defaults.\r\n  assert(\r\n    this.parser.constructs.disable.null,\r\n    'expected `disable.null` to be populated'\r\n  )\r\n  return factorySpace(\r\n    effects,\r\n    effects.attempt(this.parser.constructs.document, ok, nok),\r\n    types.linePrefix,\r\n    this.parser.constructs.disable.null.includes('codeIndented')\r\n      ? undefined\r\n      : constants.tabSize\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\nimport {blankLine, content} from 'micromark-core-commonmark'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {InitialConstruct} */\r\nexport const flow = {tokenize: initializeFlow}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeFlow(effects) {\r\n  const self = this\r\n  const initial = effects.attempt(\r\n    // Try to parse a blank line.\r\n    blankLine,\r\n    atBlankEnding,\r\n    // Try to parse initial flow (essentially, only code).\r\n    effects.attempt(\r\n      this.parser.constructs.flowInitial,\r\n      afterConstruct,\r\n      factorySpace(\r\n        effects,\r\n        effects.attempt(\r\n          this.parser.constructs.flow,\r\n          afterConstruct,\r\n          effects.attempt(content, afterConstruct)\r\n        ),\r\n        types.linePrefix\r\n      )\r\n    )\r\n  )\r\n\r\n  return initial\r\n\r\n  /** @type {State} */\r\n  function atBlankEnding(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEndingBlank)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEndingBlank)\r\n    self.currentConstruct = undefined\r\n    return initial\r\n  }\r\n\r\n  /** @type {State} */\r\n  function afterConstruct(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    self.currentConstruct = undefined\r\n    return initial\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\nexport const resolver = {resolveAll: createResolver()}\r\nexport const string = initializeFactory('string')\r\nexport const text = initializeFactory('text')\r\n\r\n/**\r\n * @param {'string' | 'text'} field\r\n * @returns {InitialConstruct}\r\n */\r\nfunction initializeFactory(field) {\r\n  return {\r\n    tokenize: initializeText,\r\n    resolveAll: createResolver(\r\n      field === 'text' ? resolveAllLineSuffixes : undefined\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   * @type {Initializer}\r\n   */\r\n  function initializeText(effects) {\r\n    const self = this\r\n    const constructs = this.parser.constructs[field]\r\n    const text = effects.attempt(constructs, start, notText)\r\n\r\n    return start\r\n\r\n    /** @type {State} */\r\n    function start(code) {\r\n      return atBreak(code) ? text(code) : notText(code)\r\n    }\r\n\r\n    /** @type {State} */\r\n    function notText(code) {\r\n      if (code === codes.eof) {\r\n        effects.consume(code)\r\n        return\r\n      }\r\n\r\n      effects.enter(types.data)\r\n      effects.consume(code)\r\n      return data\r\n    }\r\n\r\n    /** @type {State} */\r\n    function data(code) {\r\n      if (atBreak(code)) {\r\n        effects.exit(types.data)\r\n        return text(code)\r\n      }\r\n\r\n      // Data.\r\n      effects.consume(code)\r\n      return data\r\n    }\r\n\r\n    /**\r\n     * @param {Code} code\r\n     * @returns {boolean}\r\n     */\r\n    function atBreak(code) {\r\n      if (code === codes.eof) {\r\n        return true\r\n      }\r\n\r\n      const list = constructs[code]\r\n      let index = -1\r\n\r\n      if (list) {\r\n        // Always populated by defaults.\r\n        assert(Array.isArray(list), 'expected `disable.null` to be populated')\r\n\r\n        while (++index < list.length) {\r\n          const item = list[index]\r\n          if (!item.previous || item.previous.call(self, self.previous)) {\r\n            return true\r\n          }\r\n        }\r\n      }\r\n\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Resolver | undefined} [extraResolver]\r\n * @returns {Resolver}\r\n */\r\nfunction createResolver(extraResolver) {\r\n  return resolveAllText\r\n\r\n  /** @type {Resolver} */\r\n  function resolveAllText(events, context) {\r\n    let index = -1\r\n    /** @type {number | undefined} */\r\n    let enter\r\n\r\n    // A rather boring computation (to merge adjacent `data` events) which\r\n    // improves mm performance by 29%.\r\n    while (++index <= events.length) {\r\n      if (enter === undefined) {\r\n        if (events[index] && events[index][1].type === types.data) {\r\n          enter = index\r\n          index++\r\n        }\r\n      } else if (!events[index] || events[index][1].type !== types.data) {\r\n        // Don’t do anything if there is one data token.\r\n        if (index !== enter + 2) {\r\n          events[enter][1].end = events[index - 1][1].end\r\n          events.splice(enter + 2, index - enter - 2)\r\n          index = enter + 2\r\n        }\r\n\r\n        enter = undefined\r\n      }\r\n    }\r\n\r\n    return extraResolver ? extraResolver(events, context) : events\r\n  }\r\n}\r\n\r\n/**\r\n * A rather ugly set of instructions which again looks at chunks in the input\r\n * stream.\r\n * The reason to do this here is that it is *much* faster to parse in reverse.\r\n * And that we can’t hook into `null` to split the line suffix before an EOF.\r\n * To do: figure out if we can make this into a clean utility, or even in core.\r\n * As it will be useful for GFMs literal autolink extension (and maybe even\r\n * tables?)\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveAllLineSuffixes(events, context) {\r\n  let eventIndex = 0 // Skip first.\r\n\r\n  while (++eventIndex <= events.length) {\r\n    if (\r\n      (eventIndex === events.length ||\r\n        events[eventIndex][1].type === types.lineEnding) &&\r\n      events[eventIndex - 1][1].type === types.data\r\n    ) {\r\n      const data = events[eventIndex - 1][1]\r\n      const chunks = context.sliceStream(data)\r\n      let index = chunks.length\r\n      let bufferIndex = -1\r\n      let size = 0\r\n      /** @type {boolean | undefined} */\r\n      let tabs\r\n\r\n      while (index--) {\r\n        const chunk = chunks[index]\r\n\r\n        if (typeof chunk === 'string') {\r\n          bufferIndex = chunk.length\r\n\r\n          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {\r\n            size++\r\n            bufferIndex--\r\n          }\r\n\r\n          if (bufferIndex) break\r\n          bufferIndex = -1\r\n        }\r\n        // Number\r\n        else if (chunk === codes.horizontalTab) {\r\n          tabs = true\r\n          size++\r\n        } else if (chunk === codes.virtualSpace) {\r\n          // Empty\r\n        } else {\r\n          // Replacement character, exit.\r\n          index++\r\n          break\r\n        }\r\n      }\r\n\r\n      if (size) {\r\n        const token = {\r\n          type:\r\n            eventIndex === events.length ||\r\n            tabs ||\r\n            size < constants.hardBreakPrefixSizeMin\r\n              ? types.lineSuffix\r\n              : types.hardBreakTrailing,\r\n          start: {\r\n            line: data.end.line,\r\n            column: data.end.column - size,\r\n            offset: data.end.offset - size,\r\n            _index: data.start._index + index,\r\n            _bufferIndex: index\r\n              ? bufferIndex\r\n              : data.start._bufferIndex + bufferIndex\r\n          },\r\n          end: Object.assign({}, data.end)\r\n        }\r\n\r\n        data.end = Object.assign({}, token.start)\r\n\r\n        if (data.start.offset === data.end.offset) {\r\n          Object.assign(data, token)\r\n        } else {\r\n          events.splice(\r\n            eventIndex,\r\n            0,\r\n            ['enter', token, context],\r\n            ['exit', token, context]\r\n          )\r\n          eventIndex += 2\r\n        }\r\n      }\r\n\r\n      eventIndex++\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Chunk} Chunk\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\n/**\r\n * @callback Restore\r\n * @returns {void}\r\n *\r\n * @typedef Info\r\n * @property {Restore} restore\r\n * @property {number} from\r\n *\r\n * @callback ReturnHandle\r\n *   Handle a successful run.\r\n * @param {Construct} construct\r\n * @param {Info} info\r\n * @returns {void}\r\n */\r\n\r\nimport createDebug from 'debug'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {push, splice} from 'micromark-util-chunked'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {values} from 'micromark-util-symbol/values.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\nconst debug = createDebug('micromark')\r\n\r\n/**\r\n * Create a tokenizer.\r\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\r\n * The parser is the object dealing with it all.\r\n * `initialize` works like other constructs, except that only its `tokenize`\r\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\r\n * `from` can be given to set the point before the first character, although\r\n * when further lines are indented, they must be set with `defineSkip`.\r\n *\r\n * @param {ParseContext} parser\r\n * @param {InitialConstruct} initialize\r\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\r\n * @returns {TokenizeContext}\r\n */\r\nexport function createTokenizer(parser, initialize, from) {\r\n  /** @type {Point} */\r\n  let point = Object.assign(\r\n    from ? Object.assign({}, from) : {line: 1, column: 1, offset: 0},\r\n    {_index: 0, _bufferIndex: -1}\r\n  )\r\n  /** @type {Record<string, number>} */\r\n  const columnStart = {}\r\n  /** @type {Array<Construct>} */\r\n  const resolveAllConstructs = []\r\n  /** @type {Array<Chunk>} */\r\n  let chunks = []\r\n  /** @type {Array<Token>} */\r\n  let stack = []\r\n  /** @type {boolean | undefined} */\r\n  let consumed = true\r\n\r\n  /**\r\n   * Tools used for tokenizing.\r\n   *\r\n   * @type {Effects}\r\n   */\r\n  const effects = {\r\n    consume,\r\n    enter,\r\n    exit,\r\n    attempt: constructFactory(onsuccessfulconstruct),\r\n    check: constructFactory(onsuccessfulcheck),\r\n    interrupt: constructFactory(onsuccessfulcheck, {interrupt: true})\r\n  }\r\n\r\n  /**\r\n   * State and tools for resolving and serializing.\r\n   *\r\n   * @type {TokenizeContext}\r\n   */\r\n  const context = {\r\n    previous: codes.eof,\r\n    code: codes.eof,\r\n    containerState: {},\r\n    events: [],\r\n    parser,\r\n    sliceStream,\r\n    sliceSerialize,\r\n    now,\r\n    defineSkip,\r\n    write\r\n  }\r\n\r\n  /**\r\n   * The state function.\r\n   *\r\n   * @type {State | void}\r\n   */\r\n  let state = initialize.tokenize.call(context, effects)\r\n\r\n  /**\r\n   * Track which character we expect to be consumed, to catch bugs.\r\n   *\r\n   * @type {Code}\r\n   */\r\n  let expectedCode\r\n\r\n  if (initialize.resolveAll) {\r\n    resolveAllConstructs.push(initialize)\r\n  }\r\n\r\n  return context\r\n\r\n  /** @type {TokenizeContext['write']} */\r\n  function write(slice) {\r\n    chunks = push(chunks, slice)\r\n\r\n    main()\r\n\r\n    // Exit if we’re not done, resolve might change stuff.\r\n    if (chunks[chunks.length - 1] !== codes.eof) {\r\n      return []\r\n    }\r\n\r\n    addResult(initialize, 0)\r\n\r\n    // Otherwise, resolve, and exit.\r\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\r\n\r\n    return context.events\r\n  }\r\n\r\n  //\r\n  // Tools.\r\n  //\r\n\r\n  /** @type {TokenizeContext['sliceSerialize']} */\r\n  function sliceSerialize(token, expandTabs) {\r\n    return serializeChunks(sliceStream(token), expandTabs)\r\n  }\r\n\r\n  /** @type {TokenizeContext['sliceStream']} */\r\n  function sliceStream(token) {\r\n    return sliceChunks(chunks, token)\r\n  }\r\n\r\n  /** @type {TokenizeContext['now']} */\r\n  function now() {\r\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\r\n    const {line, column, offset, _index, _bufferIndex} = point\r\n    return {line, column, offset, _index, _bufferIndex}\r\n  }\r\n\r\n  /** @type {TokenizeContext['defineSkip']} */\r\n  function defineSkip(value) {\r\n    columnStart[value.line] = value.column\r\n    accountForPotentialSkip()\r\n    debug('position: define skip: `%j`', point)\r\n  }\r\n\r\n  //\r\n  // State management.\r\n  //\r\n\r\n  /**\r\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\r\n   * `consume`).\r\n   * Here is where we walk through the chunks, which either include strings of\r\n   * several characters, or numerical character codes.\r\n   * The reason to do this in a loop instead of a call is so the stack can\r\n   * drain.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  function main() {\r\n    /** @type {number} */\r\n    let chunkIndex\r\n\r\n    while (point._index < chunks.length) {\r\n      const chunk = chunks[point._index]\r\n\r\n      // If we’re in a buffer chunk, loop through it.\r\n      if (typeof chunk === 'string') {\r\n        chunkIndex = point._index\r\n\r\n        if (point._bufferIndex < 0) {\r\n          point._bufferIndex = 0\r\n        }\r\n\r\n        while (\r\n          point._index === chunkIndex &&\r\n          point._bufferIndex < chunk.length\r\n        ) {\r\n          go(chunk.charCodeAt(point._bufferIndex))\r\n        }\r\n      } else {\r\n        go(chunk)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deal with one code.\r\n   *\r\n   * @param {Code} code\r\n   * @returns {void}\r\n   */\r\n  function go(code) {\r\n    assert(consumed === true, 'expected character to be consumed')\r\n    consumed = undefined\r\n    debug('main: passing `%s` to %s', code, state && state.name)\r\n    expectedCode = code\r\n    assert(typeof state === 'function', 'expected state')\r\n    state = state(code)\r\n  }\r\n\r\n  /** @type {Effects['consume']} */\r\n  function consume(code) {\r\n    assert(code === expectedCode, 'expected given code to equal expected code')\r\n\r\n    debug('consume: `%s`', code)\r\n\r\n    assert(\r\n      consumed === undefined,\r\n      'expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used'\r\n    )\r\n    assert(\r\n      code === null\r\n        ? context.events.length === 0 ||\r\n            context.events[context.events.length - 1][0] === 'exit'\r\n        : context.events[context.events.length - 1][0] === 'enter',\r\n      'expected last token to be open'\r\n    )\r\n\r\n    if (markdownLineEnding(code)) {\r\n      point.line++\r\n      point.column = 1\r\n      point.offset += code === codes.carriageReturnLineFeed ? 2 : 1\r\n      accountForPotentialSkip()\r\n      debug('position: after eol: `%j`', point)\r\n    } else if (code !== codes.virtualSpace) {\r\n      point.column++\r\n      point.offset++\r\n    }\r\n\r\n    // Not in a string chunk.\r\n    if (point._bufferIndex < 0) {\r\n      point._index++\r\n    } else {\r\n      point._bufferIndex++\r\n\r\n      // At end of string chunk.\r\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\r\n      // strings.\r\n      if (point._bufferIndex === chunks[point._index].length) {\r\n        point._bufferIndex = -1\r\n        point._index++\r\n      }\r\n    }\r\n\r\n    // Expose the previous character.\r\n    context.previous = code\r\n\r\n    // Mark as consumed.\r\n    consumed = true\r\n  }\r\n\r\n  /** @type {Effects['enter']} */\r\n  function enter(type, fields) {\r\n    /** @type {Token} */\r\n    // @ts-expect-error Patch instead of assign required fields to help GC.\r\n    const token = fields || {}\r\n    token.type = type\r\n    token.start = now()\r\n\r\n    assert(typeof type === 'string', 'expected string type')\r\n    assert(type.length > 0, 'expected non-empty string')\r\n    debug('enter: `%s`', type)\r\n\r\n    context.events.push(['enter', token, context])\r\n\r\n    stack.push(token)\r\n\r\n    return token\r\n  }\r\n\r\n  /** @type {Effects['exit']} */\r\n  function exit(type) {\r\n    assert(typeof type === 'string', 'expected string type')\r\n    assert(type.length > 0, 'expected non-empty string')\r\n\r\n    const token = stack.pop()\r\n    assert(token, 'cannot close w/o open tokens')\r\n    token.end = now()\r\n\r\n    assert(type === token.type, 'expected exit token to match current token')\r\n\r\n    assert(\r\n      !(\r\n        token.start._index === token.end._index &&\r\n        token.start._bufferIndex === token.end._bufferIndex\r\n      ),\r\n      'expected non-empty token (`' + type + '`)'\r\n    )\r\n\r\n    debug('exit: `%s`', token.type)\r\n    context.events.push(['exit', token, context])\r\n\r\n    return token\r\n  }\r\n\r\n  /**\r\n   * Use results.\r\n   *\r\n   * @type {ReturnHandle}\r\n   */\r\n  function onsuccessfulconstruct(construct, info) {\r\n    addResult(construct, info.from)\r\n  }\r\n\r\n  /**\r\n   * Discard results.\r\n   *\r\n   * @type {ReturnHandle}\r\n   */\r\n  function onsuccessfulcheck(_, info) {\r\n    info.restore()\r\n  }\r\n\r\n  /**\r\n   * Factory to attempt/check/interrupt.\r\n   *\r\n   * @param {ReturnHandle} onreturn\r\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\r\n   */\r\n  function constructFactory(onreturn, fields) {\r\n    return hook\r\n\r\n    /**\r\n     * Handle either an object mapping codes to constructs, a list of\r\n     * constructs, or a single construct.\r\n     *\r\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\r\n     * @param {State} returnState\r\n     * @param {State | undefined} [bogusState]\r\n     * @returns {State}\r\n     */\r\n    function hook(constructs, returnState, bogusState) {\r\n      /** @type {Array<Construct>} */\r\n      let listOfConstructs\r\n      /** @type {number} */\r\n      let constructIndex\r\n      /** @type {Construct} */\r\n      let currentConstruct\r\n      /** @type {Info} */\r\n      let info\r\n\r\n      return Array.isArray(constructs)\r\n        ? /* c8 ignore next 1 */\r\n          handleListOfConstructs(constructs)\r\n        : 'tokenize' in constructs\r\n        ? // @ts-expect-error Looks like a construct.\r\n          handleListOfConstructs([constructs])\r\n        : handleMapOfConstructs(constructs)\r\n\r\n      /**\r\n       * Handle a list of construct.\r\n       *\r\n       * @param {ConstructRecord} map\r\n       * @returns {State}\r\n       */\r\n      function handleMapOfConstructs(map) {\r\n        return start\r\n\r\n        /** @type {State} */\r\n        function start(code) {\r\n          const def = code !== null && map[code]\r\n          const all = code !== null && map.null\r\n          const list = [\r\n            // To do: add more extension tests.\r\n            /* c8 ignore next 2 */\r\n            ...(Array.isArray(def) ? def : def ? [def] : []),\r\n            ...(Array.isArray(all) ? all : all ? [all] : [])\r\n          ]\r\n\r\n          return handleListOfConstructs(list)(code)\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Handle a list of construct.\r\n       *\r\n       * @param {Array<Construct>} list\r\n       * @returns {State}\r\n       */\r\n      function handleListOfConstructs(list) {\r\n        listOfConstructs = list\r\n        constructIndex = 0\r\n\r\n        if (list.length === 0) {\r\n          assert(bogusState, 'expected `bogusState` to be given')\r\n          return bogusState\r\n        }\r\n\r\n        return handleConstruct(list[constructIndex])\r\n      }\r\n\r\n      /**\r\n       * Handle a single construct.\r\n       *\r\n       * @param {Construct} construct\r\n       * @returns {State}\r\n       */\r\n      function handleConstruct(construct) {\r\n        return start\r\n\r\n        /** @type {State} */\r\n        function start(code) {\r\n          // To do: not needed to store if there is no bogus state, probably?\r\n          // Currently doesn’t work because `inspect` in document does a check\r\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\r\n          // by not storing.\r\n          info = store()\r\n          currentConstruct = construct\r\n\r\n          if (!construct.partial) {\r\n            context.currentConstruct = construct\r\n          }\r\n\r\n          // Always populated by defaults.\r\n          assert(\r\n            context.parser.constructs.disable.null,\r\n            'expected `disable.null` to be populated'\r\n          )\r\n\r\n          if (\r\n            construct.name &&\r\n            context.parser.constructs.disable.null.includes(construct.name)\r\n          ) {\r\n            return nok(code)\r\n          }\r\n\r\n          return construct.tokenize.call(\r\n            // If we do have fields, create an object w/ `context` as its\r\n            // prototype.\r\n            // This allows a “live binding”, which is needed for `interrupt`.\r\n            fields ? Object.assign(Object.create(context), fields) : context,\r\n            effects,\r\n            ok,\r\n            nok\r\n          )(code)\r\n        }\r\n      }\r\n\r\n      /** @type {State} */\r\n      function ok(code) {\r\n        assert(code === expectedCode, 'expected code')\r\n        consumed = true\r\n        onreturn(currentConstruct, info)\r\n        return returnState\r\n      }\r\n\r\n      /** @type {State} */\r\n      function nok(code) {\r\n        assert(code === expectedCode, 'expected code')\r\n        consumed = true\r\n        info.restore()\r\n\r\n        if (++constructIndex < listOfConstructs.length) {\r\n          return handleConstruct(listOfConstructs[constructIndex])\r\n        }\r\n\r\n        return bogusState\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Construct} construct\r\n   * @param {number} from\r\n   * @returns {void}\r\n   */\r\n  function addResult(construct, from) {\r\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\r\n      resolveAllConstructs.push(construct)\r\n    }\r\n\r\n    if (construct.resolve) {\r\n      splice(\r\n        context.events,\r\n        from,\r\n        context.events.length - from,\r\n        construct.resolve(context.events.slice(from), context)\r\n      )\r\n    }\r\n\r\n    if (construct.resolveTo) {\r\n      context.events = construct.resolveTo(context.events, context)\r\n    }\r\n\r\n    assert(\r\n      construct.partial ||\r\n        context.events.length === 0 ||\r\n        context.events[context.events.length - 1][0] === 'exit',\r\n      'expected last token to end'\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Store state.\r\n   *\r\n   * @returns {Info}\r\n   */\r\n  function store() {\r\n    const startPoint = now()\r\n    const startPrevious = context.previous\r\n    const startCurrentConstruct = context.currentConstruct\r\n    const startEventsIndex = context.events.length\r\n    const startStack = Array.from(stack)\r\n\r\n    return {restore, from: startEventsIndex}\r\n\r\n    /**\r\n     * Restore state.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function restore() {\r\n      point = startPoint\r\n      context.previous = startPrevious\r\n      context.currentConstruct = startCurrentConstruct\r\n      context.events.length = startEventsIndex\r\n      stack = startStack\r\n      accountForPotentialSkip()\r\n      debug('position: restore: `%j`', point)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move the current point a bit forward in the line when it’s on a column\r\n   * skip.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  function accountForPotentialSkip() {\r\n    if (point.line in columnStart && point.column < 2) {\r\n      point.column = columnStart[point.line]\r\n      point.offset += columnStart[point.line] - 1\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the chunks from a slice of chunks in the range of a token.\r\n *\r\n * @param {Array<Chunk>} chunks\r\n * @param {Pick<Token, 'end' | 'start'>} token\r\n * @returns {Array<Chunk>}\r\n */\r\nfunction sliceChunks(chunks, token) {\r\n  const startIndex = token.start._index\r\n  const startBufferIndex = token.start._bufferIndex\r\n  const endIndex = token.end._index\r\n  const endBufferIndex = token.end._bufferIndex\r\n  /** @type {Array<Chunk>} */\r\n  let view\r\n\r\n  if (startIndex === endIndex) {\r\n    assert(endBufferIndex > -1, 'expected non-negative end buffer index')\r\n    assert(startBufferIndex > -1, 'expected non-negative start buffer index')\r\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\r\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\r\n  } else {\r\n    view = chunks.slice(startIndex, endIndex)\r\n\r\n    if (startBufferIndex > -1) {\r\n      const head = view[0]\r\n      if (typeof head === 'string') {\r\n        view[0] = head.slice(startBufferIndex)\r\n      } else {\r\n        assert(startBufferIndex === 0, 'expected `startBufferIndex` to be `0`')\r\n        view.shift()\r\n      }\r\n    }\r\n\r\n    if (endBufferIndex > 0) {\r\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\r\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\r\n    }\r\n  }\r\n\r\n  return view\r\n}\r\n\r\n/**\r\n * Get the string value of a slice of chunks.\r\n *\r\n * @param {Array<Chunk>} chunks\r\n * @param {boolean | undefined} [expandTabs=false]\r\n * @returns {string}\r\n */\r\nfunction serializeChunks(chunks, expandTabs) {\r\n  let index = -1\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  /** @type {boolean | undefined} */\r\n  let atTab\r\n\r\n  while (++index < chunks.length) {\r\n    const chunk = chunks[index]\r\n    /** @type {string} */\r\n    let value\r\n\r\n    if (typeof chunk === 'string') {\r\n      value = chunk\r\n    } else\r\n      switch (chunk) {\r\n        case codes.carriageReturn: {\r\n          value = values.cr\r\n\r\n          break\r\n        }\r\n\r\n        case codes.lineFeed: {\r\n          value = values.lf\r\n\r\n          break\r\n        }\r\n\r\n        case codes.carriageReturnLineFeed: {\r\n          value = values.cr + values.lf\r\n\r\n          break\r\n        }\r\n\r\n        case codes.horizontalTab: {\r\n          value = expandTabs ? values.space : values.ht\r\n\r\n          break\r\n        }\r\n\r\n        case codes.virtualSpace: {\r\n          if (!expandTabs && atTab) continue\r\n          value = values.space\r\n\r\n          break\r\n        }\r\n\r\n        default: {\r\n          assert(typeof chunk === 'number', 'expected number')\r\n          // Currently only replacement character.\r\n          value = String.fromCharCode(chunk)\r\n        }\r\n      }\r\n\r\n    atTab = chunk === codes.horizontalTab\r\n    result.push(value)\r\n  }\r\n\r\n  return result.join('')\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n */\r\n\r\nimport {\r\n  attention,\r\n  autolink,\r\n  blockQuote,\r\n  characterEscape,\r\n  characterReference,\r\n  codeFenced,\r\n  codeIndented,\r\n  codeText,\r\n  definition,\r\n  hardBreakEscape,\r\n  headingAtx,\r\n  htmlFlow,\r\n  htmlText,\r\n  labelEnd,\r\n  labelStartImage,\r\n  labelStartLink,\r\n  lineEnding,\r\n  list,\r\n  setextUnderline,\r\n  thematicBreak\r\n} from 'micromark-core-commonmark'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {resolver as resolveText} from './initialize/text.js'\r\n\r\n/** @satisfies {Extension['document']} */\r\nexport const document = {\r\n  [codes.asterisk]: list,\r\n  [codes.plusSign]: list,\r\n  [codes.dash]: list,\r\n  [codes.digit0]: list,\r\n  [codes.digit1]: list,\r\n  [codes.digit2]: list,\r\n  [codes.digit3]: list,\r\n  [codes.digit4]: list,\r\n  [codes.digit5]: list,\r\n  [codes.digit6]: list,\r\n  [codes.digit7]: list,\r\n  [codes.digit8]: list,\r\n  [codes.digit9]: list,\r\n  [codes.greaterThan]: blockQuote\r\n}\r\n\r\n/** @satisfies {Extension['contentInitial']} */\r\nexport const contentInitial = {\r\n  [codes.leftSquareBracket]: definition\r\n}\r\n\r\n/** @satisfies {Extension['flowInitial']} */\r\nexport const flowInitial = {\r\n  [codes.horizontalTab]: codeIndented,\r\n  [codes.virtualSpace]: codeIndented,\r\n  [codes.space]: codeIndented\r\n}\r\n\r\n/** @satisfies {Extension['flow']} */\r\nexport const flow = {\r\n  [codes.numberSign]: headingAtx,\r\n  [codes.asterisk]: thematicBreak,\r\n  [codes.dash]: [setextUnderline, thematicBreak],\r\n  [codes.lessThan]: htmlFlow,\r\n  [codes.equalsTo]: setextUnderline,\r\n  [codes.underscore]: thematicBreak,\r\n  [codes.graveAccent]: codeFenced,\r\n  [codes.tilde]: codeFenced\r\n}\r\n\r\n/** @satisfies {Extension['string']} */\r\nexport const string = {\r\n  [codes.ampersand]: characterReference,\r\n  [codes.backslash]: characterEscape\r\n}\r\n\r\n/** @satisfies {Extension['text']} */\r\nexport const text = {\r\n  [codes.carriageReturn]: lineEnding,\r\n  [codes.lineFeed]: lineEnding,\r\n  [codes.carriageReturnLineFeed]: lineEnding,\r\n  [codes.exclamationMark]: labelStartImage,\r\n  [codes.ampersand]: characterReference,\r\n  [codes.asterisk]: attention,\r\n  [codes.lessThan]: [autolink, htmlText],\r\n  [codes.leftSquareBracket]: labelStartLink,\r\n  [codes.backslash]: [hardBreakEscape, characterEscape],\r\n  [codes.rightSquareBracket]: labelEnd,\r\n  [codes.underscore]: attention,\r\n  [codes.graveAccent]: codeText\r\n}\r\n\r\n/** @satisfies {Extension['insideSpan']} */\r\nexport const insideSpan = {null: [attention, resolveText]}\r\n\r\n/** @satisfies {Extension['attentionMarkers']} */\r\nexport const attentionMarkers = {null: [codes.asterisk, codes.underscore]}\r\n\r\n/** @satisfies {Extension['disable']} */\r\nexport const disable = {null: []}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Create} Create\r\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\r\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\r\n */\r\n\r\nimport {combineExtensions} from 'micromark-util-combine-extensions'\r\nimport {content} from './initialize/content.js'\r\nimport {document} from './initialize/document.js'\r\nimport {flow} from './initialize/flow.js'\r\nimport {text, string} from './initialize/text.js'\r\nimport {createTokenizer} from './create-tokenizer.js'\r\nimport * as defaultConstructs from './constructs.js'\r\n\r\n/**\r\n * @param {ParseOptions | null | undefined} [options]\r\n * @returns {ParseContext}\r\n */\r\nexport function parse(options) {\r\n  const settings = options || {}\r\n  const constructs = /** @type {FullNormalizedExtension} */ (\r\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\r\n  )\r\n\r\n  /** @type {ParseContext} */\r\n  const parser = {\r\n    defined: [],\r\n    lazy: {},\r\n    constructs,\r\n    content: create(content),\r\n    document: create(document),\r\n    flow: create(flow),\r\n    string: create(string),\r\n    text: create(text)\r\n  }\r\n\r\n  return parser\r\n\r\n  /**\r\n   * @param {InitialConstruct} initial\r\n   */\r\n  function create(initial) {\r\n    return creator\r\n    /** @type {Create} */\r\n    function creator(from) {\r\n      return createTokenizer(parser, initial, from)\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Chunk} Chunk\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Encoding} Encoding\r\n * @typedef {import('micromark-util-types').Value} Value\r\n */\r\n\r\n/**\r\n * @callback Preprocessor\r\n * @param {Value} value\r\n * @param {Encoding | null | undefined} [encoding]\r\n * @param {boolean | null | undefined} [end=false]\r\n * @returns {Array<Chunk>}\r\n */\r\n\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\n\r\nconst search = /[\\0\\t\\n\\r]/g\r\n\r\n/**\r\n * @returns {Preprocessor}\r\n */\r\nexport function preprocess() {\r\n  let column = 1\r\n  let buffer = ''\r\n  /** @type {boolean | undefined} */\r\n  let start = true\r\n  /** @type {boolean | undefined} */\r\n  let atCarriageReturn\r\n\r\n  return preprocessor\r\n\r\n  /** @type {Preprocessor} */\r\n  function preprocessor(value, encoding, end) {\r\n    /** @type {Array<Chunk>} */\r\n    const chunks = []\r\n    /** @type {RegExpMatchArray | null} */\r\n    let match\r\n    /** @type {number} */\r\n    let next\r\n    /** @type {number} */\r\n    let startPosition\r\n    /** @type {number} */\r\n    let endPosition\r\n    /** @type {Code} */\r\n    let code\r\n\r\n    // @ts-expect-error `Buffer` does allow an encoding.\r\n    value = buffer + value.toString(encoding)\r\n    startPosition = 0\r\n    buffer = ''\r\n\r\n    if (start) {\r\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\r\n      if (value.charCodeAt(0) === codes.byteOrderMarker) {\r\n        startPosition++\r\n      }\r\n\r\n      start = undefined\r\n    }\r\n\r\n    while (startPosition < value.length) {\r\n      search.lastIndex = startPosition\r\n      match = search.exec(value)\r\n      endPosition =\r\n        match && match.index !== undefined ? match.index : value.length\r\n      code = value.charCodeAt(endPosition)\r\n\r\n      if (!match) {\r\n        buffer = value.slice(startPosition)\r\n        break\r\n      }\r\n\r\n      if (\r\n        code === codes.lf &&\r\n        startPosition === endPosition &&\r\n        atCarriageReturn\r\n      ) {\r\n        chunks.push(codes.carriageReturnLineFeed)\r\n        atCarriageReturn = undefined\r\n      } else {\r\n        if (atCarriageReturn) {\r\n          chunks.push(codes.carriageReturn)\r\n          atCarriageReturn = undefined\r\n        }\r\n\r\n        if (startPosition < endPosition) {\r\n          chunks.push(value.slice(startPosition, endPosition))\r\n          column += endPosition - startPosition\r\n        }\r\n\r\n        switch (code) {\r\n          case codes.nul: {\r\n            chunks.push(codes.replacementCharacter)\r\n            column++\r\n\r\n            break\r\n          }\r\n\r\n          case codes.ht: {\r\n            next = Math.ceil(column / constants.tabSize) * constants.tabSize\r\n            chunks.push(codes.horizontalTab)\r\n            while (column++ < next) chunks.push(codes.virtualSpace)\r\n\r\n            break\r\n          }\r\n\r\n          case codes.lf: {\r\n            chunks.push(codes.lineFeed)\r\n            column = 1\r\n\r\n            break\r\n          }\r\n\r\n          default: {\r\n            atCarriageReturn = true\r\n            column = 1\r\n          }\r\n        }\r\n      }\r\n\r\n      startPosition = endPosition + 1\r\n    }\r\n\r\n    if (end) {\r\n      if (atCarriageReturn) chunks.push(codes.carriageReturn)\r\n      if (buffer) chunks.push(buffer)\r\n      chunks.push(codes.eof)\r\n    }\r\n\r\n    return chunks\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n */\r\n\r\nimport {subtokenize} from 'micromark-util-subtokenize'\r\n\r\n/**\r\n * @param {Array<Event>} events\r\n * @returns {Array<Event>}\r\n */\r\nexport function postprocess(events) {\r\n  while (!subtokenize(events)) {\r\n    // Empty\r\n  }\r\n\r\n  return events\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Encoding} Encoding\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Value} Value\r\n *\r\n * @typedef {import('unist').Parent} UnistParent\r\n * @typedef {import('unist').Point} Point\r\n *\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').Break} Break\r\n * @typedef {import('mdast').Blockquote} Blockquote\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').Emphasis} Emphasis\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('mdast').HTML} HTML\r\n * @typedef {import('mdast').Image} Image\r\n * @typedef {import('mdast').ImageReference} ImageReference\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('mdast').LinkReference} LinkReference\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('mdast').Text} Text\r\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\r\n * @typedef {import('mdast').ReferenceType} ReferenceType\r\n * @typedef {import('../index.js').CompileData} CompileData\r\n */\r\n\r\n/**\r\n * @typedef {Root | Content} Node\r\n * @typedef {Extract<Node, UnistParent>} Parent\r\n *\r\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\r\n */\r\n\r\n/**\r\n * @callback Transform\r\n *   Extra transform, to change the AST afterwards.\r\n * @param {Root} tree\r\n *   Tree to transform.\r\n * @returns {Root | undefined | null | void}\r\n *   New tree or nothing (in which case the current tree is used).\r\n *\r\n * @callback Handle\r\n *   Handle a token.\r\n * @param {CompileContext} this\r\n *   Context.\r\n * @param {Token} token\r\n *   Current token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @typedef {Record<string, Handle>} Handles\r\n *   Token types mapping to handles\r\n *\r\n * @callback OnEnterError\r\n *   Handle the case where the `right` token is open, but it is closed (by the\r\n *   `left` token) or because we reached the end of the document.\r\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\r\n *   Context.\r\n * @param {Token | undefined} left\r\n *   Left token.\r\n * @param {Token} right\r\n *   Right token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @callback OnExitError\r\n *   Handle the case where the `right` token is open but it is closed by\r\n *   exiting the `left` token.\r\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\r\n *   Context.\r\n * @param {Token} left\r\n *   Left token.\r\n * @param {Token} right\r\n *   Right token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\r\n *   Open token on the stack, with an optional error handler for when\r\n *   that token isn’t closed properly.\r\n */\r\n\r\n/**\r\n * @typedef Config\r\n *   Configuration.\r\n *\r\n *   We have our defaults, but extensions will add more.\r\n * @property {Array<string>} canContainEols\r\n *   Token types where line endings are used.\r\n * @property {Handles} enter\r\n *   Opening handles.\r\n * @property {Handles} exit\r\n *   Closing handles.\r\n * @property {Array<Transform>} transforms\r\n *   Tree transforms.\r\n *\r\n * @typedef {Partial<Config>} Extension\r\n *   Change how markdown tokens from micromark are turned into mdast.\r\n *\r\n * @typedef CompileContext\r\n *   mdast compiler context.\r\n * @property {Array<Node | Fragment>} stack\r\n *   Stack of nodes.\r\n * @property {Array<TokenTuple>} tokenStack\r\n *   Stack of tokens.\r\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\r\n *   Get data from the key/value store.\r\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\r\n *   Set data into the key/value store.\r\n * @property {(this: CompileContext) => void} buffer\r\n *   Capture some of the output data.\r\n * @property {(this: CompileContext) => string} resume\r\n *   Stop capturing and access the output data.\r\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\r\n *   Enter a token.\r\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\r\n *   Exit a token.\r\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\r\n *   Get the string value of a token.\r\n * @property {Config} config\r\n *   Configuration.\r\n *\r\n * @typedef FromMarkdownOptions\r\n *   Configuration for how to build mdast.\r\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\r\n *   Extensions for this utility to change how tokens are turned into a tree.\r\n *\r\n * @typedef {ParseOptions & FromMarkdownOptions} Options\r\n *   Configuration.\r\n */\r\n\r\n// To do: micromark: create a registry of tokens?\r\n// To do: next major: don’t return given `Node` from `enter`.\r\n// To do: next major: remove setter/getter.\r\n\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {toString} from 'mdast-util-to-string'\r\nimport {parse} from 'micromark/lib/parse.js'\r\nimport {preprocess} from 'micromark/lib/preprocess.js'\r\nimport {postprocess} from 'micromark/lib/postprocess.js'\r\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\r\nimport {decodeString} from 'micromark-util-decode-string'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {stringifyPosition} from 'unist-util-stringify-position'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * @param value\r\n *   Markdown to parse.\r\n * @param encoding\r\n *   Character encoding for when `value` is `Buffer`.\r\n * @param options\r\n *   Configuration.\r\n * @returns\r\n *   mdast tree.\r\n */\r\nexport const fromMarkdown =\r\n  /**\r\n   * @type {(\r\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\r\n   *   ((value: Value, options?: Options | null | undefined) => Root)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Value} value\r\n     * @param {Encoding | Options | null | undefined} [encoding]\r\n     * @param {Options | null | undefined} [options]\r\n     * @returns {Root}\r\n     */\r\n    function (value, encoding, options) {\r\n      if (typeof encoding !== 'string') {\r\n        options = encoding\r\n        encoding = undefined\r\n      }\r\n\r\n      return compiler(options)(\r\n        postprocess(\r\n          parse(options).document().write(preprocess()(value, encoding, true))\r\n        )\r\n      )\r\n    }\r\n  )\r\n\r\n/**\r\n * Note this compiler only understand complete buffering, not streaming.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n */\r\nfunction compiler(options) {\r\n  /** @type {Config} */\r\n  const config = {\r\n    transforms: [],\r\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\r\n    enter: {\r\n      autolink: opener(link),\r\n      autolinkProtocol: onenterdata,\r\n      autolinkEmail: onenterdata,\r\n      atxHeading: opener(heading),\r\n      blockQuote: opener(blockQuote),\r\n      characterEscape: onenterdata,\r\n      characterReference: onenterdata,\r\n      codeFenced: opener(codeFlow),\r\n      codeFencedFenceInfo: buffer,\r\n      codeFencedFenceMeta: buffer,\r\n      codeIndented: opener(codeFlow, buffer),\r\n      codeText: opener(codeText, buffer),\r\n      codeTextData: onenterdata,\r\n      data: onenterdata,\r\n      codeFlowValue: onenterdata,\r\n      definition: opener(definition),\r\n      definitionDestinationString: buffer,\r\n      definitionLabelString: buffer,\r\n      definitionTitleString: buffer,\r\n      emphasis: opener(emphasis),\r\n      hardBreakEscape: opener(hardBreak),\r\n      hardBreakTrailing: opener(hardBreak),\r\n      htmlFlow: opener(html, buffer),\r\n      htmlFlowData: onenterdata,\r\n      htmlText: opener(html, buffer),\r\n      htmlTextData: onenterdata,\r\n      image: opener(image),\r\n      label: buffer,\r\n      link: opener(link),\r\n      listItem: opener(listItem),\r\n      listItemValue: onenterlistitemvalue,\r\n      listOrdered: opener(list, onenterlistordered),\r\n      listUnordered: opener(list),\r\n      paragraph: opener(paragraph),\r\n      reference: onenterreference,\r\n      referenceString: buffer,\r\n      resourceDestinationString: buffer,\r\n      resourceTitleString: buffer,\r\n      setextHeading: opener(heading),\r\n      strong: opener(strong),\r\n      thematicBreak: opener(thematicBreak)\r\n    },\r\n    exit: {\r\n      atxHeading: closer(),\r\n      atxHeadingSequence: onexitatxheadingsequence,\r\n      autolink: closer(),\r\n      autolinkEmail: onexitautolinkemail,\r\n      autolinkProtocol: onexitautolinkprotocol,\r\n      blockQuote: closer(),\r\n      characterEscapeValue: onexitdata,\r\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\r\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\r\n      characterReferenceValue: onexitcharacterreferencevalue,\r\n      codeFenced: closer(onexitcodefenced),\r\n      codeFencedFence: onexitcodefencedfence,\r\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\r\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\r\n      codeFlowValue: onexitdata,\r\n      codeIndented: closer(onexitcodeindented),\r\n      codeText: closer(onexitcodetext),\r\n      codeTextData: onexitdata,\r\n      data: onexitdata,\r\n      definition: closer(),\r\n      definitionDestinationString: onexitdefinitiondestinationstring,\r\n      definitionLabelString: onexitdefinitionlabelstring,\r\n      definitionTitleString: onexitdefinitiontitlestring,\r\n      emphasis: closer(),\r\n      hardBreakEscape: closer(onexithardbreak),\r\n      hardBreakTrailing: closer(onexithardbreak),\r\n      htmlFlow: closer(onexithtmlflow),\r\n      htmlFlowData: onexitdata,\r\n      htmlText: closer(onexithtmltext),\r\n      htmlTextData: onexitdata,\r\n      image: closer(onexitimage),\r\n      label: onexitlabel,\r\n      labelText: onexitlabeltext,\r\n      lineEnding: onexitlineending,\r\n      link: closer(onexitlink),\r\n      listItem: closer(),\r\n      listOrdered: closer(),\r\n      listUnordered: closer(),\r\n      paragraph: closer(),\r\n      referenceString: onexitreferencestring,\r\n      resourceDestinationString: onexitresourcedestinationstring,\r\n      resourceTitleString: onexitresourcetitlestring,\r\n      resource: onexitresource,\r\n      setextHeading: closer(onexitsetextheading),\r\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\r\n      setextHeadingText: onexitsetextheadingtext,\r\n      strong: closer(),\r\n      thematicBreak: closer()\r\n    }\r\n  }\r\n\r\n  configure(config, (options || {}).mdastExtensions || [])\r\n\r\n  /** @type {CompileData} */\r\n  const data = {}\r\n\r\n  return compile\r\n\r\n  /**\r\n   * Turn micromark events into an mdast tree.\r\n   *\r\n   * @param {Array<Event>} events\r\n   *   Events.\r\n   * @returns {Root}\r\n   *   mdast tree.\r\n   */\r\n  function compile(events) {\r\n    /** @type {Root} */\r\n    let tree = {type: 'root', children: []}\r\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\r\n    const context = {\r\n      stack: [tree],\r\n      tokenStack: [],\r\n      config,\r\n      enter,\r\n      exit,\r\n      buffer,\r\n      resume,\r\n      setData,\r\n      getData\r\n    }\r\n    /** @type {Array<number>} */\r\n    const listStack = []\r\n    let index = -1\r\n\r\n    while (++index < events.length) {\r\n      // We preprocess lists to add `listItem` tokens, and to infer whether\r\n      // items the list itself are spread out.\r\n      if (\r\n        events[index][1].type === types.listOrdered ||\r\n        events[index][1].type === types.listUnordered\r\n      ) {\r\n        if (events[index][0] === 'enter') {\r\n          listStack.push(index)\r\n        } else {\r\n          const tail = listStack.pop()\r\n          assert(typeof tail === 'number', 'expected list ot be open')\r\n          index = prepareList(events, tail, index)\r\n        }\r\n      }\r\n    }\r\n\r\n    index = -1\r\n\r\n    while (++index < events.length) {\r\n      const handler = config[events[index][0]]\r\n\r\n      if (own.call(handler, events[index][1].type)) {\r\n        handler[events[index][1].type].call(\r\n          Object.assign(\r\n            {sliceSerialize: events[index][2].sliceSerialize},\r\n            context\r\n          ),\r\n          events[index][1]\r\n        )\r\n      }\r\n    }\r\n\r\n    // Handle tokens still being open.\r\n    if (context.tokenStack.length > 0) {\r\n      const tail = context.tokenStack[context.tokenStack.length - 1]\r\n      const handler = tail[1] || defaultOnError\r\n      handler.call(context, undefined, tail[0])\r\n    }\r\n\r\n    // Figure out `root` position.\r\n    tree.position = {\r\n      start: point(\r\n        events.length > 0 ? events[0][1].start : {line: 1, column: 1, offset: 0}\r\n      ),\r\n      end: point(\r\n        events.length > 0\r\n          ? events[events.length - 2][1].end\r\n          : {line: 1, column: 1, offset: 0}\r\n      )\r\n    }\r\n\r\n    // Call transforms.\r\n    index = -1\r\n    while (++index < config.transforms.length) {\r\n      tree = config.transforms[index](tree) || tree\r\n    }\r\n\r\n    return tree\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Event>} events\r\n   * @param {number} start\r\n   * @param {number} length\r\n   * @returns {number}\r\n   */\r\n  function prepareList(events, start, length) {\r\n    let index = start - 1\r\n    let containerBalance = -1\r\n    let listSpread = false\r\n    /** @type {Token | undefined} */\r\n    let listItem\r\n    /** @type {number | undefined} */\r\n    let lineIndex\r\n    /** @type {number | undefined} */\r\n    let firstBlankLineIndex\r\n    /** @type {boolean | undefined} */\r\n    let atMarker\r\n\r\n    while (++index <= length) {\r\n      const event = events[index]\r\n\r\n      if (\r\n        event[1].type === types.listUnordered ||\r\n        event[1].type === types.listOrdered ||\r\n        event[1].type === types.blockQuote\r\n      ) {\r\n        if (event[0] === 'enter') {\r\n          containerBalance++\r\n        } else {\r\n          containerBalance--\r\n        }\r\n\r\n        atMarker = undefined\r\n      } else if (event[1].type === types.lineEndingBlank) {\r\n        if (event[0] === 'enter') {\r\n          if (\r\n            listItem &&\r\n            !atMarker &&\r\n            !containerBalance &&\r\n            !firstBlankLineIndex\r\n          ) {\r\n            firstBlankLineIndex = index\r\n          }\r\n\r\n          atMarker = undefined\r\n        }\r\n      } else if (\r\n        event[1].type === types.linePrefix ||\r\n        event[1].type === types.listItemValue ||\r\n        event[1].type === types.listItemMarker ||\r\n        event[1].type === types.listItemPrefix ||\r\n        event[1].type === types.listItemPrefixWhitespace\r\n      ) {\r\n        // Empty.\r\n      } else {\r\n        atMarker = undefined\r\n      }\r\n\r\n      if (\r\n        (!containerBalance &&\r\n          event[0] === 'enter' &&\r\n          event[1].type === types.listItemPrefix) ||\r\n        (containerBalance === -1 &&\r\n          event[0] === 'exit' &&\r\n          (event[1].type === types.listUnordered ||\r\n            event[1].type === types.listOrdered))\r\n      ) {\r\n        if (listItem) {\r\n          let tailIndex = index\r\n          lineIndex = undefined\r\n\r\n          while (tailIndex--) {\r\n            const tailEvent = events[tailIndex]\r\n\r\n            if (\r\n              tailEvent[1].type === types.lineEnding ||\r\n              tailEvent[1].type === types.lineEndingBlank\r\n            ) {\r\n              if (tailEvent[0] === 'exit') continue\r\n\r\n              if (lineIndex) {\r\n                events[lineIndex][1].type = types.lineEndingBlank\r\n                listSpread = true\r\n              }\r\n\r\n              tailEvent[1].type = types.lineEnding\r\n              lineIndex = tailIndex\r\n            } else if (\r\n              tailEvent[1].type === types.linePrefix ||\r\n              tailEvent[1].type === types.blockQuotePrefix ||\r\n              tailEvent[1].type === types.blockQuotePrefixWhitespace ||\r\n              tailEvent[1].type === types.blockQuoteMarker ||\r\n              tailEvent[1].type === types.listItemIndent\r\n            ) {\r\n              // Empty\r\n            } else {\r\n              break\r\n            }\r\n          }\r\n\r\n          if (\r\n            firstBlankLineIndex &&\r\n            (!lineIndex || firstBlankLineIndex < lineIndex)\r\n          ) {\r\n            listItem._spread = true\r\n          }\r\n\r\n          // Fix position.\r\n          listItem.end = Object.assign(\r\n            {},\r\n            lineIndex ? events[lineIndex][1].start : event[1].end\r\n          )\r\n\r\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\r\n          index++\r\n          length++\r\n        }\r\n\r\n        // Create a new list item.\r\n        if (event[1].type === types.listItemPrefix) {\r\n          listItem = {\r\n            type: 'listItem',\r\n            _spread: false,\r\n            start: Object.assign({}, event[1].start),\r\n            // @ts-expect-error: we’ll add `end` in a second.\r\n            end: undefined\r\n          }\r\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\r\n          events.splice(index, 0, ['enter', listItem, event[2]])\r\n          index++\r\n          length++\r\n          firstBlankLineIndex = undefined\r\n          atMarker = true\r\n        }\r\n      }\r\n    }\r\n\r\n    events[start][1]._spread = listSpread\r\n    return length\r\n  }\r\n\r\n  /**\r\n   * Set data.\r\n   *\r\n   * @template {keyof CompileData} Key\r\n   *   Field type.\r\n   * @param {Key} key\r\n   *   Key of field.\r\n   * @param {CompileData[Key]} [value]\r\n   *   New value.\r\n   * @returns {void}\r\n   *   Nothing.\r\n   */\r\n  function setData(key, value) {\r\n    data[key] = value\r\n  }\r\n\r\n  /**\r\n   * Get data.\r\n   *\r\n   * @template {keyof CompileData} Key\r\n   *   Field type.\r\n   * @param {Key} key\r\n   *   Key of field.\r\n   * @returns {CompileData[Key]}\r\n   *   Value.\r\n   */\r\n  function getData(key) {\r\n    return data[key]\r\n  }\r\n\r\n  /**\r\n   * Create an opener handle.\r\n   *\r\n   * @param {(token: Token) => Node} create\r\n   *   Create a node.\r\n   * @param {Handle} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function opener(create, and) {\r\n    return open\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {void}\r\n     */\r\n    function open(token) {\r\n      enter.call(this, create(token), token)\r\n      if (and) and.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @returns {void}\r\n   */\r\n  function buffer() {\r\n    this.stack.push({type: 'fragment', children: []})\r\n  }\r\n\r\n  /**\r\n   * @template {Node} Kind\r\n   *   Node type.\r\n   * @this {CompileContext}\r\n   *   Context.\r\n   * @param {Kind} node\r\n   *   Node to enter.\r\n   * @param {Token} token\r\n   *   Corresponding token.\r\n   * @param {OnEnterError | undefined} [errorHandler]\r\n   *   Handle the case where this token is open, but it is closed by something else.\r\n   * @returns {Kind}\r\n   *   The given node.\r\n   */\r\n  function enter(node, token, errorHandler) {\r\n    const parent = this.stack[this.stack.length - 1]\r\n    assert(parent, 'expected `parent`')\r\n    assert('children' in parent, 'expected `parent`')\r\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\r\n    parent.children.push(node)\r\n    this.stack.push(node)\r\n    this.tokenStack.push([token, errorHandler])\r\n    // @ts-expect-error: `end` will be patched later.\r\n    node.position = {start: point(token.start)}\r\n    return node\r\n  }\r\n\r\n  /**\r\n   * Create a closer handle.\r\n   *\r\n   * @param {Handle} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function closer(and) {\r\n    return close\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {void}\r\n     */\r\n    function close(token) {\r\n      if (and) and.call(this, token)\r\n      exit.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   *   Context.\r\n   * @param {Token} token\r\n   *   Corresponding token.\r\n   * @param {OnExitError | undefined} [onExitError]\r\n   *   Handle the case where another token is open.\r\n   * @returns {Node}\r\n   *   The closed node.\r\n   */\r\n  function exit(token, onExitError) {\r\n    const node = this.stack.pop()\r\n    assert(node, 'expected `node`')\r\n    const open = this.tokenStack.pop()\r\n\r\n    if (!open) {\r\n      throw new Error(\r\n        'Cannot close `' +\r\n          token.type +\r\n          '` (' +\r\n          stringifyPosition({start: token.start, end: token.end}) +\r\n          '): it’s not open'\r\n      )\r\n    } else if (open[0].type !== token.type) {\r\n      if (onExitError) {\r\n        onExitError.call(this, token, open[0])\r\n      } else {\r\n        const handler = open[1] || defaultOnError\r\n        handler.call(this, token, open[0])\r\n      }\r\n    }\r\n\r\n    assert(node.type !== 'fragment', 'unexpected fragment `exit`ed')\r\n    assert(node.position, 'expected `position` to be defined')\r\n    node.position.end = point(token.end)\r\n    return node\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @returns {string}\r\n   */\r\n  function resume() {\r\n    return toString(this.stack.pop())\r\n  }\r\n\r\n  //\r\n  // Handlers.\r\n  //\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistordered() {\r\n    setData('expectingFirstListItemValue', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistitemvalue(token) {\r\n    if (getData('expectingFirstListItemValue')) {\r\n      const ancestor = this.stack[this.stack.length - 2]\r\n      assert(ancestor, 'expected nodes on stack')\r\n      assert(ancestor.type === 'list', 'expected list on stack')\r\n      ancestor.start = Number.parseInt(\r\n        this.sliceSerialize(token),\r\n        constants.numericBaseDecimal\r\n      )\r\n      setData('expectingFirstListItemValue')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfenceinfo() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n    node.lang = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfencemeta() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n    node.meta = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfence() {\r\n    // Exit if this is the closing fence.\r\n    if (getData('flowCodeInside')) return\r\n    this.buffer()\r\n    setData('flowCodeInside', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefenced() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n\r\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\r\n    setData('flowCodeInside')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodeindented() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n\r\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitionlabelstring(token) {\r\n    const label = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'definition', 'expected definition on stack')\r\n\r\n    node.label = label\r\n    node.identifier = normalizeIdentifier(\r\n      this.sliceSerialize(token)\r\n    ).toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiontitlestring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'definition', 'expected definition on stack')\r\n\r\n    node.title = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiondestinationstring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'definition', 'expected definition on stack')\r\n\r\n    node.url = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitatxheadingsequence(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'heading', 'expected heading on stack')\r\n\r\n    if (!node.depth) {\r\n      const depth = this.sliceSerialize(token).length\r\n\r\n      assert(\r\n        depth === 1 ||\r\n          depth === 2 ||\r\n          depth === 3 ||\r\n          depth === 4 ||\r\n          depth === 5 ||\r\n          depth === 6,\r\n        'expected `depth` between `1` and `6`'\r\n      )\r\n\r\n      node.depth = depth\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadingtext() {\r\n    setData('setextHeadingSlurpLineEnding', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadinglinesequence(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'heading', 'expected heading on stack')\r\n\r\n    node.depth =\r\n      this.sliceSerialize(token).charCodeAt(0) === codes.equalsTo ? 1 : 2\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheading() {\r\n    setData('setextHeadingSlurpLineEnding')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterdata(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert('children' in node, 'expected parent on stack')\r\n\r\n    let tail = node.children[node.children.length - 1]\r\n\r\n    if (!tail || tail.type !== 'text') {\r\n      // Add a new text node.\r\n      tail = text()\r\n      // @ts-expect-error: we’ll add `end` later.\r\n      tail.position = {start: point(token.start)}\r\n      // @ts-expect-error: Assume `parent` accepts `text`.\r\n      node.children.push(tail)\r\n    }\r\n\r\n    this.stack.push(tail)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitdata(token) {\r\n    const tail = this.stack.pop()\r\n    assert(tail, 'expected a `node` to be on the stack')\r\n    assert('value' in tail, 'expected a `literal` to be on the stack')\r\n    assert(tail.position, 'expected `node` to have an open position')\r\n    tail.value += this.sliceSerialize(token)\r\n    tail.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlineending(token) {\r\n    const context = this.stack[this.stack.length - 1]\r\n    assert(context, 'expected `node`')\r\n\r\n    // If we’re at a hard break, include the line ending in there.\r\n    if (getData('atHardBreak')) {\r\n      assert('children' in context, 'expected `parent`')\r\n      const tail = context.children[context.children.length - 1]\r\n      assert(tail.position, 'expected tail to have a starting position')\r\n      tail.position.end = point(token.end)\r\n      setData('atHardBreak')\r\n      return\r\n    }\r\n\r\n    if (\r\n      !getData('setextHeadingSlurpLineEnding') &&\r\n      config.canContainEols.includes(context.type)\r\n    ) {\r\n      onenterdata.call(this, token)\r\n      onexitdata.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithardbreak() {\r\n    setData('atHardBreak', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmlflow() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'html', 'expected html on stack')\r\n\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmltext() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'html', 'expected html on stack')\r\n\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcodetext() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'inlineCode', 'expected inline code on stack')\r\n\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlink() {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'link', 'expected link on stack')\r\n\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n\r\n    // To do: clean.\r\n    if (getData('inReference')) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = getData('referenceType') || 'shortcut'\r\n\r\n      node.type += 'Reference'\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType\r\n      // @ts-expect-error: mutate.\r\n      delete node.url\r\n      delete node.title\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier\r\n      // @ts-expect-error: mutate.\r\n      delete node.label\r\n    }\r\n\r\n    setData('referenceType')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitimage() {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'image', 'expected image on stack')\r\n\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n\r\n    // To do: clean.\r\n    if (getData('inReference')) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = getData('referenceType') || 'shortcut'\r\n\r\n      node.type += 'Reference'\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType\r\n      // @ts-expect-error: mutate.\r\n      delete node.url\r\n      delete node.title\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier\r\n      // @ts-expect-error: mutate.\r\n      delete node.label\r\n    }\r\n\r\n    setData('referenceType')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabeltext(token) {\r\n    const string = this.sliceSerialize(token)\r\n    const ancestor = this.stack[this.stack.length - 2]\r\n    assert(ancestor, 'expected ancestor on stack')\r\n    assert(\r\n      ancestor.type === 'image' || ancestor.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    ancestor.label = decodeString(string)\r\n    // @ts-expect-error: same as above.\r\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabel() {\r\n    const fragment = this.stack[this.stack.length - 1]\r\n    assert(fragment, 'expected node on stack')\r\n    assert(fragment.type === 'fragment', 'expected fragment on stack')\r\n    const value = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n\r\n    // Assume a reference.\r\n    setData('inReference', true)\r\n\r\n    if (node.type === 'link') {\r\n      /** @type {Array<StaticPhrasingContent>} */\r\n      // @ts-expect-error: Assume static phrasing content.\r\n      const children = fragment.children\r\n\r\n      node.children = children\r\n    } else {\r\n      node.alt = value\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcedestinationstring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n    node.url = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcetitlestring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n    node.title = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresource() {\r\n    setData('inReference')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterreference() {\r\n    setData('referenceType', 'collapsed')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitreferencestring(token) {\r\n    const label = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image reference or link reference on stack'\r\n    )\r\n\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    node.label = label\r\n    // @ts-expect-error: same as above.\r\n    node.identifier = normalizeIdentifier(\r\n      this.sliceSerialize(token)\r\n    ).toLowerCase()\r\n    setData('referenceType', 'full')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcharacterreferencemarker(token) {\r\n    assert(\r\n      token.type === 'characterReferenceMarkerNumeric' ||\r\n        token.type === 'characterReferenceMarkerHexadecimal'\r\n    )\r\n    setData('characterReferenceType', token.type)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcharacterreferencevalue(token) {\r\n    const data = this.sliceSerialize(token)\r\n    const type = getData('characterReferenceType')\r\n    /** @type {string} */\r\n    let value\r\n\r\n    if (type) {\r\n      value = decodeNumericCharacterReference(\r\n        data,\r\n        type === types.characterReferenceMarkerNumeric\r\n          ? constants.numericBaseDecimal\r\n          : constants.numericBaseHexadecimal\r\n      )\r\n      setData('characterReferenceType')\r\n    } else {\r\n      const result = decodeNamedCharacterReference(data)\r\n      assert(result !== false, 'expected reference to decode')\r\n      value = result\r\n    }\r\n\r\n    const tail = this.stack.pop()\r\n    assert(tail, 'expected `node`')\r\n    assert(tail.position, 'expected `node.position`')\r\n    assert('value' in tail, 'expected `node.value`')\r\n    tail.value += value\r\n    tail.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkprotocol(token) {\r\n    onexitdata.call(this, token)\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'link', 'expected link on stack')\r\n\r\n    node.url = this.sliceSerialize(token)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkemail(token) {\r\n    onexitdata.call(this, token)\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'link', 'expected link on stack')\r\n\r\n    node.url = 'mailto:' + this.sliceSerialize(token)\r\n  }\r\n\r\n  //\r\n  // Creaters.\r\n  //\r\n\r\n  /** @returns {Blockquote} */\r\n  function blockQuote() {\r\n    return {type: 'blockquote', children: []}\r\n  }\r\n\r\n  /** @returns {Code} */\r\n  function codeFlow() {\r\n    return {type: 'code', lang: null, meta: null, value: ''}\r\n  }\r\n\r\n  /** @returns {InlineCode} */\r\n  function codeText() {\r\n    return {type: 'inlineCode', value: ''}\r\n  }\r\n\r\n  /** @returns {Definition} */\r\n  function definition() {\r\n    return {\r\n      type: 'definition',\r\n      identifier: '',\r\n      label: null,\r\n      title: null,\r\n      url: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {Emphasis} */\r\n  function emphasis() {\r\n    return {type: 'emphasis', children: []}\r\n  }\r\n\r\n  /** @returns {Heading} */\r\n  function heading() {\r\n    // @ts-expect-error `depth` will be set later.\r\n    return {type: 'heading', depth: undefined, children: []}\r\n  }\r\n\r\n  /** @returns {Break} */\r\n  function hardBreak() {\r\n    return {type: 'break'}\r\n  }\r\n\r\n  /** @returns {HTML} */\r\n  function html() {\r\n    return {type: 'html', value: ''}\r\n  }\r\n\r\n  /** @returns {Image} */\r\n  function image() {\r\n    return {type: 'image', title: null, url: '', alt: null}\r\n  }\r\n\r\n  /** @returns {Link} */\r\n  function link() {\r\n    return {type: 'link', title: null, url: '', children: []}\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {List}\r\n   */\r\n  function list(token) {\r\n    return {\r\n      type: 'list',\r\n      ordered: token.type === 'listOrdered',\r\n      start: null,\r\n      spread: token._spread,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {ListItem}\r\n   */\r\n  function listItem(token) {\r\n    return {\r\n      type: 'listItem',\r\n      spread: token._spread,\r\n      checked: null,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Paragraph} */\r\n  function paragraph() {\r\n    return {type: 'paragraph', children: []}\r\n  }\r\n\r\n  /** @returns {Strong} */\r\n  function strong() {\r\n    return {type: 'strong', children: []}\r\n  }\r\n\r\n  /** @returns {Text} */\r\n  function text() {\r\n    return {type: 'text', value: ''}\r\n  }\r\n\r\n  /** @returns {ThematicBreak} */\r\n  function thematicBreak() {\r\n    return {type: 'thematicBreak'}\r\n  }\r\n}\r\n\r\n/**\r\n * Copy a point-like value.\r\n *\r\n * @param {Point} d\r\n *   Point-like value.\r\n * @returns {Point}\r\n *   unist point.\r\n */\r\nfunction point(d) {\r\n  return {line: d.line, column: d.column, offset: d.offset}\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Array<Extension | Array<Extension>>} extensions\r\n * @returns {void}\r\n */\r\nfunction configure(combined, extensions) {\r\n  let index = -1\r\n\r\n  while (++index < extensions.length) {\r\n    const value = extensions[index]\r\n\r\n    if (Array.isArray(value)) {\r\n      configure(combined, value)\r\n    } else {\r\n      extension(combined, value)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Extension} extension\r\n * @returns {void}\r\n */\r\nfunction extension(combined, extension) {\r\n  /** @type {keyof Extension} */\r\n  let key\r\n\r\n  for (key in extension) {\r\n    if (own.call(extension, key)) {\r\n      if (key === 'canContainEols') {\r\n        const right = extension[key]\r\n        if (right) {\r\n          combined[key].push(...right)\r\n        }\r\n      } else if (key === 'transforms') {\r\n        const right = extension[key]\r\n        if (right) {\r\n          combined[key].push(...right)\r\n        }\r\n      } else if (key === 'enter' || key === 'exit') {\r\n        const right = extension[key]\r\n        if (right) {\r\n          Object.assign(combined[key], right)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @type {OnEnterError} */\r\nfunction defaultOnError(left, right) {\r\n  if (left) {\r\n    throw new Error(\r\n      'Cannot close `' +\r\n        left.type +\r\n        '` (' +\r\n        stringifyPosition({start: left.start, end: left.end}) +\r\n        '): a different token (`' +\r\n        right.type +\r\n        '`, ' +\r\n        stringifyPosition({start: right.start, end: right.end}) +\r\n        ') is open'\r\n    )\r\n  } else {\r\n    throw new Error(\r\n      'Cannot close document, a token (`' +\r\n        right.type +\r\n        '`, ' +\r\n        stringifyPosition({start: right.start, end: right.end}) +\r\n        ') is still open'\r\n    )\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-from-markdown').Options} Options\r\n */\r\n\r\nimport {fromMarkdown} from 'mdast-util-from-markdown'\r\n\r\n/**\r\n * @this {import('unified').Processor}\r\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\r\n */\r\nexport default function remarkParse(options) {\r\n  /** @type {import('unified').ParserFunction<Root>} */\r\n  const parser = (doc) => {\r\n    // Assume options.\r\n    const settings = /** @type {Options} */ (this.data('settings'))\r\n\r\n    return fromMarkdown(\r\n      doc,\r\n      Object.assign({}, settings, options, {\r\n        // Note: these options are not in the readme.\r\n        // The goal is for them to be set by plugins on `data` instead of being\r\n        // passed by users.\r\n        extensions: this.data('micromarkExtensions') || [],\r\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\r\n      })\r\n    )\r\n  }\r\n\r\n  Object.assign(this, {Parser: parser})\r\n}\r\n"],
  "mappings": "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",
  "names": ["parse", "createDebug", "disable", "debug", "search", "content", "document", "point", "ok", "text", "list", "createDebug", "point", "list", "ok", "from", "document", "flow", "string", "text", "document", "flow", "string", "text", "content", "document", "blockQuote", "codeText", "definition", "list", "thematicBreak", "listItem", "data", "text", "string", "extension"]
}
