{
  "version": 3,
  "sources": ["../../micromark-util-chunked/dev/index.js", "../../micromark-util-combine-extensions/index.js", "../../dequal/dist/index.mjs", "../../kleur/index.mjs", "../../diff/lib/index.mjs", "../../uvu/diff/index.mjs", "../../uvu/assert/index.mjs", "../../micromark-util-classify-character/dev/index.js", "../../micromark-util-resolve-all/index.js", "../../micromark-util-symbol/types.js", "../../micromark-factory-space/dev/index.js", "../../micromark-core-commonmark/dev/lib/blank-line.js", "../../micromark-util-normalize-identifier/dev/index.js", "../../micromark-core-commonmark/dev/lib/attention.js", "../../micromark-core-commonmark/dev/lib/autolink.js", "../../micromark-core-commonmark/dev/lib/block-quote.js", "../../micromark-core-commonmark/dev/lib/character-escape.js", "../../micromark-core-commonmark/dev/lib/character-reference.js", "../../micromark-core-commonmark/dev/lib/code-fenced.js", "../../micromark-core-commonmark/dev/lib/code-indented.js", "../../micromark-core-commonmark/dev/lib/code-text.js", "../../micromark-util-subtokenize/dev/index.js", "../../micromark-core-commonmark/dev/lib/content.js", "../../micromark-factory-destination/dev/index.js", "../../micromark-factory-label/dev/index.js", "../../micromark-factory-title/dev/index.js", "../../micromark-factory-whitespace/dev/index.js", "../../micromark-core-commonmark/dev/lib/definition.js", "../../micromark-core-commonmark/dev/lib/hard-break-escape.js", "../../micromark-core-commonmark/dev/lib/heading-atx.js", "../../micromark-util-html-tag-name/index.js", "../../micromark-core-commonmark/dev/lib/html-flow.js", "../../micromark-core-commonmark/dev/lib/html-text.js", "../../micromark-core-commonmark/dev/lib/label-end.js", "../../micromark-core-commonmark/dev/lib/label-start-image.js", "../../micromark-core-commonmark/dev/lib/label-start-link.js", "../../micromark-core-commonmark/dev/lib/line-ending.js", "../../micromark-core-commonmark/dev/lib/thematic-break.js", "../../micromark-core-commonmark/dev/lib/list.js", "../../micromark-core-commonmark/dev/lib/setext-underline.js"],
  "sourcesContent": ["import {constants} from 'micromark-util-symbol/constants.js'\r\n\r\n/**\r\n * Like `Array#splice`, but smarter for giant arrays.\r\n *\r\n * `Array#splice` takes all items to be inserted as individual argument which\r\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\r\n *\r\n * Otherwise, this does not return the removed items, and takes `items` as an\r\n * array instead of rest parameters.\r\n *\r\n * @template {unknown} T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to operate on.\r\n * @param {number} start\r\n *   Index to remove/insert at (can be negative).\r\n * @param {number} remove\r\n *   Number of items to remove.\r\n * @param {Array<T>} items\r\n *   Items to inject into `list`.\r\n * @returns {void}\r\n *   Nothing.\r\n */\r\nexport function splice(list, start, remove, items) {\r\n  const end = list.length\r\n  let chunkStart = 0\r\n  /** @type {Array<unknown>} */\r\n  let parameters\r\n\r\n  // Make start between zero and `end` (included).\r\n  if (start < 0) {\r\n    start = -start > end ? 0 : end + start\r\n  } else {\r\n    start = start > end ? end : start\r\n  }\r\n\r\n  remove = remove > 0 ? remove : 0\r\n\r\n  // No need to chunk the items if there’s only a couple (10k) items.\r\n  if (items.length < constants.v8MaxSafeChunkSize) {\r\n    parameters = Array.from(items)\r\n    parameters.unshift(start, remove)\r\n    // @ts-expect-error Hush, it’s fine.\r\n    list.splice(...parameters)\r\n  } else {\r\n    // Delete `remove` items starting from `start`\r\n    if (remove) list.splice(start, remove)\r\n\r\n    // Insert the items in chunks to not cause stack overflows.\r\n    while (chunkStart < items.length) {\r\n      parameters = items.slice(\r\n        chunkStart,\r\n        chunkStart + constants.v8MaxSafeChunkSize\r\n      )\r\n      parameters.unshift(start, 0)\r\n      // @ts-expect-error Hush, it’s fine.\r\n      list.splice(...parameters)\r\n\r\n      chunkStart += constants.v8MaxSafeChunkSize\r\n      start += constants.v8MaxSafeChunkSize\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Append `items` (an array) at the end of `list` (another array).\r\n * When `list` was empty, returns `items` instead.\r\n *\r\n * This prevents a potentially expensive operation when `list` is empty,\r\n * and adds items in batches to prevent V8 from hanging.\r\n *\r\n * @template {unknown} T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to operate on.\r\n * @param {Array<T>} items\r\n *   Items to add to `list`.\r\n * @returns {Array<T>}\r\n *   Either `list` or `items`.\r\n */\r\nexport function push(list, items) {\r\n  if (list.length > 0) {\r\n    splice(list, list.length, 0, items)\r\n    return list\r\n  }\r\n\r\n  return items\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').Handles} Handles\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\r\n */\r\n\r\nimport {splice} from 'micromark-util-chunked'\r\n\r\nconst hasOwnProperty = {}.hasOwnProperty\r\n\r\n/**\r\n * Combine multiple syntax extensions into one.\r\n *\r\n * @param {Array<Extension>} extensions\r\n *   List of syntax extensions.\r\n * @returns {NormalizedExtension}\r\n *   A single combined extension.\r\n */\r\nexport function combineExtensions(extensions) {\r\n  /** @type {NormalizedExtension} */\r\n  const all = {}\r\n  let index = -1\r\n\r\n  while (++index < extensions.length) {\r\n    syntaxExtension(all, extensions[index])\r\n  }\r\n\r\n  return all\r\n}\r\n\r\n/**\r\n * Merge `extension` into `all`.\r\n *\r\n * @param {NormalizedExtension} all\r\n *   Extension to merge into.\r\n * @param {Extension} extension\r\n *   Extension to merge.\r\n * @returns {void}\r\n */\r\nfunction syntaxExtension(all, extension) {\r\n  /** @type {keyof Extension} */\r\n  let hook\r\n\r\n  for (hook in extension) {\r\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\r\n    /** @type {Record<string, unknown>} */\r\n    const left = maybe || (all[hook] = {})\r\n    /** @type {Record<string, unknown> | undefined} */\r\n    const right = extension[hook]\r\n    /** @type {string} */\r\n    let code\r\n\r\n    if (right) {\r\n      for (code in right) {\r\n        if (!hasOwnProperty.call(left, code)) left[code] = []\r\n        const value = right[code]\r\n        constructs(\r\n          // @ts-expect-error Looks like a list.\r\n          left[code],\r\n          Array.isArray(value) ? value : value ? [value] : []\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Merge `list` into `existing` (both lists of constructs).\r\n * Mutates `existing`.\r\n *\r\n * @param {Array<unknown>} existing\r\n * @param {Array<unknown>} list\r\n * @returns {void}\r\n */\r\nfunction constructs(existing, list) {\r\n  let index = -1\r\n  /** @type {Array<unknown>} */\r\n  const before = []\r\n\r\n  while (++index < list.length) {\r\n    // @ts-expect-error Looks like an object.\r\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\r\n  }\r\n\r\n  splice(existing, 0, 0, before)\r\n}\r\n\r\n/**\r\n * Combine multiple HTML extensions into one.\r\n *\r\n * @param {Array<HtmlExtension>} htmlExtensions\r\n *   List of HTML extensions.\r\n * @returns {HtmlExtension}\r\n *   A single combined HTML extension.\r\n */\r\nexport function combineHtmlExtensions(htmlExtensions) {\r\n  /** @type {HtmlExtension} */\r\n  const handlers = {}\r\n  let index = -1\r\n\r\n  while (++index < htmlExtensions.length) {\r\n    htmlExtension(handlers, htmlExtensions[index])\r\n  }\r\n\r\n  return handlers\r\n}\r\n\r\n/**\r\n * Merge `extension` into `all`.\r\n *\r\n * @param {HtmlExtension} all\r\n *   Extension to merge into.\r\n * @param {HtmlExtension} extension\r\n *   Extension to merge.\r\n * @returns {void}\r\n */\r\nfunction htmlExtension(all, extension) {\r\n  /** @type {keyof HtmlExtension} */\r\n  let hook\r\n\r\n  for (hook in extension) {\r\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\r\n    const left = maybe || (all[hook] = {})\r\n    const right = extension[hook]\r\n    /** @type {keyof Handles} */\r\n    let type\r\n\r\n    if (right) {\r\n      for (type in right) {\r\n        // @ts-expect-error assume document vs regular handler are managed correctly.\r\n        left[type] = right[type]\r\n      }\r\n    }\r\n  }\r\n}\r\n", "var has = Object.prototype.hasOwnProperty;\r\n\r\nfunction find(iter, tar, key) {\r\n\tfor (key of iter.keys()) {\r\n\t\tif (dequal(key, tar)) return key;\r\n\t}\r\n}\r\n\r\nexport function dequal(foo, bar) {\r\n\tvar ctor, len, tmp;\r\n\tif (foo === bar) return true;\r\n\r\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\r\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\r\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\r\n\r\n\t\tif (ctor === Array) {\r\n\t\t\tif ((len=foo.length) === bar.length) {\r\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\r\n\t\t\t}\r\n\t\t\treturn len === -1;\r\n\t\t}\r\n\r\n\t\tif (ctor === Set) {\r\n\t\t\tif (foo.size !== bar.size) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tfor (len of foo) {\r\n\t\t\t\ttmp = len;\r\n\t\t\t\tif (tmp && typeof tmp === 'object') {\r\n\t\t\t\t\ttmp = find(bar, tmp);\r\n\t\t\t\t\tif (!tmp) return false;\r\n\t\t\t\t}\r\n\t\t\t\tif (!bar.has(tmp)) return false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (ctor === Map) {\r\n\t\t\tif (foo.size !== bar.size) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tfor (len of foo) {\r\n\t\t\t\ttmp = len[0];\r\n\t\t\t\tif (tmp && typeof tmp === 'object') {\r\n\t\t\t\t\ttmp = find(bar, tmp);\r\n\t\t\t\t\tif (!tmp) return false;\r\n\t\t\t\t}\r\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (ctor === ArrayBuffer) {\r\n\t\t\tfoo = new Uint8Array(foo);\r\n\t\t\tbar = new Uint8Array(bar);\r\n\t\t} else if (ctor === DataView) {\r\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\r\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\r\n\t\t\t}\r\n\t\t\treturn len === -1;\r\n\t\t}\r\n\r\n\t\tif (ArrayBuffer.isView(foo)) {\r\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\r\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\r\n\t\t\t}\r\n\t\t\treturn len === -1;\r\n\t\t}\r\n\r\n\t\tif (!ctor || typeof foo === 'object') {\r\n\t\t\tlen = 0;\r\n\t\t\tfor (ctor in foo) {\r\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\r\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\r\n\t\t\t}\r\n\t\t\treturn Object.keys(bar).length === len;\r\n\t\t}\r\n\t}\r\n\r\n\treturn foo !== foo && bar !== bar;\r\n}\r\n", "'use strict';\r\n\r\nlet FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM, isTTY=true;\r\nif (typeof process !== 'undefined') {\r\n\t({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env || {});\r\n\tisTTY = process.stdout && process.stdout.isTTY;\r\n}\r\n\r\nconst $ = {\r\n\tenabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== 'dumb' && (\r\n\t\tFORCE_COLOR != null && FORCE_COLOR !== '0' || isTTY\r\n\t),\r\n\r\n\t// modifiers\r\n\treset: init(0, 0),\r\n\tbold: init(1, 22),\r\n\tdim: init(2, 22),\r\n\titalic: init(3, 23),\r\n\tunderline: init(4, 24),\r\n\tinverse: init(7, 27),\r\n\thidden: init(8, 28),\r\n\tstrikethrough: init(9, 29),\r\n\r\n\t// colors\r\n\tblack: init(30, 39),\r\n\tred: init(31, 39),\r\n\tgreen: init(32, 39),\r\n\tyellow: init(33, 39),\r\n\tblue: init(34, 39),\r\n\tmagenta: init(35, 39),\r\n\tcyan: init(36, 39),\r\n\twhite: init(37, 39),\r\n\tgray: init(90, 39),\r\n\tgrey: init(90, 39),\r\n\r\n\t// background colors\r\n\tbgBlack: init(40, 49),\r\n\tbgRed: init(41, 49),\r\n\tbgGreen: init(42, 49),\r\n\tbgYellow: init(43, 49),\r\n\tbgBlue: init(44, 49),\r\n\tbgMagenta: init(45, 49),\r\n\tbgCyan: init(46, 49),\r\n\tbgWhite: init(47, 49)\r\n};\r\n\r\nfunction run(arr, str) {\r\n\tlet i=0, tmp, beg='', end='';\r\n\tfor (; i < arr.length; i++) {\r\n\t\ttmp = arr[i];\r\n\t\tbeg += tmp.open;\r\n\t\tend += tmp.close;\r\n\t\tif (!!~str.indexOf(tmp.close)) {\r\n\t\t\tstr = str.replace(tmp.rgx, tmp.close + tmp.open);\r\n\t\t}\r\n\t}\r\n\treturn beg + str + end;\r\n}\r\n\r\nfunction chain(has, keys) {\r\n\tlet ctx = { has, keys };\r\n\r\n\tctx.reset = $.reset.bind(ctx);\r\n\tctx.bold = $.bold.bind(ctx);\r\n\tctx.dim = $.dim.bind(ctx);\r\n\tctx.italic = $.italic.bind(ctx);\r\n\tctx.underline = $.underline.bind(ctx);\r\n\tctx.inverse = $.inverse.bind(ctx);\r\n\tctx.hidden = $.hidden.bind(ctx);\r\n\tctx.strikethrough = $.strikethrough.bind(ctx);\r\n\r\n\tctx.black = $.black.bind(ctx);\r\n\tctx.red = $.red.bind(ctx);\r\n\tctx.green = $.green.bind(ctx);\r\n\tctx.yellow = $.yellow.bind(ctx);\r\n\tctx.blue = $.blue.bind(ctx);\r\n\tctx.magenta = $.magenta.bind(ctx);\r\n\tctx.cyan = $.cyan.bind(ctx);\r\n\tctx.white = $.white.bind(ctx);\r\n\tctx.gray = $.gray.bind(ctx);\r\n\tctx.grey = $.grey.bind(ctx);\r\n\r\n\tctx.bgBlack = $.bgBlack.bind(ctx);\r\n\tctx.bgRed = $.bgRed.bind(ctx);\r\n\tctx.bgGreen = $.bgGreen.bind(ctx);\r\n\tctx.bgYellow = $.bgYellow.bind(ctx);\r\n\tctx.bgBlue = $.bgBlue.bind(ctx);\r\n\tctx.bgMagenta = $.bgMagenta.bind(ctx);\r\n\tctx.bgCyan = $.bgCyan.bind(ctx);\r\n\tctx.bgWhite = $.bgWhite.bind(ctx);\r\n\r\n\treturn ctx;\r\n}\r\n\r\nfunction init(open, close) {\r\n\tlet blk = {\r\n\t\topen: `\\x1b[${open}m`,\r\n\t\tclose: `\\x1b[${close}m`,\r\n\t\trgx: new RegExp(`\\\\x1b\\\\[${close}m`, 'g')\r\n\t};\r\n\treturn function (txt) {\r\n\t\tif (this !== void 0 && this.has !== void 0) {\r\n\t\t\t!!~this.has.indexOf(open) || (this.has.push(open),this.keys.push(blk));\r\n\t\t\treturn txt === void 0 ? this : $.enabled ? run(this.keys, txt+'') : txt+'';\r\n\t\t}\r\n\t\treturn txt === void 0 ? chain([open], [blk]) : $.enabled ? run([blk], txt+'') : txt+'';\r\n\t};\r\n}\r\n\r\nexport default $;\r\n", "function Diff() {}\r\nDiff.prototype = {\r\n  diff: function diff(oldString, newString) {\r\n    var _options$timeout;\r\n\r\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n    var callback = options.callback;\r\n\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = {};\r\n    }\r\n\r\n    this.options = options;\r\n    var self = this;\r\n\r\n    function done(value) {\r\n      if (callback) {\r\n        setTimeout(function () {\r\n          callback(undefined, value);\r\n        }, 0);\r\n        return true;\r\n      } else {\r\n        return value;\r\n      }\r\n    } // Allow subclasses to massage the input prior to running\r\n\r\n\r\n    oldString = this.castInput(oldString);\r\n    newString = this.castInput(newString);\r\n    oldString = this.removeEmpty(this.tokenize(oldString));\r\n    newString = this.removeEmpty(this.tokenize(newString));\r\n    var newLen = newString.length,\r\n        oldLen = oldString.length;\r\n    var editLength = 1;\r\n    var maxEditLength = newLen + oldLen;\r\n\r\n    if (options.maxEditLength) {\r\n      maxEditLength = Math.min(maxEditLength, options.maxEditLength);\r\n    }\r\n\r\n    var maxExecutionTime = (_options$timeout = options.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : Infinity;\r\n    var abortAfterTimestamp = Date.now() + maxExecutionTime;\r\n    var bestPath = [{\r\n      oldPos: -1,\r\n      lastComponent: undefined\r\n    }]; // Seed editLength = 0, i.e. the content starts with the same values\r\n\r\n    var newPos = this.extractCommon(bestPath[0], newString, oldString, 0);\r\n\r\n    if (bestPath[0].oldPos + 1 >= oldLen && newPos + 1 >= newLen) {\r\n      // Identity per the equality and tokenizer\r\n      return done([{\r\n        value: this.join(newString),\r\n        count: newString.length\r\n      }]);\r\n    } // Once we hit the right edge of the edit graph on some diagonal k, we can\r\n    // definitely reach the end of the edit graph in no more than k edits, so\r\n    // there's no point in considering any moves to diagonal k+1 any more (from\r\n    // which we're guaranteed to need at least k+1 more edits).\r\n    // Similarly, once we've reached the bottom of the edit graph, there's no\r\n    // point considering moves to lower diagonals.\r\n    // We record this fact by setting minDiagonalToConsider and\r\n    // maxDiagonalToConsider to some finite value once we've hit the edge of\r\n    // the edit graph.\r\n    // This optimization is not faithful to the original algorithm presented in\r\n    // Myers's paper, which instead pointlessly extends D-paths off the end of\r\n    // the edit graph - see page 7 of Myers's paper which notes this point\r\n    // explicitly and illustrates it with a diagram. This has major performance\r\n    // implications for some common scenarios. For instance, to compute a diff\r\n    // where the new text simply appends d characters on the end of the\r\n    // original text of length n, the true Myers algorithm will take O(n+d^2)\r\n    // time while this optimization needs only O(n+d) time.\r\n\r\n\r\n    var minDiagonalToConsider = -Infinity,\r\n        maxDiagonalToConsider = Infinity; // Main worker method. checks all permutations of a given edit length for acceptance.\r\n\r\n    function execEditLength() {\r\n      for (var diagonalPath = Math.max(minDiagonalToConsider, -editLength); diagonalPath <= Math.min(maxDiagonalToConsider, editLength); diagonalPath += 2) {\r\n        var basePath = void 0;\r\n        var removePath = bestPath[diagonalPath - 1],\r\n            addPath = bestPath[diagonalPath + 1];\r\n\r\n        if (removePath) {\r\n          // No one else is going to attempt to use this value, clear it\r\n          bestPath[diagonalPath - 1] = undefined;\r\n        }\r\n\r\n        var canAdd = false;\r\n\r\n        if (addPath) {\r\n          // what newPos will be after we do an insertion:\r\n          var addPathNewPos = addPath.oldPos - diagonalPath;\r\n          canAdd = addPath && 0 <= addPathNewPos && addPathNewPos < newLen;\r\n        }\r\n\r\n        var canRemove = removePath && removePath.oldPos + 1 < oldLen;\r\n\r\n        if (!canAdd && !canRemove) {\r\n          // If this path is a terminal then prune\r\n          bestPath[diagonalPath] = undefined;\r\n          continue;\r\n        } // Select the diagonal that we want to branch from. We select the prior\r\n        // path whose position in the old string is the farthest from the origin\r\n        // and does not pass the bounds of the diff graph\r\n        // TODO: Remove the `+ 1` here to make behavior match Myers algorithm\r\n        //       and prefer to order removals before insertions.\r\n\r\n\r\n        if (!canRemove || canAdd && removePath.oldPos + 1 < addPath.oldPos) {\r\n          basePath = self.addToPath(addPath, true, undefined, 0);\r\n        } else {\r\n          basePath = self.addToPath(removePath, undefined, true, 1);\r\n        }\r\n\r\n        newPos = self.extractCommon(basePath, newString, oldString, diagonalPath);\r\n\r\n        if (basePath.oldPos + 1 >= oldLen && newPos + 1 >= newLen) {\r\n          // If we have hit the end of both strings, then we are done\r\n          return done(buildValues(self, basePath.lastComponent, newString, oldString, self.useLongestToken));\r\n        } else {\r\n          bestPath[diagonalPath] = basePath;\r\n\r\n          if (basePath.oldPos + 1 >= oldLen) {\r\n            maxDiagonalToConsider = Math.min(maxDiagonalToConsider, diagonalPath - 1);\r\n          }\r\n\r\n          if (newPos + 1 >= newLen) {\r\n            minDiagonalToConsider = Math.max(minDiagonalToConsider, diagonalPath + 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      editLength++;\r\n    } // Performs the length of edit iteration. Is a bit fugly as this has to support the\r\n    // sync and async mode which is never fun. Loops over execEditLength until a value\r\n    // is produced, or until the edit length exceeds options.maxEditLength (if given),\r\n    // in which case it will return undefined.\r\n\r\n\r\n    if (callback) {\r\n      (function exec() {\r\n        setTimeout(function () {\r\n          if (editLength > maxEditLength || Date.now() > abortAfterTimestamp) {\r\n            return callback();\r\n          }\r\n\r\n          if (!execEditLength()) {\r\n            exec();\r\n          }\r\n        }, 0);\r\n      })();\r\n    } else {\r\n      while (editLength <= maxEditLength && Date.now() <= abortAfterTimestamp) {\r\n        var ret = execEditLength();\r\n\r\n        if (ret) {\r\n          return ret;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  addToPath: function addToPath(path, added, removed, oldPosInc) {\r\n    var last = path.lastComponent;\r\n\r\n    if (last && last.added === added && last.removed === removed) {\r\n      return {\r\n        oldPos: path.oldPos + oldPosInc,\r\n        lastComponent: {\r\n          count: last.count + 1,\r\n          added: added,\r\n          removed: removed,\r\n          previousComponent: last.previousComponent\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        oldPos: path.oldPos + oldPosInc,\r\n        lastComponent: {\r\n          count: 1,\r\n          added: added,\r\n          removed: removed,\r\n          previousComponent: last\r\n        }\r\n      };\r\n    }\r\n  },\r\n  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\r\n    var newLen = newString.length,\r\n        oldLen = oldString.length,\r\n        oldPos = basePath.oldPos,\r\n        newPos = oldPos - diagonalPath,\r\n        commonCount = 0;\r\n\r\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\r\n      newPos++;\r\n      oldPos++;\r\n      commonCount++;\r\n    }\r\n\r\n    if (commonCount) {\r\n      basePath.lastComponent = {\r\n        count: commonCount,\r\n        previousComponent: basePath.lastComponent\r\n      };\r\n    }\r\n\r\n    basePath.oldPos = oldPos;\r\n    return newPos;\r\n  },\r\n  equals: function equals(left, right) {\r\n    if (this.options.comparator) {\r\n      return this.options.comparator(left, right);\r\n    } else {\r\n      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\r\n    }\r\n  },\r\n  removeEmpty: function removeEmpty(array) {\r\n    var ret = [];\r\n\r\n    for (var i = 0; i < array.length; i++) {\r\n      if (array[i]) {\r\n        ret.push(array[i]);\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  },\r\n  castInput: function castInput(value) {\r\n    return value;\r\n  },\r\n  tokenize: function tokenize(value) {\r\n    return value.split('');\r\n  },\r\n  join: function join(chars) {\r\n    return chars.join('');\r\n  }\r\n};\r\n\r\nfunction buildValues(diff, lastComponent, newString, oldString, useLongestToken) {\r\n  // First we convert our linked list of components in reverse order to an\r\n  // array in the right order:\r\n  var components = [];\r\n  var nextComponent;\r\n\r\n  while (lastComponent) {\r\n    components.push(lastComponent);\r\n    nextComponent = lastComponent.previousComponent;\r\n    delete lastComponent.previousComponent;\r\n    lastComponent = nextComponent;\r\n  }\r\n\r\n  components.reverse();\r\n  var componentPos = 0,\r\n      componentLen = components.length,\r\n      newPos = 0,\r\n      oldPos = 0;\r\n\r\n  for (; componentPos < componentLen; componentPos++) {\r\n    var component = components[componentPos];\r\n\r\n    if (!component.removed) {\r\n      if (!component.added && useLongestToken) {\r\n        var value = newString.slice(newPos, newPos + component.count);\r\n        value = value.map(function (value, i) {\r\n          var oldValue = oldString[oldPos + i];\r\n          return oldValue.length > value.length ? oldValue : value;\r\n        });\r\n        component.value = diff.join(value);\r\n      } else {\r\n        component.value = diff.join(newString.slice(newPos, newPos + component.count));\r\n      }\r\n\r\n      newPos += component.count; // Common case\r\n\r\n      if (!component.added) {\r\n        oldPos += component.count;\r\n      }\r\n    } else {\r\n      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\r\n      oldPos += component.count; // Reverse add and remove so removes are output first to match common convention\r\n      // The diffing algorithm is tied to add then remove output and this is the simplest\r\n      // route to get the desired output with minimal overhead.\r\n\r\n      if (componentPos && components[componentPos - 1].added) {\r\n        var tmp = components[componentPos - 1];\r\n        components[componentPos - 1] = components[componentPos];\r\n        components[componentPos] = tmp;\r\n      }\r\n    }\r\n  } // Special case handle for when one terminal is ignored (i.e. whitespace).\r\n  // For this case we merge the terminal into the prior string and drop the change.\r\n  // This is only available for string mode.\r\n\r\n\r\n  var finalComponent = components[componentLen - 1];\r\n\r\n  if (componentLen > 1 && typeof finalComponent.value === 'string' && (finalComponent.added || finalComponent.removed) && diff.equals('', finalComponent.value)) {\r\n    components[componentLen - 2].value += finalComponent.value;\r\n    components.pop();\r\n  }\r\n\r\n  return components;\r\n}\r\n\r\nvar characterDiff = new Diff();\r\nfunction diffChars(oldStr, newStr, options) {\r\n  return characterDiff.diff(oldStr, newStr, options);\r\n}\r\n\r\nfunction generateOptions(options, defaults) {\r\n  if (typeof options === 'function') {\r\n    defaults.callback = options;\r\n  } else if (options) {\r\n    for (var name in options) {\r\n      /* istanbul ignore else */\r\n      if (options.hasOwnProperty(name)) {\r\n        defaults[name] = options[name];\r\n      }\r\n    }\r\n  }\r\n\r\n  return defaults;\r\n}\r\n\r\n//\r\n// Ranges and exceptions:\r\n// Latin-1 Supplement, 0080–00FF\r\n//  - U+00D7  × Multiplication sign\r\n//  - U+00F7  ÷ Division sign\r\n// Latin Extended-A, 0100–017F\r\n// Latin Extended-B, 0180–024F\r\n// IPA Extensions, 0250–02AF\r\n// Spacing Modifier Letters, 02B0–02FF\r\n//  - U+02C7  ˇ &#711;  Caron\r\n//  - U+02D8  ˘ &#728;  Breve\r\n//  - U+02D9  ˙ &#729;  Dot Above\r\n//  - U+02DA  ˚ &#730;  Ring Above\r\n//  - U+02DB  ˛ &#731;  Ogonek\r\n//  - U+02DC  ˜ &#732;  Small Tilde\r\n//  - U+02DD  ˝ &#733;  Double Acute Accent\r\n// Latin Extended Additional, 1E00–1EFF\r\n\r\nvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\r\nvar reWhitespace = /\\S/;\r\nvar wordDiff = new Diff();\r\n\r\nwordDiff.equals = function (left, right) {\r\n  if (this.options.ignoreCase) {\r\n    left = left.toLowerCase();\r\n    right = right.toLowerCase();\r\n  }\r\n\r\n  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\r\n};\r\n\r\nwordDiff.tokenize = function (value) {\r\n  // All whitespace symbols except newline group into one token, each newline - in separate token\r\n  var tokens = value.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\r\n\r\n  for (var i = 0; i < tokens.length - 1; i++) {\r\n    // If we have an empty string in the next field and we have only word chars before and after, merge\r\n    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\r\n      tokens[i] += tokens[i + 2];\r\n      tokens.splice(i + 1, 2);\r\n      i--;\r\n    }\r\n  }\r\n\r\n  return tokens;\r\n};\r\n\r\nfunction diffWords(oldStr, newStr, options) {\r\n  options = generateOptions(options, {\r\n    ignoreWhitespace: true\r\n  });\r\n  return wordDiff.diff(oldStr, newStr, options);\r\n}\r\nfunction diffWordsWithSpace(oldStr, newStr, options) {\r\n  return wordDiff.diff(oldStr, newStr, options);\r\n}\r\n\r\nvar lineDiff = new Diff();\r\n\r\nlineDiff.tokenize = function (value) {\r\n  if (this.options.stripTrailingCr) {\r\n    // remove one \\r before \\n to match GNU diff's --strip-trailing-cr behavior\r\n    value = value.replace(/\\r\\n/g, '\\n');\r\n  }\r\n\r\n  var retLines = [],\r\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\r\n\r\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\r\n    linesAndNewlines.pop();\r\n  } // Merge the content and line separators into single tokens\r\n\r\n\r\n  for (var i = 0; i < linesAndNewlines.length; i++) {\r\n    var line = linesAndNewlines[i];\r\n\r\n    if (i % 2 && !this.options.newlineIsToken) {\r\n      retLines[retLines.length - 1] += line;\r\n    } else {\r\n      if (this.options.ignoreWhitespace) {\r\n        line = line.trim();\r\n      }\r\n\r\n      retLines.push(line);\r\n    }\r\n  }\r\n\r\n  return retLines;\r\n};\r\n\r\nfunction diffLines(oldStr, newStr, callback) {\r\n  return lineDiff.diff(oldStr, newStr, callback);\r\n}\r\nfunction diffTrimmedLines(oldStr, newStr, callback) {\r\n  var options = generateOptions(callback, {\r\n    ignoreWhitespace: true\r\n  });\r\n  return lineDiff.diff(oldStr, newStr, options);\r\n}\r\n\r\nvar sentenceDiff = new Diff();\r\n\r\nsentenceDiff.tokenize = function (value) {\r\n  return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\r\n};\r\n\r\nfunction diffSentences(oldStr, newStr, callback) {\r\n  return sentenceDiff.diff(oldStr, newStr, callback);\r\n}\r\n\r\nvar cssDiff = new Diff();\r\n\r\ncssDiff.tokenize = function (value) {\r\n  return value.split(/([{}:;,]|\\s+)/);\r\n};\r\n\r\nfunction diffCss(oldStr, newStr, callback) {\r\n  return cssDiff.diff(oldStr, newStr, callback);\r\n}\r\n\r\nfunction _typeof(obj) {\r\n  \"@babel/helpers - typeof\";\r\n\r\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\r\n    _typeof = function (obj) {\r\n      return typeof obj;\r\n    };\r\n  } else {\r\n    _typeof = function (obj) {\r\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n    };\r\n  }\r\n\r\n  return _typeof(obj);\r\n}\r\n\r\nfunction _defineProperty(obj, key, value) {\r\n  if (key in obj) {\r\n    Object.defineProperty(obj, key, {\r\n      value: value,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  } else {\r\n    obj[key] = value;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction ownKeys(object, enumerableOnly) {\r\n  var keys = Object.keys(object);\r\n\r\n  if (Object.getOwnPropertySymbols) {\r\n    var symbols = Object.getOwnPropertySymbols(object);\r\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\r\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\r\n    });\r\n    keys.push.apply(keys, symbols);\r\n  }\r\n\r\n  return keys;\r\n}\r\n\r\nfunction _objectSpread2(target) {\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    var source = arguments[i] != null ? arguments[i] : {};\r\n\r\n    if (i % 2) {\r\n      ownKeys(Object(source), true).forEach(function (key) {\r\n        _defineProperty(target, key, source[key]);\r\n      });\r\n    } else if (Object.getOwnPropertyDescriptors) {\r\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\r\n    } else {\r\n      ownKeys(Object(source)).forEach(function (key) {\r\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\r\n      });\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nfunction _toConsumableArray(arr) {\r\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\r\n}\r\n\r\nfunction _arrayWithoutHoles(arr) {\r\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\r\n}\r\n\r\nfunction _iterableToArray(iter) {\r\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\r\n}\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n  if (!o) return;\r\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n  var n = Object.prototype.toString.call(o).slice(8, -1);\r\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n}\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n  if (len == null || len > arr.length) len = arr.length;\r\n\r\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\r\n\r\n  return arr2;\r\n}\r\n\r\nfunction _nonIterableSpread() {\r\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n}\r\n\r\nvar objectPrototypeToString = Object.prototype.toString;\r\nvar jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\r\n// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\r\n\r\njsonDiff.useLongestToken = true;\r\njsonDiff.tokenize = lineDiff.tokenize;\r\n\r\njsonDiff.castInput = function (value) {\r\n  var _this$options = this.options,\r\n      undefinedReplacement = _this$options.undefinedReplacement,\r\n      _this$options$stringi = _this$options.stringifyReplacer,\r\n      stringifyReplacer = _this$options$stringi === void 0 ? function (k, v) {\r\n    return typeof v === 'undefined' ? undefinedReplacement : v;\r\n  } : _this$options$stringi;\r\n  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\r\n};\r\n\r\njsonDiff.equals = function (left, right) {\r\n  return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\r\n};\r\n\r\nfunction diffJson(oldObj, newObj, options) {\r\n  return jsonDiff.diff(oldObj, newObj, options);\r\n} // This function handles the presence of circular references by bailing out when encountering an\r\n// object that is already on the \"stack\" of items being processed. Accepts an optional replacer\r\n\r\nfunction canonicalize(obj, stack, replacementStack, replacer, key) {\r\n  stack = stack || [];\r\n  replacementStack = replacementStack || [];\r\n\r\n  if (replacer) {\r\n    obj = replacer(key, obj);\r\n  }\r\n\r\n  var i;\r\n\r\n  for (i = 0; i < stack.length; i += 1) {\r\n    if (stack[i] === obj) {\r\n      return replacementStack[i];\r\n    }\r\n  }\r\n\r\n  var canonicalizedObj;\r\n\r\n  if ('[object Array]' === objectPrototypeToString.call(obj)) {\r\n    stack.push(obj);\r\n    canonicalizedObj = new Array(obj.length);\r\n    replacementStack.push(canonicalizedObj);\r\n\r\n    for (i = 0; i < obj.length; i += 1) {\r\n      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\r\n    }\r\n\r\n    stack.pop();\r\n    replacementStack.pop();\r\n    return canonicalizedObj;\r\n  }\r\n\r\n  if (obj && obj.toJSON) {\r\n    obj = obj.toJSON();\r\n  }\r\n\r\n  if (_typeof(obj) === 'object' && obj !== null) {\r\n    stack.push(obj);\r\n    canonicalizedObj = {};\r\n    replacementStack.push(canonicalizedObj);\r\n\r\n    var sortedKeys = [],\r\n        _key;\r\n\r\n    for (_key in obj) {\r\n      /* istanbul ignore else */\r\n      if (obj.hasOwnProperty(_key)) {\r\n        sortedKeys.push(_key);\r\n      }\r\n    }\r\n\r\n    sortedKeys.sort();\r\n\r\n    for (i = 0; i < sortedKeys.length; i += 1) {\r\n      _key = sortedKeys[i];\r\n      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\r\n    }\r\n\r\n    stack.pop();\r\n    replacementStack.pop();\r\n  } else {\r\n    canonicalizedObj = obj;\r\n  }\r\n\r\n  return canonicalizedObj;\r\n}\r\n\r\nvar arrayDiff = new Diff();\r\n\r\narrayDiff.tokenize = function (value) {\r\n  return value.slice();\r\n};\r\n\r\narrayDiff.join = arrayDiff.removeEmpty = function (value) {\r\n  return value;\r\n};\r\n\r\nfunction diffArrays(oldArr, newArr, callback) {\r\n  return arrayDiff.diff(oldArr, newArr, callback);\r\n}\r\n\r\nfunction parsePatch(uniDiff) {\r\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\r\n      delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\r\n      list = [],\r\n      i = 0;\r\n\r\n  function parseIndex() {\r\n    var index = {};\r\n    list.push(index); // Parse diff metadata\r\n\r\n    while (i < diffstr.length) {\r\n      var line = diffstr[i]; // File header found, end parsing diff metadata\r\n\r\n      if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\r\n        break;\r\n      } // Diff index\r\n\r\n\r\n      var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\r\n\r\n      if (header) {\r\n        index.index = header[1];\r\n      }\r\n\r\n      i++;\r\n    } // Parse file headers if they are defined. Unified diff requires them, but\r\n    // there's no technical issues to have an isolated hunk without file header\r\n\r\n\r\n    parseFileHeader(index);\r\n    parseFileHeader(index); // Parse hunks\r\n\r\n    index.hunks = [];\r\n\r\n    while (i < diffstr.length) {\r\n      var _line = diffstr[i];\r\n\r\n      if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\r\n        break;\r\n      } else if (/^@@/.test(_line)) {\r\n        index.hunks.push(parseHunk());\r\n      } else if (_line && options.strict) {\r\n        // Ignore unexpected content unless in strict mode\r\n        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n  } // Parses the --- and +++ headers, if none are found, no lines\r\n  // are consumed.\r\n\r\n\r\n  function parseFileHeader(index) {\r\n    var fileHeader = /^(---|\\+\\+\\+)\\s+(.*)$/.exec(diffstr[i]);\r\n\r\n    if (fileHeader) {\r\n      var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\r\n      var data = fileHeader[2].split('\\t', 2);\r\n      var fileName = data[0].replace(/\\\\\\\\/g, '\\\\');\r\n\r\n      if (/^\".*\"$/.test(fileName)) {\r\n        fileName = fileName.substr(1, fileName.length - 2);\r\n      }\r\n\r\n      index[keyPrefix + 'FileName'] = fileName;\r\n      index[keyPrefix + 'Header'] = (data[1] || '').trim();\r\n      i++;\r\n    }\r\n  } // Parses a hunk\r\n  // This assumes that we are at the start of a hunk.\r\n\r\n\r\n  function parseHunk() {\r\n    var chunkHeaderIndex = i,\r\n        chunkHeaderLine = diffstr[i++],\r\n        chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\r\n    var hunk = {\r\n      oldStart: +chunkHeader[1],\r\n      oldLines: typeof chunkHeader[2] === 'undefined' ? 1 : +chunkHeader[2],\r\n      newStart: +chunkHeader[3],\r\n      newLines: typeof chunkHeader[4] === 'undefined' ? 1 : +chunkHeader[4],\r\n      lines: [],\r\n      linedelimiters: []\r\n    }; // Unified Diff Format quirk: If the chunk size is 0,\r\n    // the first number is one lower than one would expect.\r\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\r\n\r\n    if (hunk.oldLines === 0) {\r\n      hunk.oldStart += 1;\r\n    }\r\n\r\n    if (hunk.newLines === 0) {\r\n      hunk.newStart += 1;\r\n    }\r\n\r\n    var addCount = 0,\r\n        removeCount = 0;\r\n\r\n    for (; i < diffstr.length; i++) {\r\n      // Lines starting with '---' could be mistaken for the \"remove line\" operation\r\n      // But they could be the header for the next file. Therefore prune such cases out.\r\n      if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {\r\n        break;\r\n      }\r\n\r\n      var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];\r\n\r\n      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\r\n        hunk.lines.push(diffstr[i]);\r\n        hunk.linedelimiters.push(delimiters[i] || '\\n');\r\n\r\n        if (operation === '+') {\r\n          addCount++;\r\n        } else if (operation === '-') {\r\n          removeCount++;\r\n        } else if (operation === ' ') {\r\n          addCount++;\r\n          removeCount++;\r\n        }\r\n      } else {\r\n        break;\r\n      }\r\n    } // Handle the empty block count case\r\n\r\n\r\n    if (!addCount && hunk.newLines === 1) {\r\n      hunk.newLines = 0;\r\n    }\r\n\r\n    if (!removeCount && hunk.oldLines === 1) {\r\n      hunk.oldLines = 0;\r\n    } // Perform optional sanity checking\r\n\r\n\r\n    if (options.strict) {\r\n      if (addCount !== hunk.newLines) {\r\n        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\r\n      }\r\n\r\n      if (removeCount !== hunk.oldLines) {\r\n        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\r\n      }\r\n    }\r\n\r\n    return hunk;\r\n  }\r\n\r\n  while (i < diffstr.length) {\r\n    parseIndex();\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\n// Iterator that traverses in the range of [min, max], stepping\r\n// by distance from a given start position. I.e. for [0, 4], with\r\n// start of 2, this will iterate 2, 3, 1, 4, 0.\r\nfunction distanceIterator (start, minLine, maxLine) {\r\n  var wantForward = true,\r\n      backwardExhausted = false,\r\n      forwardExhausted = false,\r\n      localOffset = 1;\r\n  return function iterator() {\r\n    if (wantForward && !forwardExhausted) {\r\n      if (backwardExhausted) {\r\n        localOffset++;\r\n      } else {\r\n        wantForward = false;\r\n      } // Check if trying to fit beyond text length, and if not, check it fits\r\n      // after offset location (or desired location on first iteration)\r\n\r\n\r\n      if (start + localOffset <= maxLine) {\r\n        return localOffset;\r\n      }\r\n\r\n      forwardExhausted = true;\r\n    }\r\n\r\n    if (!backwardExhausted) {\r\n      if (!forwardExhausted) {\r\n        wantForward = true;\r\n      } // Check if trying to fit before text beginning, and if not, check it fits\r\n      // before offset location\r\n\r\n\r\n      if (minLine <= start - localOffset) {\r\n        return -localOffset++;\r\n      }\r\n\r\n      backwardExhausted = true;\r\n      return iterator();\r\n    } // We tried to fit hunk before text beginning and beyond text length, then\r\n    // hunk can't fit on the text. Return undefined\r\n\r\n  };\r\n}\r\n\r\nfunction applyPatch(source, uniDiff) {\r\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n\r\n  if (typeof uniDiff === 'string') {\r\n    uniDiff = parsePatch(uniDiff);\r\n  }\r\n\r\n  if (Array.isArray(uniDiff)) {\r\n    if (uniDiff.length > 1) {\r\n      throw new Error('applyPatch only works with a single input.');\r\n    }\r\n\r\n    uniDiff = uniDiff[0];\r\n  } // Apply the diff to the input\r\n\r\n\r\n  var lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\r\n      delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\r\n      hunks = uniDiff.hunks,\r\n      compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) {\r\n    return line === patchContent;\r\n  },\r\n      errorCount = 0,\r\n      fuzzFactor = options.fuzzFactor || 0,\r\n      minLine = 0,\r\n      offset = 0,\r\n      removeEOFNL,\r\n      addEOFNL;\r\n  /**\r\n   * Checks if the hunk exactly fits on the provided location\r\n   */\r\n\r\n\r\n  function hunkFits(hunk, toPos) {\r\n    for (var j = 0; j < hunk.lines.length; j++) {\r\n      var line = hunk.lines[j],\r\n          operation = line.length > 0 ? line[0] : ' ',\r\n          content = line.length > 0 ? line.substr(1) : line;\r\n\r\n      if (operation === ' ' || operation === '-') {\r\n        // Context sanity check\r\n        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\r\n          errorCount++;\r\n\r\n          if (errorCount > fuzzFactor) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        toPos++;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } // Search best fit offsets for each hunk based on the previous ones\r\n\r\n\r\n  for (var i = 0; i < hunks.length; i++) {\r\n    var hunk = hunks[i],\r\n        maxLine = lines.length - hunk.oldLines,\r\n        localOffset = 0,\r\n        toPos = offset + hunk.oldStart - 1;\r\n    var iterator = distanceIterator(toPos, minLine, maxLine);\r\n\r\n    for (; localOffset !== undefined; localOffset = iterator()) {\r\n      if (hunkFits(hunk, toPos + localOffset)) {\r\n        hunk.offset = offset += localOffset;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (localOffset === undefined) {\r\n      return false;\r\n    } // Set lower text limit to end of the current hunk, so next ones don't try\r\n    // to fit over already patched text\r\n\r\n\r\n    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\r\n  } // Apply patch hunks\r\n\r\n\r\n  var diffOffset = 0;\r\n\r\n  for (var _i = 0; _i < hunks.length; _i++) {\r\n    var _hunk = hunks[_i],\r\n        _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;\r\n\r\n    diffOffset += _hunk.newLines - _hunk.oldLines;\r\n\r\n    for (var j = 0; j < _hunk.lines.length; j++) {\r\n      var line = _hunk.lines[j],\r\n          operation = line.length > 0 ? line[0] : ' ',\r\n          content = line.length > 0 ? line.substr(1) : line,\r\n          delimiter = _hunk.linedelimiters && _hunk.linedelimiters[j] || '\\n';\r\n\r\n      if (operation === ' ') {\r\n        _toPos++;\r\n      } else if (operation === '-') {\r\n        lines.splice(_toPos, 1);\r\n        delimiters.splice(_toPos, 1);\r\n        /* istanbul ignore else */\r\n      } else if (operation === '+') {\r\n        lines.splice(_toPos, 0, content);\r\n        delimiters.splice(_toPos, 0, delimiter);\r\n        _toPos++;\r\n      } else if (operation === '\\\\') {\r\n        var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\r\n\r\n        if (previousOperation === '+') {\r\n          removeEOFNL = true;\r\n        } else if (previousOperation === '-') {\r\n          addEOFNL = true;\r\n        }\r\n      }\r\n    }\r\n  } // Handle EOFNL insertion/removal\r\n\r\n\r\n  if (removeEOFNL) {\r\n    while (!lines[lines.length - 1]) {\r\n      lines.pop();\r\n      delimiters.pop();\r\n    }\r\n  } else if (addEOFNL) {\r\n    lines.push('');\r\n    delimiters.push('\\n');\r\n  }\r\n\r\n  for (var _k = 0; _k < lines.length - 1; _k++) {\r\n    lines[_k] = lines[_k] + delimiters[_k];\r\n  }\r\n\r\n  return lines.join('');\r\n} // Wrapper that supports multiple file patches via callbacks.\r\n\r\nfunction applyPatches(uniDiff, options) {\r\n  if (typeof uniDiff === 'string') {\r\n    uniDiff = parsePatch(uniDiff);\r\n  }\r\n\r\n  var currentIndex = 0;\r\n\r\n  function processIndex() {\r\n    var index = uniDiff[currentIndex++];\r\n\r\n    if (!index) {\r\n      return options.complete();\r\n    }\r\n\r\n    options.loadFile(index, function (err, data) {\r\n      if (err) {\r\n        return options.complete(err);\r\n      }\r\n\r\n      var updatedContent = applyPatch(data, index, options);\r\n      options.patched(index, updatedContent, function (err) {\r\n        if (err) {\r\n          return options.complete(err);\r\n        }\r\n\r\n        processIndex();\r\n      });\r\n    });\r\n  }\r\n\r\n  processIndex();\r\n}\r\n\r\nfunction structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\r\n  if (!options) {\r\n    options = {};\r\n  }\r\n\r\n  if (typeof options.context === 'undefined') {\r\n    options.context = 4;\r\n  }\r\n\r\n  var diff = diffLines(oldStr, newStr, options);\r\n\r\n  if (!diff) {\r\n    return;\r\n  }\r\n\r\n  diff.push({\r\n    value: '',\r\n    lines: []\r\n  }); // Append an empty value to make cleanup easier\r\n\r\n  function contextLines(lines) {\r\n    return lines.map(function (entry) {\r\n      return ' ' + entry;\r\n    });\r\n  }\r\n\r\n  var hunks = [];\r\n  var oldRangeStart = 0,\r\n      newRangeStart = 0,\r\n      curRange = [],\r\n      oldLine = 1,\r\n      newLine = 1;\r\n\r\n  var _loop = function _loop(i) {\r\n    var current = diff[i],\r\n        lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\r\n    current.lines = lines;\r\n\r\n    if (current.added || current.removed) {\r\n      var _curRange;\r\n\r\n      // If we have previous context, start with that\r\n      if (!oldRangeStart) {\r\n        var prev = diff[i - 1];\r\n        oldRangeStart = oldLine;\r\n        newRangeStart = newLine;\r\n\r\n        if (prev) {\r\n          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\r\n          oldRangeStart -= curRange.length;\r\n          newRangeStart -= curRange.length;\r\n        }\r\n      } // Output our changes\r\n\r\n\r\n      (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function (entry) {\r\n        return (current.added ? '+' : '-') + entry;\r\n      }))); // Track the updated file position\r\n\r\n\r\n      if (current.added) {\r\n        newLine += lines.length;\r\n      } else {\r\n        oldLine += lines.length;\r\n      }\r\n    } else {\r\n      // Identical context lines. Track line changes\r\n      if (oldRangeStart) {\r\n        // Close out any changes that have been output (or join overlapping)\r\n        if (lines.length <= options.context * 2 && i < diff.length - 2) {\r\n          var _curRange2;\r\n\r\n          // Overlapping\r\n          (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));\r\n        } else {\r\n          var _curRange3;\r\n\r\n          // end the range and output\r\n          var contextSize = Math.min(lines.length, options.context);\r\n\r\n          (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));\r\n\r\n          var hunk = {\r\n            oldStart: oldRangeStart,\r\n            oldLines: oldLine - oldRangeStart + contextSize,\r\n            newStart: newRangeStart,\r\n            newLines: newLine - newRangeStart + contextSize,\r\n            lines: curRange\r\n          };\r\n\r\n          if (i >= diff.length - 2 && lines.length <= options.context) {\r\n            // EOF is inside this hunk\r\n            var oldEOFNewline = /\\n$/.test(oldStr);\r\n            var newEOFNewline = /\\n$/.test(newStr);\r\n            var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;\r\n\r\n            if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {\r\n              // special case: old has no eol and no trailing context; no-nl can end up before adds\r\n              // however, if the old file is empty, do not output the no-nl line\r\n              curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\r\n            }\r\n\r\n            if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {\r\n              curRange.push('\\\\ No newline at end of file');\r\n            }\r\n          }\r\n\r\n          hunks.push(hunk);\r\n          oldRangeStart = 0;\r\n          newRangeStart = 0;\r\n          curRange = [];\r\n        }\r\n      }\r\n\r\n      oldLine += lines.length;\r\n      newLine += lines.length;\r\n    }\r\n  };\r\n\r\n  for (var i = 0; i < diff.length; i++) {\r\n    _loop(i);\r\n  }\r\n\r\n  return {\r\n    oldFileName: oldFileName,\r\n    newFileName: newFileName,\r\n    oldHeader: oldHeader,\r\n    newHeader: newHeader,\r\n    hunks: hunks\r\n  };\r\n}\r\nfunction formatPatch(diff) {\r\n  if (Array.isArray(diff)) {\r\n    return diff.map(formatPatch).join('\\n');\r\n  }\r\n\r\n  var ret = [];\r\n\r\n  if (diff.oldFileName == diff.newFileName) {\r\n    ret.push('Index: ' + diff.oldFileName);\r\n  }\r\n\r\n  ret.push('===================================================================');\r\n  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\r\n  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\r\n\r\n  for (var i = 0; i < diff.hunks.length; i++) {\r\n    var hunk = diff.hunks[i]; // Unified Diff Format quirk: If the chunk size is 0,\r\n    // the first number is one lower than one would expect.\r\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\r\n\r\n    if (hunk.oldLines === 0) {\r\n      hunk.oldStart -= 1;\r\n    }\r\n\r\n    if (hunk.newLines === 0) {\r\n      hunk.newStart -= 1;\r\n    }\r\n\r\n    ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');\r\n    ret.push.apply(ret, hunk.lines);\r\n  }\r\n\r\n  return ret.join('\\n') + '\\n';\r\n}\r\nfunction createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\r\n  return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));\r\n}\r\nfunction createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\r\n  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\r\n}\r\n\r\nfunction arrayEqual(a, b) {\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  return arrayStartsWith(a, b);\r\n}\r\nfunction arrayStartsWith(array, start) {\r\n  if (start.length > array.length) {\r\n    return false;\r\n  }\r\n\r\n  for (var i = 0; i < start.length; i++) {\r\n    if (start[i] !== array[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction calcLineCount(hunk) {\r\n  var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines),\r\n      oldLines = _calcOldNewLineCount.oldLines,\r\n      newLines = _calcOldNewLineCount.newLines;\r\n\r\n  if (oldLines !== undefined) {\r\n    hunk.oldLines = oldLines;\r\n  } else {\r\n    delete hunk.oldLines;\r\n  }\r\n\r\n  if (newLines !== undefined) {\r\n    hunk.newLines = newLines;\r\n  } else {\r\n    delete hunk.newLines;\r\n  }\r\n}\r\nfunction merge(mine, theirs, base) {\r\n  mine = loadPatch(mine, base);\r\n  theirs = loadPatch(theirs, base);\r\n  var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.\r\n  // Leaving sanity checks on this to the API consumer that may know more about the\r\n  // meaning in their own context.\r\n\r\n  if (mine.index || theirs.index) {\r\n    ret.index = mine.index || theirs.index;\r\n  }\r\n\r\n  if (mine.newFileName || theirs.newFileName) {\r\n    if (!fileNameChanged(mine)) {\r\n      // No header or no change in ours, use theirs (and ours if theirs does not exist)\r\n      ret.oldFileName = theirs.oldFileName || mine.oldFileName;\r\n      ret.newFileName = theirs.newFileName || mine.newFileName;\r\n      ret.oldHeader = theirs.oldHeader || mine.oldHeader;\r\n      ret.newHeader = theirs.newHeader || mine.newHeader;\r\n    } else if (!fileNameChanged(theirs)) {\r\n      // No header or no change in theirs, use ours\r\n      ret.oldFileName = mine.oldFileName;\r\n      ret.newFileName = mine.newFileName;\r\n      ret.oldHeader = mine.oldHeader;\r\n      ret.newHeader = mine.newHeader;\r\n    } else {\r\n      // Both changed... figure it out\r\n      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\r\n      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\r\n      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\r\n      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\r\n    }\r\n  }\r\n\r\n  ret.hunks = [];\r\n  var mineIndex = 0,\r\n      theirsIndex = 0,\r\n      mineOffset = 0,\r\n      theirsOffset = 0;\r\n\r\n  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\r\n    var mineCurrent = mine.hunks[mineIndex] || {\r\n      oldStart: Infinity\r\n    },\r\n        theirsCurrent = theirs.hunks[theirsIndex] || {\r\n      oldStart: Infinity\r\n    };\r\n\r\n    if (hunkBefore(mineCurrent, theirsCurrent)) {\r\n      // This patch does not overlap with any of the others, yay.\r\n      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\r\n      mineIndex++;\r\n      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\r\n    } else if (hunkBefore(theirsCurrent, mineCurrent)) {\r\n      // This patch does not overlap with any of the others, yay.\r\n      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\r\n      theirsIndex++;\r\n      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\r\n    } else {\r\n      // Overlap, merge as best we can\r\n      var mergedHunk = {\r\n        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\r\n        oldLines: 0,\r\n        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\r\n        newLines: 0,\r\n        lines: []\r\n      };\r\n      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\r\n      theirsIndex++;\r\n      mineIndex++;\r\n      ret.hunks.push(mergedHunk);\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction loadPatch(param, base) {\r\n  if (typeof param === 'string') {\r\n    if (/^@@/m.test(param) || /^Index:/m.test(param)) {\r\n      return parsePatch(param)[0];\r\n    }\r\n\r\n    if (!base) {\r\n      throw new Error('Must provide a base reference or pass in a patch');\r\n    }\r\n\r\n    return structuredPatch(undefined, undefined, base, param);\r\n  }\r\n\r\n  return param;\r\n}\r\n\r\nfunction fileNameChanged(patch) {\r\n  return patch.newFileName && patch.newFileName !== patch.oldFileName;\r\n}\r\n\r\nfunction selectField(index, mine, theirs) {\r\n  if (mine === theirs) {\r\n    return mine;\r\n  } else {\r\n    index.conflict = true;\r\n    return {\r\n      mine: mine,\r\n      theirs: theirs\r\n    };\r\n  }\r\n}\r\n\r\nfunction hunkBefore(test, check) {\r\n  return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\r\n}\r\n\r\nfunction cloneHunk(hunk, offset) {\r\n  return {\r\n    oldStart: hunk.oldStart,\r\n    oldLines: hunk.oldLines,\r\n    newStart: hunk.newStart + offset,\r\n    newLines: hunk.newLines,\r\n    lines: hunk.lines\r\n  };\r\n}\r\n\r\nfunction mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\r\n  // This will generally result in a conflicted hunk, but there are cases where the context\r\n  // is the only overlap where we can successfully merge the content here.\r\n  var mine = {\r\n    offset: mineOffset,\r\n    lines: mineLines,\r\n    index: 0\r\n  },\r\n      their = {\r\n    offset: theirOffset,\r\n    lines: theirLines,\r\n    index: 0\r\n  }; // Handle any leading content\r\n\r\n  insertLeading(hunk, mine, their);\r\n  insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.\r\n\r\n  while (mine.index < mine.lines.length && their.index < their.lines.length) {\r\n    var mineCurrent = mine.lines[mine.index],\r\n        theirCurrent = their.lines[their.index];\r\n\r\n    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\r\n      // Both modified ...\r\n      mutualChange(hunk, mine, their);\r\n    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\r\n      var _hunk$lines;\r\n\r\n      // Mine inserted\r\n      (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));\r\n    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\r\n      var _hunk$lines2;\r\n\r\n      // Theirs inserted\r\n      (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));\r\n    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\r\n      // Mine removed or edited\r\n      removal(hunk, mine, their);\r\n    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\r\n      // Their removed or edited\r\n      removal(hunk, their, mine, true);\r\n    } else if (mineCurrent === theirCurrent) {\r\n      // Context identity\r\n      hunk.lines.push(mineCurrent);\r\n      mine.index++;\r\n      their.index++;\r\n    } else {\r\n      // Context mismatch\r\n      conflict(hunk, collectChange(mine), collectChange(their));\r\n    }\r\n  } // Now push anything that may be remaining\r\n\r\n\r\n  insertTrailing(hunk, mine);\r\n  insertTrailing(hunk, their);\r\n  calcLineCount(hunk);\r\n}\r\n\r\nfunction mutualChange(hunk, mine, their) {\r\n  var myChanges = collectChange(mine),\r\n      theirChanges = collectChange(their);\r\n\r\n  if (allRemoves(myChanges) && allRemoves(theirChanges)) {\r\n    // Special case for remove changes that are supersets of one another\r\n    if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\r\n      var _hunk$lines3;\r\n\r\n      (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));\r\n\r\n      return;\r\n    } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\r\n      var _hunk$lines4;\r\n\r\n      (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));\r\n\r\n      return;\r\n    }\r\n  } else if (arrayEqual(myChanges, theirChanges)) {\r\n    var _hunk$lines5;\r\n\r\n    (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));\r\n\r\n    return;\r\n  }\r\n\r\n  conflict(hunk, myChanges, theirChanges);\r\n}\r\n\r\nfunction removal(hunk, mine, their, swap) {\r\n  var myChanges = collectChange(mine),\r\n      theirChanges = collectContext(their, myChanges);\r\n\r\n  if (theirChanges.merged) {\r\n    var _hunk$lines6;\r\n\r\n    (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));\r\n  } else {\r\n    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\r\n  }\r\n}\r\n\r\nfunction conflict(hunk, mine, their) {\r\n  hunk.conflict = true;\r\n  hunk.lines.push({\r\n    conflict: true,\r\n    mine: mine,\r\n    theirs: their\r\n  });\r\n}\r\n\r\nfunction insertLeading(hunk, insert, their) {\r\n  while (insert.offset < their.offset && insert.index < insert.lines.length) {\r\n    var line = insert.lines[insert.index++];\r\n    hunk.lines.push(line);\r\n    insert.offset++;\r\n  }\r\n}\r\n\r\nfunction insertTrailing(hunk, insert) {\r\n  while (insert.index < insert.lines.length) {\r\n    var line = insert.lines[insert.index++];\r\n    hunk.lines.push(line);\r\n  }\r\n}\r\n\r\nfunction collectChange(state) {\r\n  var ret = [],\r\n      operation = state.lines[state.index][0];\r\n\r\n  while (state.index < state.lines.length) {\r\n    var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\r\n\r\n    if (operation === '-' && line[0] === '+') {\r\n      operation = '+';\r\n    }\r\n\r\n    if (operation === line[0]) {\r\n      ret.push(line);\r\n      state.index++;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction collectContext(state, matchChanges) {\r\n  var changes = [],\r\n      merged = [],\r\n      matchIndex = 0,\r\n      contextChanges = false,\r\n      conflicted = false;\r\n\r\n  while (matchIndex < matchChanges.length && state.index < state.lines.length) {\r\n    var change = state.lines[state.index],\r\n        match = matchChanges[matchIndex]; // Once we've hit our add, then we are done\r\n\r\n    if (match[0] === '+') {\r\n      break;\r\n    }\r\n\r\n    contextChanges = contextChanges || change[0] !== ' ';\r\n    merged.push(match);\r\n    matchIndex++; // Consume any additions in the other block as a conflict to attempt\r\n    // to pull in the remaining context after this\r\n\r\n    if (change[0] === '+') {\r\n      conflicted = true;\r\n\r\n      while (change[0] === '+') {\r\n        changes.push(change);\r\n        change = state.lines[++state.index];\r\n      }\r\n    }\r\n\r\n    if (match.substr(1) === change.substr(1)) {\r\n      changes.push(change);\r\n      state.index++;\r\n    } else {\r\n      conflicted = true;\r\n    }\r\n  }\r\n\r\n  if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {\r\n    conflicted = true;\r\n  }\r\n\r\n  if (conflicted) {\r\n    return changes;\r\n  }\r\n\r\n  while (matchIndex < matchChanges.length) {\r\n    merged.push(matchChanges[matchIndex++]);\r\n  }\r\n\r\n  return {\r\n    merged: merged,\r\n    changes: changes\r\n  };\r\n}\r\n\r\nfunction allRemoves(changes) {\r\n  return changes.reduce(function (prev, change) {\r\n    return prev && change[0] === '-';\r\n  }, true);\r\n}\r\n\r\nfunction skipRemoveSuperset(state, removeChanges, delta) {\r\n  for (var i = 0; i < delta; i++) {\r\n    var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\r\n\r\n    if (state.lines[state.index + i] !== ' ' + changeContent) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  state.index += delta;\r\n  return true;\r\n}\r\n\r\nfunction calcOldNewLineCount(lines) {\r\n  var oldLines = 0;\r\n  var newLines = 0;\r\n  lines.forEach(function (line) {\r\n    if (typeof line !== 'string') {\r\n      var myCount = calcOldNewLineCount(line.mine);\r\n      var theirCount = calcOldNewLineCount(line.theirs);\r\n\r\n      if (oldLines !== undefined) {\r\n        if (myCount.oldLines === theirCount.oldLines) {\r\n          oldLines += myCount.oldLines;\r\n        } else {\r\n          oldLines = undefined;\r\n        }\r\n      }\r\n\r\n      if (newLines !== undefined) {\r\n        if (myCount.newLines === theirCount.newLines) {\r\n          newLines += myCount.newLines;\r\n        } else {\r\n          newLines = undefined;\r\n        }\r\n      }\r\n    } else {\r\n      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\r\n        newLines++;\r\n      }\r\n\r\n      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\r\n        oldLines++;\r\n      }\r\n    }\r\n  });\r\n  return {\r\n    oldLines: oldLines,\r\n    newLines: newLines\r\n  };\r\n}\r\n\r\nfunction reversePatch(structuredPatch) {\r\n  if (Array.isArray(structuredPatch)) {\r\n    return structuredPatch.map(reversePatch).reverse();\r\n  }\r\n\r\n  return _objectSpread2(_objectSpread2({}, structuredPatch), {}, {\r\n    oldFileName: structuredPatch.newFileName,\r\n    oldHeader: structuredPatch.newHeader,\r\n    newFileName: structuredPatch.oldFileName,\r\n    newHeader: structuredPatch.oldHeader,\r\n    hunks: structuredPatch.hunks.map(function (hunk) {\r\n      return {\r\n        oldLines: hunk.newLines,\r\n        oldStart: hunk.newStart,\r\n        newLines: hunk.oldLines,\r\n        newStart: hunk.oldStart,\r\n        linedelimiters: hunk.linedelimiters,\r\n        lines: hunk.lines.map(function (l) {\r\n          if (l.startsWith('-')) {\r\n            return \"+\".concat(l.slice(1));\r\n          }\r\n\r\n          if (l.startsWith('+')) {\r\n            return \"-\".concat(l.slice(1));\r\n          }\r\n\r\n          return l;\r\n        })\r\n      };\r\n    })\r\n  });\r\n}\r\n\r\n// See: http://code.google.com/p/google-diff-match-patch/wiki/API\r\nfunction convertChangesToDMP(changes) {\r\n  var ret = [],\r\n      change,\r\n      operation;\r\n\r\n  for (var i = 0; i < changes.length; i++) {\r\n    change = changes[i];\r\n\r\n    if (change.added) {\r\n      operation = 1;\r\n    } else if (change.removed) {\r\n      operation = -1;\r\n    } else {\r\n      operation = 0;\r\n    }\r\n\r\n    ret.push([operation, change.value]);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction convertChangesToXML(changes) {\r\n  var ret = [];\r\n\r\n  for (var i = 0; i < changes.length; i++) {\r\n    var change = changes[i];\r\n\r\n    if (change.added) {\r\n      ret.push('<ins>');\r\n    } else if (change.removed) {\r\n      ret.push('<del>');\r\n    }\r\n\r\n    ret.push(escapeHTML(change.value));\r\n\r\n    if (change.added) {\r\n      ret.push('</ins>');\r\n    } else if (change.removed) {\r\n      ret.push('</del>');\r\n    }\r\n  }\r\n\r\n  return ret.join('');\r\n}\r\n\r\nfunction escapeHTML(s) {\r\n  var n = s;\r\n  n = n.replace(/&/g, '&amp;');\r\n  n = n.replace(/</g, '&lt;');\r\n  n = n.replace(/>/g, '&gt;');\r\n  n = n.replace(/\"/g, '&quot;');\r\n  return n;\r\n}\r\n\r\nexport { Diff, applyPatch, applyPatches, canonicalize, convertChangesToDMP, convertChangesToXML, createPatch, createTwoFilesPatch, diffArrays, diffChars, diffCss, diffJson, diffLines, diffSentences, diffTrimmedLines, diffWords, diffWordsWithSpace, formatPatch, merge, parsePatch, reversePatch, structuredPatch };\r\n", "import kleur from 'kleur';\r\nimport * as diff from 'diff';\r\n\r\nconst colors = {\r\n\t'--': kleur.red,\r\n\t'··': kleur.grey,\r\n\t'++': kleur.green,\r\n};\r\n\r\nconst TITLE = kleur.dim().italic;\r\nconst TAB=kleur.dim('→'), SPACE=kleur.dim('·'), NL=kleur.dim('↵');\r\nconst LOG = (sym, str) => colors[sym](sym + PRETTY(str)) + '\\n';\r\nconst LINE = (num, x) => kleur.dim('L' + String(num).padStart(x, '0') + ' ');\r\nconst PRETTY = str => str.replace(/[ ]/g, SPACE).replace(/\\t/g, TAB).replace(/(\\r?\\n)/g, NL);\r\n\r\nfunction line(obj, prev, pad) {\r\n\tlet char = obj.removed ? '--' : obj.added ? '++' : '··';\r\n\tlet arr = obj.value.replace(/\\r?\\n$/, '').split('\\n');\r\n\tlet i=0, tmp, out='';\r\n\r\n\tif (obj.added) out += colors[char]().underline(TITLE('Expected:')) + '\\n';\r\n\telse if (obj.removed) out += colors[char]().underline(TITLE('Actual:')) + '\\n';\r\n\r\n\tfor (; i < arr.length; i++) {\r\n\t\ttmp = arr[i];\r\n\t\tif (tmp != null) {\r\n\t\t\tif (prev) out += LINE(prev + i, pad);\r\n\t\t\tout += LOG(char, tmp || '\\n');\r\n\t\t}\r\n\t}\r\n\r\n\treturn out;\r\n}\r\n\r\n// TODO: want better diffing\r\n//~> complex items bail outright\r\nexport function arrays(input, expect) {\r\n\tlet arr = diff.diffArrays(input, expect);\r\n\tlet i=0, j=0, k=0, tmp, val, char, isObj, str;\r\n\tlet out = LOG('··', '[');\r\n\r\n\tfor (; i < arr.length; i++) {\r\n\t\tchar = (tmp = arr[i]).removed ? '--' : tmp.added ? '++' : '··';\r\n\r\n\t\tif (tmp.added) {\r\n\t\t\tout += colors[char]().underline(TITLE('Expected:')) + '\\n';\r\n\t\t} else if (tmp.removed) {\r\n\t\t\tout += colors[char]().underline(TITLE('Actual:')) + '\\n';\r\n\t\t}\r\n\r\n\t\tfor (j=0; j < tmp.value.length; j++) {\r\n\t\t\tisObj = (tmp.value[j] && typeof tmp.value[j] === 'object');\r\n\t\t\tval = stringify(tmp.value[j]).split(/\\r?\\n/g);\r\n\t\t\tfor (k=0; k < val.length;) {\r\n\t\t\t\tstr = '  ' + val[k++] + (isObj ? '' : ',');\r\n\t\t\t\tif (isObj && k === val.length && (j + 1) < tmp.value.length) str += ',';\r\n\t\t\t\tout += LOG(char, str);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn out + LOG('··', ']');\r\n}\r\n\r\nexport function lines(input, expect, linenum = 0) {\r\n\tlet i=0, tmp, output='';\r\n\tlet arr = diff.diffLines(input, expect);\r\n\tlet pad = String(expect.split(/\\r?\\n/g).length - linenum).length;\r\n\r\n\tfor (; i < arr.length; i++) {\r\n\t\toutput += line(tmp = arr[i], linenum, pad);\r\n\t\tif (linenum && !tmp.removed) linenum += tmp.count;\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\nexport function chars(input, expect) {\r\n\tlet arr = diff.diffChars(input, expect);\r\n\tlet i=0, output='', tmp;\r\n\r\n\tlet l1 = input.length;\r\n\tlet l2 = expect.length;\r\n\r\n\tlet p1 = PRETTY(input);\r\n\tlet p2 = PRETTY(expect);\r\n\r\n\ttmp = arr[i];\r\n\r\n\tif (l1 === l2) {\r\n\t\t// no length offsets\r\n\t} else if (tmp.removed && arr[i + 1]) {\r\n\t\tlet del = tmp.count - arr[i + 1].count;\r\n\t\tif (del == 0) {\r\n\t\t\t// wash~\r\n\t\t} else if (del > 0) {\r\n\t\t\texpect = ' '.repeat(del) + expect;\r\n\t\t\tp2 = ' '.repeat(del) + p2;\r\n\t\t\tl2 += del;\r\n\t\t} else if (del < 0) {\r\n\t\t\tinput = ' '.repeat(-del) + input;\r\n\t\t\tp1 = ' '.repeat(-del) + p1;\r\n\t\t\tl1 += -del;\r\n\t\t}\r\n\t}\r\n\r\n\toutput += direct(p1, p2, l1, l2);\r\n\r\n\tif (l1 === l2) {\r\n\t\tfor (tmp='  '; i < l1; i++) {\r\n\t\t\ttmp += input[i] === expect[i] ? ' ' : '^';\r\n\t\t}\r\n\t} else {\r\n\t\tfor (tmp='  '; i < arr.length; i++) {\r\n\t\t\ttmp += ((arr[i].added || arr[i].removed) ? '^' : ' ').repeat(Math.max(arr[i].count, 0));\r\n\t\t\tif (i + 1 < arr.length && ((arr[i].added && arr[i+1].removed) || (arr[i].removed && arr[i+1].added))) {\r\n\t\t\t\tarr[i + 1].count -= arr[i].count;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn output + kleur.red(tmp);\r\n}\r\n\r\nexport function direct(input, expect, lenA = String(input).length, lenB = String(expect).length) {\r\n\tlet gutter = 4;\r\n\tlet lenC = Math.max(lenA, lenB);\r\n\tlet typeA=typeof input, typeB=typeof expect;\r\n\r\n\tif (typeA !== typeB) {\r\n\t\tgutter = 2;\r\n\r\n\t\tlet delA = gutter + lenC - lenA;\r\n\t\tlet delB = gutter + lenC - lenB;\r\n\r\n\t\tinput += ' '.repeat(delA) + kleur.dim(`[${typeA}]`);\r\n\t\texpect += ' '.repeat(delB) + kleur.dim(`[${typeB}]`);\r\n\r\n\t\tlenA += delA + typeA.length + 2;\r\n\t\tlenB += delB + typeB.length + 2;\r\n\t\tlenC = Math.max(lenA, lenB);\r\n\t}\r\n\r\n\tlet output = colors['++']('++' + expect + ' '.repeat(gutter + lenC - lenB) + TITLE('(Expected)')) + '\\n';\r\n\treturn output + colors['--']('--' + input + ' '.repeat(gutter + lenC - lenA) + TITLE('(Actual)')) + '\\n';\r\n}\r\n\r\nexport function sort(input, expect) {\r\n\tvar k, i=0, tmp, isArr = Array.isArray(input);\r\n\tvar keys=[], out=isArr ? Array(input.length) : {};\r\n\r\n\tif (isArr) {\r\n\t\tfor (i=0; i < out.length; i++) {\r\n\t\t\ttmp = input[i];\r\n\t\t\tif (!tmp || typeof tmp !== 'object') out[i] = tmp;\r\n\t\t\telse out[i] = sort(tmp, expect[i]); // might not be right\r\n\t\t}\r\n\t} else {\r\n\t\tfor (k in expect)\r\n\t\t\tkeys.push(k);\r\n\r\n\t\tfor (; i < keys.length; i++) {\r\n\t\t\tif (Object.prototype.hasOwnProperty.call(input, k = keys[i])) {\r\n\t\t\t\tif (!(tmp = input[k]) || typeof tmp !== 'object') out[k] = tmp;\r\n\t\t\t\telse out[k] = sort(tmp, expect[k]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (k in input) {\r\n\t\t\tif (!out.hasOwnProperty(k)) {\r\n\t\t\t\tout[k] = input[k]; // expect didnt have\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn out;\r\n}\r\n\r\nexport function circular() {\r\n\tvar cache = new Set;\r\n\treturn function print(key, val) {\r\n\t\tif (val === void 0) return '[__VOID__]';\r\n\t\tif (typeof val === 'number' && val !== val) return '[__NAN__]';\r\n\t\tif (typeof val === 'bigint') return val.toString();\r\n\t\tif (!val || typeof val !== 'object') return val;\r\n\t\tif (cache.has(val)) return '[Circular]';\r\n\t\tcache.add(val); return val;\r\n\t}\r\n}\r\n\r\nexport function stringify(input) {\r\n\treturn JSON.stringify(input, circular(), 2).replace(/\"\\[__NAN__\\]\"/g, 'NaN').replace(/\"\\[__VOID__\\]\"/g, 'undefined');\r\n}\r\n\r\nexport function compare(input, expect) {\r\n\tif (Array.isArray(expect) && Array.isArray(input)) return arrays(input, expect);\r\n\tif (expect instanceof RegExp) return chars(''+input, ''+expect);\r\n\r\n\tlet isA = input && typeof input == 'object';\r\n\tlet isB = expect && typeof expect == 'object';\r\n\r\n\tif (isA && isB) input = sort(input, expect);\r\n\tif (isB) expect = stringify(expect);\r\n\tif (isA) input = stringify(input);\r\n\r\n\tif (expect && typeof expect == 'object') {\r\n\t\tinput = stringify(sort(input, expect));\r\n\t\texpect = stringify(expect);\r\n\t}\r\n\r\n\tisA = typeof input == 'string';\r\n\tisB = typeof expect == 'string';\r\n\r\n\tif (isA && /\\r?\\n/.test(input)) return lines(input, ''+expect);\r\n\tif (isB && /\\r?\\n/.test(expect)) return lines(''+input, expect);\r\n\tif (isA && isB) return chars(input, expect);\r\n\r\n\treturn direct(input, expect);\r\n}\r\n", "import { dequal } from 'dequal';\r\nimport { compare, lines } from 'uvu/diff';\r\n\r\nfunction dedent(str) {\r\n\tstr = str.replace(/\\r?\\n/g, '\\n');\r\n  let arr = str.match(/^[ \\t]*(?=\\S)/gm);\r\n  let i = 0, min = 1/0, len = (arr||[]).length;\r\n  for (; i < len; i++) min = Math.min(min, arr[i].length);\r\n  return len && min ? str.replace(new RegExp(`^[ \\\\t]{${min}}`, 'gm'), '') : str;\r\n}\r\n\r\nexport class Assertion extends Error {\r\n\tconstructor(opts={}) {\r\n\t\tsuper(opts.message);\r\n\t\tthis.name = 'Assertion';\r\n\t\tthis.code = 'ERR_ASSERTION';\r\n\t\tif (Error.captureStackTrace) {\r\n\t\t\tError.captureStackTrace(this, this.constructor);\r\n\t\t}\r\n\t\tthis.details = opts.details || false;\r\n\t\tthis.generated = !!opts.generated;\r\n\t\tthis.operator = opts.operator;\r\n\t\tthis.expects = opts.expects;\r\n\t\tthis.actual = opts.actual;\r\n\t}\r\n}\r\n\r\nfunction assert(bool, actual, expects, operator, detailer, backup, msg) {\r\n\tif (bool) return;\r\n\tlet message = msg || backup;\r\n\tif (msg instanceof Error) throw msg;\r\n\tlet details = detailer && detailer(actual, expects);\r\n\tthrow new Assertion({ actual, expects, operator, message, details, generated: !msg });\r\n}\r\n\r\nexport function ok(val, msg) {\r\n\tassert(!!val, false, true, 'ok', false, 'Expected value to be truthy', msg);\r\n}\r\n\r\nexport function is(val, exp, msg) {\r\n\tassert(val === exp, val, exp, 'is', compare, 'Expected values to be strictly equal:', msg);\r\n}\r\n\r\nexport function equal(val, exp, msg) {\r\n\tassert(dequal(val, exp), val, exp, 'equal', compare, 'Expected values to be deeply equal:', msg);\r\n}\r\n\r\nexport function unreachable(msg) {\r\n\tassert(false, true, false, 'unreachable', false, 'Expected not to be reached!', msg);\r\n}\r\n\r\nexport function type(val, exp, msg) {\r\n\tlet tmp = typeof val;\r\n\tassert(tmp === exp, tmp, exp, 'type', false, `Expected \"${tmp}\" to be \"${exp}\"`, msg);\r\n}\r\n\r\nexport function instance(val, exp, msg) {\r\n\tlet name = '`' + (exp.name || exp.constructor.name) + '`';\r\n\tassert(val instanceof exp, val, exp, 'instance', false, `Expected value to be an instance of ${name}`, msg);\r\n}\r\n\r\nexport function match(val, exp, msg) {\r\n\tif (typeof exp === 'string') {\r\n\t\tassert(val.includes(exp), val, exp, 'match', false, `Expected value to include \"${exp}\" substring`, msg);\r\n\t} else {\r\n\t\tassert(exp.test(val), val, exp, 'match', false, `Expected value to match \\`${String(exp)}\\` pattern`, msg);\r\n\t}\r\n}\r\n\r\nexport function snapshot(val, exp, msg) {\r\n\tval=dedent(val); exp=dedent(exp);\r\n\tassert(val === exp, val, exp, 'snapshot', lines, 'Expected value to match snapshot:', msg);\r\n}\r\n\r\nconst lineNums = (x, y) => lines(x, y, 1);\r\nexport function fixture(val, exp, msg) {\r\n\tval=dedent(val); exp=dedent(exp);\r\n\tassert(val === exp, val, exp, 'fixture', lineNums, 'Expected value to match fixture:', msg);\r\n}\r\n\r\nexport function throws(blk, exp, msg) {\r\n\tif (!msg && typeof exp === 'string') {\r\n\t\tmsg = exp; exp = null;\r\n\t}\r\n\r\n\ttry {\r\n\t\tblk();\r\n\t\tassert(false, false, true, 'throws', false, 'Expected function to throw', msg);\r\n\t} catch (err) {\r\n\t\tif (err instanceof Assertion) throw err;\r\n\r\n\t\tif (typeof exp === 'function') {\r\n\t\t\tassert(exp(err), false, true, 'throws', false, 'Expected function to throw matching exception', msg);\r\n\t\t} else if (exp instanceof RegExp) {\r\n\t\t\tassert(exp.test(err.message), false, true, 'throws', false, `Expected function to throw exception matching \\`${String(exp)}\\` pattern`, msg);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// ---\r\n\r\nexport function not(val, msg) {\r\n\tassert(!val, true, false, 'not', false, 'Expected value to be falsey', msg);\r\n}\r\n\r\nnot.ok = not;\r\n\r\nis.not = function (val, exp, msg) {\r\n\tassert(val !== exp, val, exp, 'is.not', false, 'Expected values not to be strictly equal', msg);\r\n}\r\n\r\nnot.equal = function (val, exp, msg) {\r\n\tassert(!dequal(val, exp), val, exp, 'not.equal', false, 'Expected values not to be deeply equal', msg);\r\n}\r\n\r\nnot.type = function (val, exp, msg) {\r\n\tlet tmp = typeof val;\r\n\tassert(tmp !== exp, tmp, exp, 'not.type', false, `Expected \"${tmp}\" not to be \"${exp}\"`, msg);\r\n}\r\n\r\nnot.instance = function (val, exp, msg) {\r\n\tlet name = '`' + (exp.name || exp.constructor.name) + '`';\r\n\tassert(!(val instanceof exp), val, exp, 'not.instance', false, `Expected value not to be an instance of ${name}`, msg);\r\n}\r\n\r\nnot.snapshot = function (val, exp, msg) {\r\n\tval=dedent(val); exp=dedent(exp);\r\n\tassert(val !== exp, val, exp, 'not.snapshot', false, 'Expected value not to match snapshot', msg);\r\n}\r\n\r\nnot.fixture = function (val, exp, msg) {\r\n\tval=dedent(val); exp=dedent(exp);\r\n\tassert(val !== exp, val, exp, 'not.fixture', false, 'Expected value not to match fixture', msg);\r\n}\r\n\r\nnot.match = function (val, exp, msg) {\r\n\tif (typeof exp === 'string') {\r\n\t\tassert(!val.includes(exp), val, exp, 'not.match', false, `Expected value not to include \"${exp}\" substring`, msg);\r\n\t} else {\r\n\t\tassert(!exp.test(val), val, exp, 'not.match', false, `Expected value not to match \\`${String(exp)}\\` pattern`, msg);\r\n\t}\r\n}\r\n\r\nnot.throws = function (blk, exp, msg) {\r\n\tif (!msg && typeof exp === 'string') {\r\n\t\tmsg = exp; exp = null;\r\n\t}\r\n\r\n\ttry {\r\n\t\tblk();\r\n\t} catch (err) {\r\n\t\tif (typeof exp === 'function') {\r\n\t\t\tassert(!exp(err), true, false, 'not.throws', false, 'Expected function not to throw matching exception', msg);\r\n\t\t} else if (exp instanceof RegExp) {\r\n\t\t\tassert(!exp.test(err.message), true, false, 'not.throws', false, `Expected function not to throw exception matching \\`${String(exp)}\\` pattern`, msg);\r\n\t\t} else if (!exp) {\r\n\t\t\tassert(false, true, false, 'not.throws', false, 'Expected function not to throw', msg);\r\n\t\t}\r\n\t}\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n */\r\n\r\nimport {\r\n  markdownLineEndingOrSpace,\r\n  unicodePunctuation,\r\n  unicodeWhitespace\r\n} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\n\r\n/**\r\n * Classify whether a code represents whitespace, punctuation, or something\r\n * else.\r\n *\r\n * Used for attention (emphasis, strong), whose sequences can open or close\r\n * based on the class of surrounding characters.\r\n *\r\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\r\n *   Group.\r\n */\r\nexport function classifyCharacter(code) {\r\n  if (\r\n    code === codes.eof ||\r\n    markdownLineEndingOrSpace(code) ||\r\n    unicodeWhitespace(code)\r\n  ) {\r\n    return constants.characterGroupWhitespace\r\n  }\r\n\r\n  if (unicodePunctuation(code)) {\r\n    return constants.characterGroupPunctuation\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\n/**\r\n * Call all `resolveAll`s.\r\n *\r\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\r\n *   List of constructs, optionally with `resolveAll`s.\r\n * @param {Array<Event>} events\r\n *   List of events.\r\n * @param {TokenizeContext} context\r\n *   Context used by `tokenize`.\r\n * @returns {Array<Event>}\r\n *   Changed events.\r\n */\r\nexport function resolveAll(constructs, events, context) {\r\n  /** @type {Array<Resolver>} */\r\n  const called = []\r\n  let index = -1\r\n\r\n  while (++index < constructs.length) {\r\n    const resolve = constructs[index].resolveAll\r\n\r\n    if (resolve && !called.includes(resolve)) {\r\n      events = resolve(events, context)\r\n      called.push(resolve)\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n", "/**\r\n * This module is compiled away!\r\n *\r\n * Here is the list of all types of tokens exposed by micromark, with a short\r\n * explanation of what they include and where they are found.\r\n * In picking names, generally, the rule is to be as explicit as possible\r\n * instead of reusing names.\r\n * For example, there is a `definitionDestination` and a `resourceDestination`,\r\n * instead of one shared name.\r\n */\r\n\r\n// Note: when changing the next record, you must also change `TokenTypeMap`\r\n// in `micromark-util-types/index.d.ts`.\r\nexport const types = /** @type {const} */ ({\r\n  // Generic type for data, such as in a title, a destination, etc.\r\n  data: 'data',\r\n\r\n  // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).\r\n  // Such as, between a fenced code fence and an info string.\r\n  whitespace: 'whitespace',\r\n\r\n  // Generic type for line endings (line feed, carriage return, carriage return +\r\n  // line feed).\r\n  lineEnding: 'lineEnding',\r\n\r\n  // A line ending, but ending a blank line.\r\n  lineEndingBlank: 'lineEndingBlank',\r\n\r\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a\r\n  // line.\r\n  linePrefix: 'linePrefix',\r\n\r\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a\r\n  // line.\r\n  lineSuffix: 'lineSuffix',\r\n\r\n  // Whole ATX heading:\r\n  //\r\n  // ```markdown\r\n  // #\r\n  // ## Alpha\r\n  // ### Bravo ###\r\n  // ```\r\n  //\r\n  // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.\r\n  atxHeading: 'atxHeading',\r\n\r\n  // Sequence of number signs in an ATX heading (`###`).\r\n  atxHeadingSequence: 'atxHeadingSequence',\r\n\r\n  // Content in an ATX heading (`alpha`).\r\n  // Includes text.\r\n  atxHeadingText: 'atxHeadingText',\r\n\r\n  // Whole autolink (`<https://example.com>` or `<admin@example.com>`)\r\n  // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.\r\n  autolink: 'autolink',\r\n\r\n  // Email autolink w/o markers (`admin@example.com`)\r\n  autolinkEmail: 'autolinkEmail',\r\n\r\n  // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).\r\n  autolinkMarker: 'autolinkMarker',\r\n\r\n  // Protocol autolink w/o markers (`https://example.com`)\r\n  autolinkProtocol: 'autolinkProtocol',\r\n\r\n  // A whole character escape (`\\-`).\r\n  // Includes `escapeMarker` and `characterEscapeValue`.\r\n  characterEscape: 'characterEscape',\r\n\r\n  // The escaped character (`-`).\r\n  characterEscapeValue: 'characterEscapeValue',\r\n\r\n  // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).\r\n  // Includes `characterReferenceMarker`, an optional\r\n  // `characterReferenceMarkerNumeric`, in which case an optional\r\n  // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.\r\n  characterReference: 'characterReference',\r\n\r\n  // The start or end marker (`&` or `;`).\r\n  characterReferenceMarker: 'characterReferenceMarker',\r\n\r\n  // Mark reference as numeric (`#`).\r\n  characterReferenceMarkerNumeric: 'characterReferenceMarkerNumeric',\r\n\r\n  // Mark reference as numeric (`x` or `X`).\r\n  characterReferenceMarkerHexadecimal: 'characterReferenceMarkerHexadecimal',\r\n\r\n  // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).\r\n  characterReferenceValue: 'characterReferenceValue',\r\n\r\n  // Whole fenced code:\r\n  //\r\n  // ````markdown\r\n  // ```js\r\n  // alert(1)\r\n  // ```\r\n  // ````\r\n  codeFenced: 'codeFenced',\r\n\r\n  // A fenced code fence, including whitespace, sequence, info, and meta\r\n  // (` ```js `).\r\n  codeFencedFence: 'codeFencedFence',\r\n\r\n  // Sequence of grave accent or tilde characters (` ``` `) in a fence.\r\n  codeFencedFenceSequence: 'codeFencedFenceSequence',\r\n\r\n  // Info word (`js`) in a fence.\r\n  // Includes string.\r\n  codeFencedFenceInfo: 'codeFencedFenceInfo',\r\n\r\n  // Meta words (`highlight=\"1\"`) in a fence.\r\n  // Includes string.\r\n  codeFencedFenceMeta: 'codeFencedFenceMeta',\r\n\r\n  // A line of code.\r\n  codeFlowValue: 'codeFlowValue',\r\n\r\n  // Whole indented code:\r\n  //\r\n  // ```markdown\r\n  //     alert(1)\r\n  // ```\r\n  //\r\n  // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.\r\n  codeIndented: 'codeIndented',\r\n\r\n  // A text code (``` `alpha` ```).\r\n  // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include\r\n  // `codeTextPadding`.\r\n  codeText: 'codeText',\r\n\r\n  codeTextData: 'codeTextData',\r\n\r\n  // A space or line ending right after or before a tick.\r\n  codeTextPadding: 'codeTextPadding',\r\n\r\n  // A text code fence (` `` `).\r\n  codeTextSequence: 'codeTextSequence',\r\n\r\n  // Whole content:\r\n  //\r\n  // ```markdown\r\n  // [a]: b\r\n  // c\r\n  // =\r\n  // d\r\n  // ```\r\n  //\r\n  // Includes `paragraph` and `definition`.\r\n  content: 'content',\r\n  // Whole definition:\r\n  //\r\n  // ```markdown\r\n  // [micromark]: https://github.com/micromark/micromark\r\n  // ```\r\n  //\r\n  // Includes `definitionLabel`, `definitionMarker`, `whitespace`,\r\n  // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.\r\n  definition: 'definition',\r\n\r\n  // Destination of a definition (`https://github.com/micromark/micromark` or\r\n  // `<https://github.com/micromark/micromark>`).\r\n  // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.\r\n  definitionDestination: 'definitionDestination',\r\n\r\n  // Enclosed destination of a definition\r\n  // (`<https://github.com/micromark/micromark>`).\r\n  // Includes `definitionDestinationLiteralMarker` and optionally\r\n  // `definitionDestinationString`.\r\n  definitionDestinationLiteral: 'definitionDestinationLiteral',\r\n\r\n  // Markers of an enclosed definition destination (`<` or `>`).\r\n  definitionDestinationLiteralMarker: 'definitionDestinationLiteralMarker',\r\n\r\n  // Unenclosed destination of a definition\r\n  // (`https://github.com/micromark/micromark`).\r\n  // Includes `definitionDestinationString`.\r\n  definitionDestinationRaw: 'definitionDestinationRaw',\r\n\r\n  // Text in an destination (`https://github.com/micromark/micromark`).\r\n  // Includes string.\r\n  definitionDestinationString: 'definitionDestinationString',\r\n\r\n  // Label of a definition (`[micromark]`).\r\n  // Includes `definitionLabelMarker` and `definitionLabelString`.\r\n  definitionLabel: 'definitionLabel',\r\n\r\n  // Markers of a definition label (`[` or `]`).\r\n  definitionLabelMarker: 'definitionLabelMarker',\r\n\r\n  // Value of a definition label (`micromark`).\r\n  // Includes string.\r\n  definitionLabelString: 'definitionLabelString',\r\n\r\n  // Marker between a label and a destination (`:`).\r\n  definitionMarker: 'definitionMarker',\r\n\r\n  // Title of a definition (`\"x\"`, `'y'`, or `(z)`).\r\n  // Includes `definitionTitleMarker` and optionally `definitionTitleString`.\r\n  definitionTitle: 'definitionTitle',\r\n\r\n  // Marker around a title of a definition (`\"`, `'`, `(`, or `)`).\r\n  definitionTitleMarker: 'definitionTitleMarker',\r\n\r\n  // Data without markers in a title (`z`).\r\n  // Includes string.\r\n  definitionTitleString: 'definitionTitleString',\r\n\r\n  // Emphasis (`*alpha*`).\r\n  // Includes `emphasisSequence` and `emphasisText`.\r\n  emphasis: 'emphasis',\r\n\r\n  // Sequence of emphasis markers (`*` or `_`).\r\n  emphasisSequence: 'emphasisSequence',\r\n\r\n  // Emphasis text (`alpha`).\r\n  // Includes text.\r\n  emphasisText: 'emphasisText',\r\n\r\n  // The character escape marker (`\\`).\r\n  escapeMarker: 'escapeMarker',\r\n\r\n  // A hard break created with a backslash (`\\\\n`).\r\n  // Note: does not include the line ending.\r\n  hardBreakEscape: 'hardBreakEscape',\r\n\r\n  // A hard break created with trailing spaces (`  \\n`).\r\n  // Does not include the line ending.\r\n  hardBreakTrailing: 'hardBreakTrailing',\r\n\r\n  // Flow HTML:\r\n  //\r\n  // ```markdown\r\n  // <div\r\n  // ```\r\n  //\r\n  // Inlcudes `lineEnding`, `htmlFlowData`.\r\n  htmlFlow: 'htmlFlow',\r\n\r\n  htmlFlowData: 'htmlFlowData',\r\n\r\n  // HTML in text (the tag in `a <i> b`).\r\n  // Includes `lineEnding`, `htmlTextData`.\r\n  htmlText: 'htmlText',\r\n\r\n  htmlTextData: 'htmlTextData',\r\n\r\n  // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or\r\n  // `![alpha]`).\r\n  // Includes `label` and an optional `resource` or `reference`.\r\n  image: 'image',\r\n\r\n  // Whole link label (`[*alpha*]`).\r\n  // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.\r\n  label: 'label',\r\n\r\n  // Text in an label (`*alpha*`).\r\n  // Includes text.\r\n  labelText: 'labelText',\r\n\r\n  // Start a link label (`[`).\r\n  // Includes a `labelMarker`.\r\n  labelLink: 'labelLink',\r\n\r\n  // Start an image label (`![`).\r\n  // Includes `labelImageMarker` and `labelMarker`.\r\n  labelImage: 'labelImage',\r\n\r\n  // Marker of a label (`[` or `]`).\r\n  labelMarker: 'labelMarker',\r\n\r\n  // Marker to start an image (`!`).\r\n  labelImageMarker: 'labelImageMarker',\r\n\r\n  // End a label (`]`).\r\n  // Includes `labelMarker`.\r\n  labelEnd: 'labelEnd',\r\n\r\n  // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).\r\n  // Includes `label` and an optional `resource` or `reference`.\r\n  link: 'link',\r\n\r\n  // Whole paragraph:\r\n  //\r\n  // ```markdown\r\n  // alpha\r\n  // bravo.\r\n  // ```\r\n  //\r\n  // Includes text.\r\n  paragraph: 'paragraph',\r\n\r\n  // A reference (`[alpha]` or `[]`).\r\n  // Includes `referenceMarker` and an optional `referenceString`.\r\n  reference: 'reference',\r\n\r\n  // A reference marker (`[` or `]`).\r\n  referenceMarker: 'referenceMarker',\r\n\r\n  // Reference text (`alpha`).\r\n  // Includes string.\r\n  referenceString: 'referenceString',\r\n\r\n  // A resource (`(https://example.com \"alpha\")`).\r\n  // Includes `resourceMarker`, an optional `resourceDestination` with an optional\r\n  // `whitespace` and `resourceTitle`.\r\n  resource: 'resource',\r\n\r\n  // A resource destination (`https://example.com`).\r\n  // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.\r\n  resourceDestination: 'resourceDestination',\r\n\r\n  // A literal resource destination (`<https://example.com>`).\r\n  // Includes `resourceDestinationLiteralMarker` and optionally\r\n  // `resourceDestinationString`.\r\n  resourceDestinationLiteral: 'resourceDestinationLiteral',\r\n\r\n  // A resource destination marker (`<` or `>`).\r\n  resourceDestinationLiteralMarker: 'resourceDestinationLiteralMarker',\r\n\r\n  // A raw resource destination (`https://example.com`).\r\n  // Includes `resourceDestinationString`.\r\n  resourceDestinationRaw: 'resourceDestinationRaw',\r\n\r\n  // Resource destination text (`https://example.com`).\r\n  // Includes string.\r\n  resourceDestinationString: 'resourceDestinationString',\r\n\r\n  // A resource marker (`(` or `)`).\r\n  resourceMarker: 'resourceMarker',\r\n\r\n  // A resource title (`\"alpha\"`, `'alpha'`, or `(alpha)`).\r\n  // Includes `resourceTitleMarker` and optionally `resourceTitleString`.\r\n  resourceTitle: 'resourceTitle',\r\n\r\n  // A resource title marker (`\"`, `'`, `(`, or `)`).\r\n  resourceTitleMarker: 'resourceTitleMarker',\r\n\r\n  // Resource destination title (`alpha`).\r\n  // Includes string.\r\n  resourceTitleString: 'resourceTitleString',\r\n\r\n  // Whole setext heading:\r\n  //\r\n  // ```markdown\r\n  // alpha\r\n  // bravo\r\n  // =====\r\n  // ```\r\n  //\r\n  // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and\r\n  // `setextHeadingLine`.\r\n  setextHeading: 'setextHeading',\r\n\r\n  // Content in a setext heading (`alpha\\nbravo`).\r\n  // Includes text.\r\n  setextHeadingText: 'setextHeadingText',\r\n\r\n  // Underline in a setext heading, including whitespace suffix (`==`).\r\n  // Includes `setextHeadingLineSequence`.\r\n  setextHeadingLine: 'setextHeadingLine',\r\n\r\n  // Sequence of equals or dash characters in underline in a setext heading (`-`).\r\n  setextHeadingLineSequence: 'setextHeadingLineSequence',\r\n\r\n  // Strong (`**alpha**`).\r\n  // Includes `strongSequence` and `strongText`.\r\n  strong: 'strong',\r\n\r\n  // Sequence of strong markers (`**` or `__`).\r\n  strongSequence: 'strongSequence',\r\n\r\n  // Strong text (`alpha`).\r\n  // Includes text.\r\n  strongText: 'strongText',\r\n\r\n  // Whole thematic break:\r\n  //\r\n  // ```markdown\r\n  // * * *\r\n  // ```\r\n  //\r\n  // Includes `thematicBreakSequence` and `whitespace`.\r\n  thematicBreak: 'thematicBreak',\r\n\r\n  // A sequence of one or more thematic break markers (`***`).\r\n  thematicBreakSequence: 'thematicBreakSequence',\r\n\r\n  // Whole block quote:\r\n  //\r\n  // ```markdown\r\n  // > a\r\n  // >\r\n  // > b\r\n  // ```\r\n  //\r\n  // Includes `blockQuotePrefix` and flow.\r\n  blockQuote: 'blockQuote',\r\n  // The `>` or `> ` of a block quote.\r\n  blockQuotePrefix: 'blockQuotePrefix',\r\n  // The `>` of a block quote prefix.\r\n  blockQuoteMarker: 'blockQuoteMarker',\r\n  // The optional ` ` of a block quote prefix.\r\n  blockQuotePrefixWhitespace: 'blockQuotePrefixWhitespace',\r\n\r\n  // Whole unordered list:\r\n  //\r\n  // ```markdown\r\n  // - a\r\n  //   b\r\n  // ```\r\n  //\r\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\r\n  // lines.\r\n  listOrdered: 'listOrdered',\r\n\r\n  // Whole ordered list:\r\n  //\r\n  // ```markdown\r\n  // 1. a\r\n  //    b\r\n  // ```\r\n  //\r\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\r\n  // lines.\r\n  listUnordered: 'listUnordered',\r\n\r\n  // The indent of further list item lines.\r\n  listItemIndent: 'listItemIndent',\r\n\r\n  // A marker, as in, `*`, `+`, `-`, `.`, or `)`.\r\n  listItemMarker: 'listItemMarker',\r\n\r\n  // The thing that starts a list item, such as `1. `.\r\n  // Includes `listItemValue` if ordered, `listItemMarker`, and\r\n  // `listItemPrefixWhitespace` (unless followed by a line ending).\r\n  listItemPrefix: 'listItemPrefix',\r\n\r\n  // The whitespace after a marker.\r\n  listItemPrefixWhitespace: 'listItemPrefixWhitespace',\r\n\r\n  // The numerical value of an ordered item.\r\n  listItemValue: 'listItemValue',\r\n\r\n  // Internal types used for subtokenizers, compiled away\r\n  chunkDocument: 'chunkDocument',\r\n  chunkContent: 'chunkContent',\r\n  chunkFlow: 'chunkFlow',\r\n  chunkText: 'chunkText',\r\n  chunkString: 'chunkString'\r\n})\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {markdownSpace} from 'micromark-util-character'\r\n\r\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\r\n\r\n/**\r\n * Parse spaces and tabs.\r\n *\r\n * There is no `nok` parameter:\r\n *\r\n * *   spaces in markdown are often optional, in which case this factory can be\r\n *     used and `ok` will be switched to whether spaces were found or not\r\n * *   one line ending or space can be detected with `markdownSpace(code)` right\r\n *     before using `factorySpace`\r\n *\r\n * ###### Examples\r\n *\r\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\r\n * single space.\r\n *\r\n * ```markdown\r\n * ␉\r\n * ␠␠␠␠\r\n * ␉␠\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {TokenType} type\r\n *   Type (`' \\t'`).\r\n * @param {number | undefined} [max=Infinity]\r\n *   Max (exclusive).\r\n * @returns\r\n *   Start state.\r\n */\r\nexport function factorySpace(effects, ok, type, max) {\r\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\r\n  let size = 0\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(type)\r\n      return prefix(code)\r\n    }\r\n\r\n    return ok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function prefix(code) {\r\n    if (markdownSpace(code) && size++ < limit) {\r\n      effects.consume(code)\r\n      return prefix\r\n    }\r\n\r\n    effects.exit(type)\r\n    return ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\n\r\n/** @type {Construct} */\r\nexport const blankLine = {tokenize: tokenizeBlankLine, partial: true}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLine(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of blank line.\r\n   *\r\n   * > 👉 **Note**: `␠` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ␠␠␊\r\n   *     ^\r\n   * > | ␊\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, after, types.linePrefix)(code)\r\n      : after(code)\r\n  }\r\n\r\n  /**\r\n   * At eof/eol, after optional whitespace.\r\n   *\r\n   * > 👉 **Note**: `␠` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ␠␠␊\r\n   *       ^\r\n   * > | ␊\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\r\n  }\r\n}\r\n", "import {values} from 'micromark-util-symbol/values.js'\r\n\r\n/**\r\n * Normalize an identifier (as found in references, definitions).\r\n *\r\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\r\n *\r\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\r\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\r\n * uppercase character (U+0398 (`Θ`)).\r\n * So, to get a canonical form, we perform both lower- and uppercase.\r\n *\r\n * Using uppercase last makes sure keys will never interact with default\r\n * prototypal values (such as `constructor`): nothing in the prototype of\r\n * `Object` is uppercase.\r\n *\r\n * @param {string} value\r\n *   Identifier to normalize.\r\n * @returns {string}\r\n *   Normalized identifier.\r\n */\r\nexport function normalizeIdentifier(value) {\r\n  return (\r\n    value\r\n      // Collapse markdown whitespace.\r\n      .replace(/[\\t\\n\\r ]+/g, values.space)\r\n      // Trim.\r\n      .replace(/^ | $/g, '')\r\n      // Some characters are considered “uppercase”, but if their lowercase\r\n      // counterpart is uppercased will result in a different uppercase\r\n      // character.\r\n      // Hence, to get that form, we perform both lower- and uppercase.\r\n      // Upper case makes sure keys will not interact with default prototypal\r\n      // methods: no method is uppercase.\r\n      .toLowerCase()\r\n      .toUpperCase()\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {push, splice} from 'micromark-util-chunked'\r\nimport {classifyCharacter} from 'micromark-util-classify-character'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const attention = {\r\n  name: 'attention',\r\n  tokenize: tokenizeAttention,\r\n  resolveAll: resolveAllAttention\r\n}\r\n\r\n/**\r\n * Take all events and resolve attention to emphasis or strong.\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveAllAttention(events, context) {\r\n  let index = -1\r\n  /** @type {number} */\r\n  let open\r\n  /** @type {Token} */\r\n  let group\r\n  /** @type {Token} */\r\n  let text\r\n  /** @type {Token} */\r\n  let openingSequence\r\n  /** @type {Token} */\r\n  let closingSequence\r\n  /** @type {number} */\r\n  let use\r\n  /** @type {Array<Event>} */\r\n  let nextEvents\r\n  /** @type {number} */\r\n  let offset\r\n\r\n  // Walk through all events.\r\n  //\r\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\r\n  // a bottleneck for malicious stuff.\r\n  while (++index < events.length) {\r\n    // Find a token that can close.\r\n    if (\r\n      events[index][0] === 'enter' &&\r\n      events[index][1].type === 'attentionSequence' &&\r\n      events[index][1]._close\r\n    ) {\r\n      open = index\r\n\r\n      // Now walk back to find an opener.\r\n      while (open--) {\r\n        // Find a token that can open the closer.\r\n        if (\r\n          events[open][0] === 'exit' &&\r\n          events[open][1].type === 'attentionSequence' &&\r\n          events[open][1]._open &&\r\n          // If the markers are the same:\r\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\r\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\r\n        ) {\r\n          // If the opening can close or the closing can open,\r\n          // and the close size *is not* a multiple of three,\r\n          // but the sum of the opening and closing size *is* multiple of three,\r\n          // then don’t match.\r\n          if (\r\n            (events[open][1]._close || events[index][1]._open) &&\r\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\r\n            !(\r\n              (events[open][1].end.offset -\r\n                events[open][1].start.offset +\r\n                events[index][1].end.offset -\r\n                events[index][1].start.offset) %\r\n              3\r\n            )\r\n          ) {\r\n            continue\r\n          }\r\n\r\n          // Number of markers to use from the sequence.\r\n          use =\r\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\r\n            events[index][1].end.offset - events[index][1].start.offset > 1\r\n              ? 2\r\n              : 1\r\n\r\n          const start = Object.assign({}, events[open][1].end)\r\n          const end = Object.assign({}, events[index][1].start)\r\n          movePoint(start, -use)\r\n          movePoint(end, use)\r\n\r\n          openingSequence = {\r\n            type: use > 1 ? types.strongSequence : types.emphasisSequence,\r\n            start,\r\n            end: Object.assign({}, events[open][1].end)\r\n          }\r\n          closingSequence = {\r\n            type: use > 1 ? types.strongSequence : types.emphasisSequence,\r\n            start: Object.assign({}, events[index][1].start),\r\n            end\r\n          }\r\n          text = {\r\n            type: use > 1 ? types.strongText : types.emphasisText,\r\n            start: Object.assign({}, events[open][1].end),\r\n            end: Object.assign({}, events[index][1].start)\r\n          }\r\n          group = {\r\n            type: use > 1 ? types.strong : types.emphasis,\r\n            start: Object.assign({}, openingSequence.start),\r\n            end: Object.assign({}, closingSequence.end)\r\n          }\r\n\r\n          events[open][1].end = Object.assign({}, openingSequence.start)\r\n          events[index][1].start = Object.assign({}, closingSequence.end)\r\n\r\n          nextEvents = []\r\n\r\n          // If there are more markers in the opening, add them before.\r\n          if (events[open][1].end.offset - events[open][1].start.offset) {\r\n            nextEvents = push(nextEvents, [\r\n              ['enter', events[open][1], context],\r\n              ['exit', events[open][1], context]\r\n            ])\r\n          }\r\n\r\n          // Opening.\r\n          nextEvents = push(nextEvents, [\r\n            ['enter', group, context],\r\n            ['enter', openingSequence, context],\r\n            ['exit', openingSequence, context],\r\n            ['enter', text, context]\r\n          ])\r\n\r\n          // Always populated by defaults.\r\n          assert(\r\n            context.parser.constructs.insideSpan.null,\r\n            'expected `insideSpan` to be populated'\r\n          )\r\n\r\n          // Between.\r\n          nextEvents = push(\r\n            nextEvents,\r\n            resolveAll(\r\n              context.parser.constructs.insideSpan.null,\r\n              events.slice(open + 1, index),\r\n              context\r\n            )\r\n          )\r\n\r\n          // Closing.\r\n          nextEvents = push(nextEvents, [\r\n            ['exit', text, context],\r\n            ['enter', closingSequence, context],\r\n            ['exit', closingSequence, context],\r\n            ['exit', group, context]\r\n          ])\r\n\r\n          // If there are more markers in the closing, add them after.\r\n          if (events[index][1].end.offset - events[index][1].start.offset) {\r\n            offset = 2\r\n            nextEvents = push(nextEvents, [\r\n              ['enter', events[index][1], context],\r\n              ['exit', events[index][1], context]\r\n            ])\r\n          } else {\r\n            offset = 0\r\n          }\r\n\r\n          splice(events, open - 1, index - open + 3, nextEvents)\r\n\r\n          index = open + nextEvents.length - offset - 2\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove remaining sequences.\r\n  index = -1\r\n\r\n  while (++index < events.length) {\r\n    if (events[index][1].type === 'attentionSequence') {\r\n      events[index][1].type = 'data'\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeAttention(effects, ok) {\r\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\r\n  const previous = this.previous\r\n  const before = classifyCharacter(previous)\r\n\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * Before a sequence.\r\n   *\r\n   * ```markdown\r\n   * > | **\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(\r\n      code === codes.asterisk || code === codes.underscore,\r\n      'expected asterisk or underscore'\r\n    )\r\n    marker = code\r\n    effects.enter('attentionSequence')\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   * In a sequence.\r\n   *\r\n   * ```markdown\r\n   * > | **\r\n   *     ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n\r\n    const token = effects.exit('attentionSequence')\r\n\r\n    // To do: next major: move this to resolver, just like `markdown-rs`.\r\n    const after = classifyCharacter(code)\r\n\r\n    // Always populated by defaults.\r\n    assert(attentionMarkers, 'expected `attentionMarkers` to be populated')\r\n\r\n    const open =\r\n      !after ||\r\n      (after === constants.characterGroupPunctuation && before) ||\r\n      attentionMarkers.includes(code)\r\n    const close =\r\n      !before ||\r\n      (before === constants.characterGroupPunctuation && after) ||\r\n      attentionMarkers.includes(previous)\r\n\r\n    token._open = Boolean(\r\n      marker === codes.asterisk ? open : open && (before || !close)\r\n    )\r\n    token._close = Boolean(\r\n      marker === codes.asterisk ? close : close && (after || !open)\r\n    )\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Move a point a bit.\r\n *\r\n * Note: `move` only works inside lines! It’s not possible to move past other\r\n * chunks (replacement characters, tabs, or line endings).\r\n *\r\n * @param {Point} point\r\n * @param {number} offset\r\n * @returns {void}\r\n */\r\nfunction movePoint(point, offset) {\r\n  point.column += offset\r\n  point.offset += offset\r\n  point._bufferIndex += offset\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  asciiAtext,\r\n  asciiControl\r\n} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const autolink = {name: 'autolink', tokenize: tokenizeAutolink}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeAutolink(effects, ok, nok) {\r\n  let size = 0\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of an autolink.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *      ^\r\n   * > | a<user@example.com>b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.lessThan, 'expected `<`')\r\n    effects.enter(types.autolink)\r\n    effects.enter(types.autolinkMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.autolinkMarker)\r\n    effects.enter(types.autolinkProtocol)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *       ^\r\n   * > | a<user@example.com>b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return schemeOrEmailAtext\r\n    }\r\n\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * At second byte of protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function schemeOrEmailAtext(code) {\r\n    // ASCII alphanumeric and `+`, `-`, and `.`.\r\n    if (\r\n      code === codes.plusSign ||\r\n      code === codes.dash ||\r\n      code === codes.dot ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      // Count the previous alphabetical from `open` too.\r\n      size = 1\r\n      return schemeInsideOrEmailAtext(code)\r\n    }\r\n\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * In ambiguous protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function schemeInsideOrEmailAtext(code) {\r\n    if (code === codes.colon) {\r\n      effects.consume(code)\r\n      size = 0\r\n      return urlInside\r\n    }\r\n\r\n    // ASCII alphanumeric and `+`, `-`, and `.`.\r\n    if (\r\n      (code === codes.plusSign ||\r\n        code === codes.dash ||\r\n        code === codes.dot ||\r\n        asciiAlphanumeric(code)) &&\r\n      size++ < constants.autolinkSchemeSizeMax\r\n    ) {\r\n      effects.consume(code)\r\n      return schemeInsideOrEmailAtext\r\n    }\r\n\r\n    size = 0\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * After protocol, in URL.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function urlInside(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.exit(types.autolinkProtocol)\r\n      effects.enter(types.autolinkMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.autolinkMarker)\r\n      effects.exit(types.autolink)\r\n      return ok\r\n    }\r\n\r\n    // ASCII control, space, or `<`.\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.space ||\r\n      code === codes.lessThan ||\r\n      asciiControl(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return urlInside\r\n  }\r\n\r\n  /**\r\n   * In email atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailAtext(code) {\r\n    if (code === codes.atSign) {\r\n      effects.consume(code)\r\n      return emailAtSignOrDot\r\n    }\r\n\r\n    if (asciiAtext(code)) {\r\n      effects.consume(code)\r\n      return emailAtext\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In label, after at-sign or dot.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                 ^       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailAtSignOrDot(code) {\r\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\r\n  }\r\n\r\n  /**\r\n   * In label, where `.` and `>` are allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailLabel(code) {\r\n    if (code === codes.dot) {\r\n      effects.consume(code)\r\n      size = 0\r\n      return emailAtSignOrDot\r\n    }\r\n\r\n    if (code === codes.greaterThan) {\r\n      // Exit, then change the token type.\r\n      effects.exit(types.autolinkProtocol).type = types.autolinkEmail\r\n      effects.enter(types.autolinkMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.autolinkMarker)\r\n      effects.exit(types.autolink)\r\n      return ok\r\n    }\r\n\r\n    return emailValue(code)\r\n  }\r\n\r\n  /**\r\n   * In label, where `.` and `>` are *not* allowed.\r\n   *\r\n   * Though, this is also used in `emailLabel` to parse other values.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@ex-ample.com>b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailValue(code) {\r\n    // ASCII alphanumeric or `-`.\r\n    if (\r\n      (code === codes.dash || asciiAlphanumeric(code)) &&\r\n      size++ < constants.autolinkDomainSizeMax\r\n    ) {\r\n      const next = code === codes.dash ? emailValue : emailLabel\r\n      effects.consume(code)\r\n      return next\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Exiter} Exiter\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownSpace} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const blockQuote = {\r\n  name: 'blockQuote',\r\n  tokenize: tokenizeBlockQuoteStart,\r\n  continuation: {tokenize: tokenizeBlockQuoteContinuation},\r\n  exit\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of block quote.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === codes.greaterThan) {\r\n      const state = self.containerState\r\n\r\n      assert(state, 'expected `containerState` to be defined in container')\r\n\r\n      if (!state.open) {\r\n        effects.enter(types.blockQuote, {_container: true})\r\n        state.open = true\r\n      }\r\n\r\n      effects.enter(types.blockQuotePrefix)\r\n      effects.enter(types.blockQuoteMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.blockQuoteMarker)\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `>`, before optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(types.blockQuotePrefixWhitespace)\r\n      effects.consume(code)\r\n      effects.exit(types.blockQuotePrefixWhitespace)\r\n      effects.exit(types.blockQuotePrefix)\r\n      return ok\r\n    }\r\n\r\n    effects.exit(types.blockQuotePrefix)\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Start of block quote continuation.\r\n *\r\n * ```markdown\r\n *   | > a\r\n * > | > b\r\n *     ^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return contStart\r\n\r\n  /**\r\n   * Start of block quote continuation.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contStart(code) {\r\n    if (markdownSpace(code)) {\r\n      // Always populated by defaults.\r\n      assert(\r\n        self.parser.constructs.disable.null,\r\n        'expected `disable.null` to be populated'\r\n      )\r\n\r\n      return factorySpace(\r\n        effects,\r\n        contBefore,\r\n        types.linePrefix,\r\n        self.parser.constructs.disable.null.includes('codeIndented')\r\n          ? undefined\r\n          : constants.tabSize\r\n      )(code)\r\n    }\r\n\r\n    return contBefore(code)\r\n  }\r\n\r\n  /**\r\n   * At `>`, after optional whitespace.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contBefore(code) {\r\n    return effects.attempt(blockQuote, ok, nok)(code)\r\n  }\r\n}\r\n\r\n/** @type {Exiter} */\r\nfunction exit(effects) {\r\n  effects.exit(types.blockQuote)\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {asciiPunctuation} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const characterEscape = {\r\n  name: 'characterEscape',\r\n  tokenize: tokenizeCharacterEscape\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCharacterEscape(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of character escape.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.backslash, 'expected `\\\\`')\r\n    effects.enter(types.characterEscape)\r\n    effects.enter(types.escapeMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.escapeMarker)\r\n    return inside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at punctuation.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    // ASCII punctuation.\r\n    if (asciiPunctuation(code)) {\r\n      effects.enter(types.characterEscapeValue)\r\n      effects.consume(code)\r\n      effects.exit(types.characterEscapeValue)\r\n      effects.exit(types.characterEscape)\r\n      return ok\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {\r\n  asciiAlphanumeric,\r\n  asciiDigit,\r\n  asciiHexDigit\r\n} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const characterReference = {\r\n  name: 'characterReference',\r\n  tokenize: tokenizeCharacterReference\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCharacterReference(effects, ok, nok) {\r\n  const self = this\r\n  let size = 0\r\n  /** @type {number} */\r\n  let max\r\n  /** @type {(code: Code) => boolean} */\r\n  let test\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of character reference.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *      ^\r\n   * > | a&#123;b\r\n   *      ^\r\n   * > | a&#x9;b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.ampersand, 'expected `&`')\r\n    effects.enter(types.characterReference)\r\n    effects.enter(types.characterReferenceMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.characterReferenceMarker)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `&`, at `#` for numeric references or alphanumeric for named\r\n   * references.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^\r\n   * > | a&#123;b\r\n   *       ^\r\n   * > | a&#x9;b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.numberSign) {\r\n      effects.enter(types.characterReferenceMarkerNumeric)\r\n      effects.consume(code)\r\n      effects.exit(types.characterReferenceMarkerNumeric)\r\n      return numeric\r\n    }\r\n\r\n    effects.enter(types.characterReferenceValue)\r\n    max = constants.characterReferenceNamedSizeMax\r\n    test = asciiAlphanumeric\r\n    return value(code)\r\n  }\r\n\r\n  /**\r\n   * After `#`, at `x` for hexadecimals or digit for decimals.\r\n   *\r\n   * ```markdown\r\n   * > | a&#123;b\r\n   *        ^\r\n   * > | a&#x9;b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function numeric(code) {\r\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\r\n      effects.enter(types.characterReferenceMarkerHexadecimal)\r\n      effects.consume(code)\r\n      effects.exit(types.characterReferenceMarkerHexadecimal)\r\n      effects.enter(types.characterReferenceValue)\r\n      max = constants.characterReferenceHexadecimalSizeMax\r\n      test = asciiHexDigit\r\n      return value\r\n    }\r\n\r\n    effects.enter(types.characterReferenceValue)\r\n    max = constants.characterReferenceDecimalSizeMax\r\n    test = asciiDigit\r\n    return value(code)\r\n  }\r\n\r\n  /**\r\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\r\n   *\r\n   * The character reference kind defines what and how many characters are\r\n   * allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^^^\r\n   * > | a&#123;b\r\n   *        ^^^\r\n   * > | a&#x9;b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function value(code) {\r\n    if (code === codes.semicolon && size) {\r\n      const token = effects.exit(types.characterReferenceValue)\r\n\r\n      if (\r\n        test === asciiAlphanumeric &&\r\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\r\n      ) {\r\n        return nok(code)\r\n      }\r\n\r\n      // To do: `markdown-rs` uses a different name:\r\n      // `CharacterReferenceMarkerSemi`.\r\n      effects.enter(types.characterReferenceMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.characterReferenceMarker)\r\n      effects.exit(types.characterReference)\r\n      return ok\r\n    }\r\n\r\n    if (test(code) && size++ < max) {\r\n      effects.consume(code)\r\n      return value\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nconst nonLazyContinuation = {\r\n  tokenize: tokenizeNonLazyContinuation,\r\n  partial: true\r\n}\r\n\r\n/** @type {Construct} */\r\nexport const codeFenced = {\r\n  name: 'codeFenced',\r\n  tokenize: tokenizeCodeFenced,\r\n  concrete: true\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeFenced(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {Construct} */\r\n  const closeStart = {tokenize: tokenizeCloseStart, partial: true}\r\n  let initialPrefix = 0\r\n  let sizeOpen = 0\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of code.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *     ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse whitespace like `markdown-rs`.\r\n    return beforeSequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after prefix, at sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *     ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeSequenceOpen(code) {\r\n    assert(\r\n      code === codes.graveAccent || code === codes.tilde,\r\n      'expected `` ` `` or `~`'\r\n    )\r\n\r\n    const tail = self.events[self.events.length - 1]\r\n    initialPrefix =\r\n      tail && tail[1].type === types.linePrefix\r\n        ? tail[2].sliceSerialize(tail[1], true).length\r\n        : 0\r\n\r\n    marker = code\r\n    effects.enter(types.codeFenced)\r\n    effects.enter(types.codeFencedFence)\r\n    effects.enter(types.codeFencedFenceSequence)\r\n    return sequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *      ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (code === marker) {\r\n      sizeOpen++\r\n      effects.consume(code)\r\n      return sequenceOpen\r\n    }\r\n\r\n    if (sizeOpen < constants.codeFencedSequenceSizeMin) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.exit(types.codeFencedFenceSequence)\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, infoBefore, types.whitespace)(code)\r\n      : infoBefore(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after the sequence (and optional whitespace), before info.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *        ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function infoBefore(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.codeFencedFence)\r\n      return self.interrupt\r\n        ? ok(code)\r\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\r\n    }\r\n\r\n    effects.enter(types.codeFencedFenceInfo)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return info(code)\r\n  }\r\n\r\n  /**\r\n   * In info.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *        ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function info(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(types.codeFencedFenceInfo)\r\n      return infoBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(types.codeFencedFenceInfo)\r\n      return factorySpace(effects, metaBefore, types.whitespace)(code)\r\n    }\r\n\r\n    if (code === codes.graveAccent && code === marker) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return info\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after info and whitespace, before meta.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js eval\r\n   *           ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function metaBefore(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return infoBefore(code)\r\n    }\r\n\r\n    effects.enter(types.codeFencedFenceMeta)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return meta(code)\r\n  }\r\n\r\n  /**\r\n   * In meta.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js eval\r\n   *           ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function meta(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(types.codeFencedFenceMeta)\r\n      return infoBefore(code)\r\n    }\r\n\r\n    if (code === codes.graveAccent && code === marker) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return meta\r\n  }\r\n\r\n  /**\r\n   * At eol/eof in code, before a non-lazy closing fence or content.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *          ^\r\n   * > | alert(1)\r\n   *             ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atNonLazyBreak(code) {\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    return effects.attempt(closeStart, after, contentBefore)(code)\r\n  }\r\n\r\n  /**\r\n   * Before code content, not a closing fence, at eol.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *             ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentBefore(code) {\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return contentStart\r\n  }\r\n\r\n  /**\r\n   * Before code content, not a closing fence.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentStart(code) {\r\n    return initialPrefix > 0 && markdownSpace(code)\r\n      ? factorySpace(\r\n          effects,\r\n          beforeContentChunk,\r\n          types.linePrefix,\r\n          initialPrefix + 1\r\n        )(code)\r\n      : beforeContentChunk(code)\r\n  }\r\n\r\n  /**\r\n   * Before code content, after optional prefix.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeContentChunk(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\r\n    }\r\n\r\n    effects.enter(types.codeFlowValue)\r\n    return contentChunk(code)\r\n  }\r\n\r\n  /**\r\n   * In code content.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^^^^^^^^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentChunk(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.codeFlowValue)\r\n      return beforeContentChunk(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return contentChunk\r\n  }\r\n\r\n  /**\r\n   * After code.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   *   | alert(1)\r\n   * > | ~~~\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    effects.exit(types.codeFenced)\r\n    return ok(code)\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   * @type {Tokenizer}\r\n   */\r\n  function tokenizeCloseStart(effects, ok, nok) {\r\n    let size = 0\r\n\r\n    return startBefore\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @type {State}\r\n     */\r\n    function startBefore(code) {\r\n      assert(markdownLineEnding(code), 'expected eol')\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return start\r\n    }\r\n\r\n    /**\r\n     * Before closing fence, at optional whitespace.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function start(code) {\r\n      // Always populated by defaults.\r\n      assert(\r\n        self.parser.constructs.disable.null,\r\n        'expected `disable.null` to be populated'\r\n      )\r\n\r\n      // To do: `enter` here or in next state?\r\n      effects.enter(types.codeFencedFence)\r\n      return markdownSpace(code)\r\n        ? factorySpace(\r\n            effects,\r\n            beforeSequenceClose,\r\n            types.linePrefix,\r\n            self.parser.constructs.disable.null.includes('codeIndented')\r\n              ? undefined\r\n              : constants.tabSize\r\n          )(code)\r\n        : beforeSequenceClose(code)\r\n    }\r\n\r\n    /**\r\n     * In closing fence, after optional whitespace, at sequence.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function beforeSequenceClose(code) {\r\n      if (code === marker) {\r\n        effects.enter(types.codeFencedFenceSequence)\r\n        return sequenceClose(code)\r\n      }\r\n\r\n      return nok(code)\r\n    }\r\n\r\n    /**\r\n     * In closing fence sequence.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function sequenceClose(code) {\r\n      if (code === marker) {\r\n        size++\r\n        effects.consume(code)\r\n        return sequenceClose\r\n      }\r\n\r\n      if (size >= sizeOpen) {\r\n        effects.exit(types.codeFencedFenceSequence)\r\n        return markdownSpace(code)\r\n          ? factorySpace(effects, sequenceCloseAfter, types.whitespace)(code)\r\n          : sequenceCloseAfter(code)\r\n      }\r\n\r\n      return nok(code)\r\n    }\r\n\r\n    /**\r\n     * After closing fence sequence, after optional whitespace.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *        ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function sequenceCloseAfter(code) {\r\n      if (code === codes.eof || markdownLineEnding(code)) {\r\n        effects.exit(types.codeFencedFence)\r\n        return ok(code)\r\n      }\r\n\r\n      return nok(code)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return lineStart\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineStart(code) {\r\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const codeIndented = {\r\n  name: 'codeIndented',\r\n  tokenize: tokenizeCodeIndented\r\n}\r\n\r\n/** @type {Construct} */\r\nconst furtherStart = {tokenize: tokenizeFurtherStart, partial: true}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeIndented(effects, ok, nok) {\r\n  const self = this\r\n  return start\r\n\r\n  /**\r\n   * Start of code (indented).\r\n   *\r\n   * > **Parsing note**: it is not needed to check if this first line is a\r\n   * > filled line (that it has a non-whitespace character), because blank lines\r\n   * > are parsed already, so we never run into that.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: manually check if interrupting like `markdown-rs`.\r\n    assert(markdownSpace(code))\r\n    effects.enter(types.codeIndented)\r\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\r\n    // so that we can drop the next state.\r\n    return factorySpace(\r\n      effects,\r\n      afterPrefix,\r\n      types.linePrefix,\r\n      constants.tabSize + 1\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === types.linePrefix &&\r\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\r\n      ? atBreak(code)\r\n      : nok(code)\r\n  }\r\n\r\n  /**\r\n   * At a break.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === codes.eof) {\r\n      return after(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      return effects.attempt(furtherStart, atBreak, after)(code)\r\n    }\r\n\r\n    effects.enter(types.codeFlowValue)\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   * In code content.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.codeFlowValue)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return inside\r\n  }\r\n\r\n  /** @type {State} */\r\n  function after(code) {\r\n    effects.exit(types.codeIndented)\r\n    // To do: allow interrupting like `markdown-rs`.\r\n    // Feel free to interrupt.\r\n    // tokenizer.interrupt = false\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeFurtherStart(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return furtherStart\r\n\r\n  /**\r\n   * At eol, trying to parse another indent.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *            ^\r\n   *   |     bbb\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function furtherStart(code) {\r\n    // To do: improve `lazy` / `pierce` handling.\r\n    // If this is a lazy line, it can’t be code.\r\n    if (self.parser.lazy[self.now().line]) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return furtherStart\r\n    }\r\n\r\n    // To do: the code here in `micromark-js` is a bit different from\r\n    // `markdown-rs` because there it can attempt spaces.\r\n    // We can’t yet.\r\n    //\r\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\r\n    // so that we can drop the next state.\r\n    return factorySpace(\r\n      effects,\r\n      afterPrefix,\r\n      types.linePrefix,\r\n      constants.tabSize + 1\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === types.linePrefix &&\r\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\r\n      ? ok(code)\r\n      : markdownLineEnding(code)\r\n      ? furtherStart(code)\r\n      : nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Previous} Previous\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const codeText = {\r\n  name: 'codeText',\r\n  tokenize: tokenizeCodeText,\r\n  resolve: resolveCodeText,\r\n  previous\r\n}\r\n\r\n// To do: next major: don’t resolve, like `markdown-rs`.\r\n/** @type {Resolver} */\r\nfunction resolveCodeText(events) {\r\n  let tailExitIndex = events.length - 4\r\n  let headEnterIndex = 3\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {number | undefined} */\r\n  let enter\r\n\r\n  // If we start and end with an EOL or a space.\r\n  if (\r\n    (events[headEnterIndex][1].type === types.lineEnding ||\r\n      events[headEnterIndex][1].type === 'space') &&\r\n    (events[tailExitIndex][1].type === types.lineEnding ||\r\n      events[tailExitIndex][1].type === 'space')\r\n  ) {\r\n    index = headEnterIndex\r\n\r\n    // And we have data.\r\n    while (++index < tailExitIndex) {\r\n      if (events[index][1].type === types.codeTextData) {\r\n        // Then we have padding.\r\n        events[headEnterIndex][1].type = types.codeTextPadding\r\n        events[tailExitIndex][1].type = types.codeTextPadding\r\n        headEnterIndex += 2\r\n        tailExitIndex -= 2\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // Merge adjacent spaces and data.\r\n  index = headEnterIndex - 1\r\n  tailExitIndex++\r\n\r\n  while (++index <= tailExitIndex) {\r\n    if (enter === undefined) {\r\n      if (\r\n        index !== tailExitIndex &&\r\n        events[index][1].type !== types.lineEnding\r\n      ) {\r\n        enter = index\r\n      }\r\n    } else if (\r\n      index === tailExitIndex ||\r\n      events[index][1].type === types.lineEnding\r\n    ) {\r\n      events[enter][1].type = types.codeTextData\r\n\r\n      if (index !== enter + 2) {\r\n        events[enter][1].end = events[index - 1][1].end\r\n        events.splice(enter + 2, index - enter - 2)\r\n        tailExitIndex -= index - enter - 2\r\n        index = enter + 2\r\n      }\r\n\r\n      enter = undefined\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Previous}\r\n */\r\nfunction previous(code) {\r\n  // If there is a previous code, there will always be a tail.\r\n  return (\r\n    code !== codes.graveAccent ||\r\n    this.events[this.events.length - 1][1].type === types.characterEscape\r\n  )\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeText(effects, ok, nok) {\r\n  const self = this\r\n  let sizeOpen = 0\r\n  /** @type {number} */\r\n  let size\r\n  /** @type {Token} */\r\n  let token\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of code (text).\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *     ^\r\n   * > | \\`a`\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.graveAccent, 'expected `` ` ``')\r\n    assert(previous.call(self, self.previous), 'expected correct previous')\r\n    effects.enter(types.codeText)\r\n    effects.enter(types.codeTextSequence)\r\n    return sequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening sequence.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (code === codes.graveAccent) {\r\n      effects.consume(code)\r\n      sizeOpen++\r\n      return sequenceOpen\r\n    }\r\n\r\n    effects.exit(types.codeTextSequence)\r\n    return between(code)\r\n  }\r\n\r\n  /**\r\n   * Between something and something else.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *      ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function between(code) {\r\n    // EOF.\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    // To do: next major: don’t do spaces in resolve, but when compiling,\r\n    // like `markdown-rs`.\r\n    // Tabs don’t work, and virtual spaces don’t make sense.\r\n    if (code === codes.space) {\r\n      effects.enter('space')\r\n      effects.consume(code)\r\n      effects.exit('space')\r\n      return between\r\n    }\r\n\r\n    // Closing fence? Could also be data.\r\n    if (code === codes.graveAccent) {\r\n      token = effects.enter(types.codeTextSequence)\r\n      size = 0\r\n      return sequenceClose(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return between\r\n    }\r\n\r\n    // Data.\r\n    effects.enter(types.codeTextData)\r\n    return data(code)\r\n  }\r\n\r\n  /**\r\n   * In data.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function data(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.space ||\r\n      code === codes.graveAccent ||\r\n      markdownLineEnding(code)\r\n    ) {\r\n      effects.exit(types.codeTextData)\r\n      return between(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n\r\n  /**\r\n   * In closing sequence.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceClose(code) {\r\n    // More.\r\n    if (code === codes.graveAccent) {\r\n      effects.consume(code)\r\n      size++\r\n      return sequenceClose\r\n    }\r\n\r\n    // Done!\r\n    if (size === sizeOpen) {\r\n      effects.exit(types.codeTextSequence)\r\n      effects.exit(types.codeText)\r\n      return ok(code)\r\n    }\r\n\r\n    // More or less accents: mark as data.\r\n    token.type = types.codeTextData\r\n    return data(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Chunk} Chunk\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Token} Token\r\n */\r\n\r\nimport {splice} from 'micromark-util-chunked'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/**\r\n * Tokenize subcontent.\r\n *\r\n * @param {Array<Event>} events\r\n *   List of events.\r\n * @returns {boolean}\r\n *   Whether subtokens were found.\r\n */\r\nexport function subtokenize(events) {\r\n  /** @type {Record<string, number>} */\r\n  const jumps = {}\r\n  let index = -1\r\n  /** @type {Event} */\r\n  let event\r\n  /** @type {number | undefined} */\r\n  let lineIndex\r\n  /** @type {number} */\r\n  let otherIndex\r\n  /** @type {Event} */\r\n  let otherEvent\r\n  /** @type {Array<Event>} */\r\n  let parameters\r\n  /** @type {Array<Event>} */\r\n  let subevents\r\n  /** @type {boolean | undefined} */\r\n  let more\r\n\r\n  while (++index < events.length) {\r\n    while (index in jumps) {\r\n      index = jumps[index]\r\n    }\r\n\r\n    event = events[index]\r\n\r\n    // Add a hook for the GFM tasklist extension, which needs to know if text\r\n    // is in the first content of a list item.\r\n    if (\r\n      index &&\r\n      event[1].type === types.chunkFlow &&\r\n      events[index - 1][1].type === types.listItemPrefix\r\n    ) {\r\n      assert(event[1]._tokenizer, 'expected `_tokenizer` on subtokens')\r\n      subevents = event[1]._tokenizer.events\r\n      otherIndex = 0\r\n\r\n      if (\r\n        otherIndex < subevents.length &&\r\n        subevents[otherIndex][1].type === types.lineEndingBlank\r\n      ) {\r\n        otherIndex += 2\r\n      }\r\n\r\n      if (\r\n        otherIndex < subevents.length &&\r\n        subevents[otherIndex][1].type === types.content\r\n      ) {\r\n        while (++otherIndex < subevents.length) {\r\n          if (subevents[otherIndex][1].type === types.content) {\r\n            break\r\n          }\r\n\r\n          if (subevents[otherIndex][1].type === types.chunkText) {\r\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\r\n            otherIndex++\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Enter.\r\n    if (event[0] === 'enter') {\r\n      if (event[1].contentType) {\r\n        Object.assign(jumps, subcontent(events, index))\r\n        index = jumps[index]\r\n        more = true\r\n      }\r\n    }\r\n    // Exit.\r\n    else if (event[1]._container) {\r\n      otherIndex = index\r\n      lineIndex = undefined\r\n\r\n      while (otherIndex--) {\r\n        otherEvent = events[otherIndex]\r\n\r\n        if (\r\n          otherEvent[1].type === types.lineEnding ||\r\n          otherEvent[1].type === types.lineEndingBlank\r\n        ) {\r\n          if (otherEvent[0] === 'enter') {\r\n            if (lineIndex) {\r\n              events[lineIndex][1].type = types.lineEndingBlank\r\n            }\r\n\r\n            otherEvent[1].type = types.lineEnding\r\n            lineIndex = otherIndex\r\n          }\r\n        } else {\r\n          break\r\n        }\r\n      }\r\n\r\n      if (lineIndex) {\r\n        // Fix position.\r\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\r\n\r\n        // Switch container exit w/ line endings.\r\n        parameters = events.slice(lineIndex, index)\r\n        parameters.unshift(event)\r\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\r\n      }\r\n    }\r\n  }\r\n\r\n  return !more\r\n}\r\n\r\n/**\r\n * Tokenize embedded tokens.\r\n *\r\n * @param {Array<Event>} events\r\n * @param {number} eventIndex\r\n * @returns {Record<string, number>}\r\n */\r\nfunction subcontent(events, eventIndex) {\r\n  const token = events[eventIndex][1]\r\n  const context = events[eventIndex][2]\r\n  let startPosition = eventIndex - 1\r\n  /** @type {Array<number>} */\r\n  const startPositions = []\r\n  assert(token.contentType, 'expected `contentType` on subtokens')\r\n  const tokenizer =\r\n    token._tokenizer || context.parser[token.contentType](token.start)\r\n  const childEvents = tokenizer.events\r\n  /** @type {Array<[number, number]>} */\r\n  const jumps = []\r\n  /** @type {Record<string, number>} */\r\n  const gaps = {}\r\n  /** @type {Array<Chunk>} */\r\n  let stream\r\n  /** @type {Token | undefined} */\r\n  let previous\r\n  let index = -1\r\n  /** @type {Token | undefined} */\r\n  let current = token\r\n  let adjust = 0\r\n  let start = 0\r\n  const breaks = [start]\r\n\r\n  // Loop forward through the linked tokens to pass them in order to the\r\n  // subtokenizer.\r\n  while (current) {\r\n    // Find the position of the event for this token.\r\n    while (events[++startPosition][1] !== current) {\r\n      // Empty.\r\n    }\r\n\r\n    assert(\r\n      !previous || current.previous === previous,\r\n      'expected previous to match'\r\n    )\r\n    assert(!previous || previous.next === current, 'expected next to match')\r\n\r\n    startPositions.push(startPosition)\r\n\r\n    if (!current._tokenizer) {\r\n      stream = context.sliceStream(current)\r\n\r\n      if (!current.next) {\r\n        stream.push(codes.eof)\r\n      }\r\n\r\n      if (previous) {\r\n        tokenizer.defineSkip(current.start)\r\n      }\r\n\r\n      if (current._isInFirstContentOfListItem) {\r\n        tokenizer._gfmTasklistFirstContentOfListItem = true\r\n      }\r\n\r\n      tokenizer.write(stream)\r\n\r\n      if (current._isInFirstContentOfListItem) {\r\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\r\n      }\r\n    }\r\n\r\n    // Unravel the next token.\r\n    previous = current\r\n    current = current.next\r\n  }\r\n\r\n  // Now, loop back through all events (and linked tokens), to figure out which\r\n  // parts belong where.\r\n  current = token\r\n\r\n  while (++index < childEvents.length) {\r\n    if (\r\n      // Find a void token that includes a break.\r\n      childEvents[index][0] === 'exit' &&\r\n      childEvents[index - 1][0] === 'enter' &&\r\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\r\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\r\n    ) {\r\n      assert(current, 'expected a current token')\r\n      start = index + 1\r\n      breaks.push(start)\r\n      // Help GC.\r\n      current._tokenizer = undefined\r\n      current.previous = undefined\r\n      current = current.next\r\n    }\r\n  }\r\n\r\n  // Help GC.\r\n  tokenizer.events = []\r\n\r\n  // If there’s one more token (which is the cases for lines that end in an\r\n  // EOF), that’s perfect: the last point we found starts it.\r\n  // If there isn’t then make sure any remaining content is added to it.\r\n  if (current) {\r\n    // Help GC.\r\n    current._tokenizer = undefined\r\n    current.previous = undefined\r\n    assert(!current.next, 'expected no next token')\r\n  } else {\r\n    breaks.pop()\r\n  }\r\n\r\n  // Now splice the events from the subtokenizer into the current events,\r\n  // moving back to front so that splice indices aren’t affected.\r\n  index = breaks.length\r\n\r\n  while (index--) {\r\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\r\n    const start = startPositions.pop()\r\n    assert(start !== undefined, 'expected a start position when splicing')\r\n    jumps.unshift([start, start + slice.length - 1])\r\n    splice(events, start, 2, slice)\r\n  }\r\n\r\n  index = -1\r\n\r\n  while (++index < jumps.length) {\r\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\r\n    adjust += jumps[index][1] - jumps[index][0] - 1\r\n  }\r\n\r\n  return gaps\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {subtokenize} from 'micromark-util-subtokenize'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/**\r\n * No name because it must not be turned off.\r\n * @type {Construct}\r\n */\r\nexport const content = {tokenize: tokenizeContent, resolve: resolveContent}\r\n\r\n/** @type {Construct} */\r\nconst continuationConstruct = {tokenize: tokenizeContinuation, partial: true}\r\n\r\n/**\r\n * Content is transparent: it’s parsed right now. That way, definitions are also\r\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveContent(events) {\r\n  subtokenize(events)\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContent(effects, ok) {\r\n  /** @type {Token | undefined} */\r\n  let previous\r\n\r\n  return chunkStart\r\n\r\n  /**\r\n   * Before a content chunk.\r\n   *\r\n   * ```markdown\r\n   * > | abc\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function chunkStart(code) {\r\n    assert(\r\n      code !== codes.eof && !markdownLineEnding(code),\r\n      'expected no eof or eol'\r\n    )\r\n\r\n    effects.enter(types.content)\r\n    previous = effects.enter(types.chunkContent, {\r\n      contentType: constants.contentTypeContent\r\n    })\r\n    return chunkInside(code)\r\n  }\r\n\r\n  /**\r\n   * In a content chunk.\r\n   *\r\n   * ```markdown\r\n   * > | abc\r\n   *     ^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function chunkInside(code) {\r\n    if (code === codes.eof) {\r\n      return contentEnd(code)\r\n    }\r\n\r\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\r\n    // is stitched together resolving.\r\n    if (markdownLineEnding(code)) {\r\n      return effects.check(\r\n        continuationConstruct,\r\n        contentContinue,\r\n        contentEnd\r\n      )(code)\r\n    }\r\n\r\n    // Data.\r\n    effects.consume(code)\r\n    return chunkInside\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentEnd(code) {\r\n    effects.exit(types.chunkContent)\r\n    effects.exit(types.content)\r\n    return ok(code)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentContinue(code) {\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.consume(code)\r\n    effects.exit(types.chunkContent)\r\n    assert(previous, 'expected previous token')\r\n    previous.next = effects.enter(types.chunkContent, {\r\n      contentType: constants.contentTypeContent,\r\n      previous\r\n    })\r\n    previous = previous.next\r\n    return chunkInside\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContinuation(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return startLookahead\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function startLookahead(code) {\r\n    assert(markdownLineEnding(code), 'expected a line ending')\r\n    effects.exit(types.chunkContent)\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return factorySpace(effects, prefixed, types.linePrefix)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function prefixed(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return nok(code)\r\n    }\r\n\r\n    // Always populated by defaults.\r\n    assert(\r\n      self.parser.constructs.disable.null,\r\n      'expected `disable.null` to be populated'\r\n    )\r\n\r\n    const tail = self.events[self.events.length - 1]\r\n\r\n    if (\r\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\r\n      tail &&\r\n      tail[1].type === types.linePrefix &&\r\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\r\n    ) {\r\n      return ok(code)\r\n    }\r\n\r\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {\r\n  asciiControl,\r\n  markdownLineEndingOrSpace,\r\n  markdownLineEnding\r\n} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\n\r\n/**\r\n * Parse destinations.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * <a>\r\n * <a\\>b>\r\n * <a b>\r\n * <a)>\r\n * a\r\n * a\\)b\r\n * a(b)c\r\n * a(b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type for whole (`<a>` or `b`).\r\n * @param {TokenType} literalType\r\n *   Type when enclosed (`<a>`).\r\n * @param {TokenType} literalMarkerType\r\n *   Type for enclosing (`<` and `>`).\r\n * @param {TokenType} rawType\r\n *   Type when not enclosed (`b`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a` or `b`).\r\n * @param {number | undefined} [max=Infinity]\r\n *   Depth of nested parens (inclusive).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function factoryDestination(\r\n  effects,\r\n  ok,\r\n  nok,\r\n  type,\r\n  literalType,\r\n  literalMarkerType,\r\n  rawType,\r\n  stringType,\r\n  max\r\n) {\r\n  const limit = max || Number.POSITIVE_INFINITY\r\n  let balance = 0\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *     ^\r\n   * > | aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === codes.lessThan) {\r\n      effects.enter(type)\r\n      effects.enter(literalType)\r\n      effects.enter(literalMarkerType)\r\n      effects.consume(code)\r\n      effects.exit(literalMarkerType)\r\n      return enclosedBefore\r\n    }\r\n\r\n    // ASCII control, space, closing paren.\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.space ||\r\n      code === codes.rightParenthesis ||\r\n      asciiControl(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.enter(type)\r\n    effects.enter(rawType)\r\n    effects.enter(stringType)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return raw(code)\r\n  }\r\n\r\n  /**\r\n   * After `<`, at an enclosed destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosedBefore(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.enter(literalMarkerType)\r\n      effects.consume(code)\r\n      effects.exit(literalMarkerType)\r\n      effects.exit(literalType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    effects.enter(stringType)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return enclosed(code)\r\n  }\r\n\r\n  /**\r\n   * In enclosed destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosed(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(stringType)\r\n      return enclosedBefore(code)\r\n    }\r\n\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.lessThan ||\r\n      markdownLineEnding(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === codes.backslash ? enclosedEscape : enclosed\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | <a\\*a>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosedEscape(code) {\r\n    if (\r\n      code === codes.lessThan ||\r\n      code === codes.greaterThan ||\r\n      code === codes.backslash\r\n    ) {\r\n      effects.consume(code)\r\n      return enclosed\r\n    }\r\n\r\n    return enclosed(code)\r\n  }\r\n\r\n  /**\r\n   * In raw destination.\r\n   *\r\n   * ```markdown\r\n   * > | aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function raw(code) {\r\n    if (\r\n      !balance &&\r\n      (code === codes.eof ||\r\n        code === codes.rightParenthesis ||\r\n        markdownLineEndingOrSpace(code))\r\n    ) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(stringType)\r\n      effects.exit(rawType)\r\n      effects.exit(type)\r\n      return ok(code)\r\n    }\r\n\r\n    if (balance < limit && code === codes.leftParenthesis) {\r\n      effects.consume(code)\r\n      balance++\r\n      return raw\r\n    }\r\n\r\n    if (code === codes.rightParenthesis) {\r\n      effects.consume(code)\r\n      balance--\r\n      return raw\r\n    }\r\n\r\n    // ASCII control (but *not* `\\0`) and space and `(`.\r\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\r\n    // doesn’t.\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.space ||\r\n      code === codes.leftParenthesis ||\r\n      asciiControl(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === codes.backslash ? rawEscape : raw\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at special character.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*a\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function rawEscape(code) {\r\n    if (\r\n      code === codes.leftParenthesis ||\r\n      code === codes.rightParenthesis ||\r\n      code === codes.backslash\r\n    ) {\r\n      effects.consume(code)\r\n      return raw\r\n    }\r\n\r\n    return raw(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/**\r\n * Parse labels.\r\n *\r\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * [a]\r\n * [a\r\n * b]\r\n * [a\\]b]\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n *   Tokenize context.\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole label (`[a]`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`[` and `]`).\r\n * @param {TokenType} stringType\r\n *   Type for the identifier (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\r\n  const self = this\r\n  let size = 0\r\n  /** @type {boolean} */\r\n  let seen\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    effects.enter(type)\r\n    effects.enter(markerType)\r\n    effects.consume(code)\r\n    effects.exit(markerType)\r\n    effects.enter(stringType)\r\n    return atBreak\r\n  }\r\n\r\n  /**\r\n   * In label, at something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (\r\n      size > constants.linkReferenceSizeMax ||\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      (code === codes.rightSquareBracket && !seen) ||\r\n      // To do: remove in the future once we’ve switched from\r\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\r\n      // which doesn’t need this.\r\n      // Hidden footnotes hook.\r\n      /* c8 ignore next 3 */\r\n      (code === codes.caret &&\r\n        !size &&\r\n        '_hiddenFootnoteSupport' in self.parser.constructs)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.exit(stringType)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    // To do: indent? Link chunks and EOLs together?\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return atBreak\r\n    }\r\n\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return labelInside(code)\r\n  }\r\n\r\n  /**\r\n   * In label, in text.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelInside(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.rightSquareBracket ||\r\n      markdownLineEnding(code) ||\r\n      size++ > constants.linkReferenceSizeMax\r\n    ) {\r\n      effects.exit(types.chunkString)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    if (!seen) seen = !markdownSpace(code)\r\n    return code === codes.backslash ? labelEscape : labelInside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | [a\\*a]\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEscape(code) {\r\n    if (\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.backslash ||\r\n      code === codes.rightSquareBracket\r\n    ) {\r\n      effects.consume(code)\r\n      size++\r\n      return labelInside\r\n    }\r\n\r\n    return labelInside(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\n\r\n/**\r\n * Parse titles.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * \"a\"\r\n * 'b'\r\n * (c)\r\n * \"a\r\n * b\"\r\n * 'a\r\n *     b'\r\n * (a\\)b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of title.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.leftParenthesis\r\n    ) {\r\n      effects.enter(type)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      marker = code === codes.leftParenthesis ? codes.rightParenthesis : code\r\n      return begin\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After opening marker.\r\n   *\r\n   * This is also used at the closing marker.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function begin(code) {\r\n    if (code === marker) {\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    effects.enter(stringType)\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * At something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.exit(stringType)\r\n      return begin(marker)\r\n    }\r\n\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    // Note: blank lines can’t exist in content.\r\n    if (markdownLineEnding(code)) {\r\n      // To do: use `space_or_tab_eol_with_options`, connect.\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return factorySpace(effects, atBreak, types.linePrefix)\r\n    }\r\n\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.chunkString)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === codes.backslash ? escape : inside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\\*b\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function escape(code) {\r\n    if (code === marker || code === codes.backslash) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n\r\n    return inside(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\n\r\n/**\r\n * Parse spaces and tabs.\r\n *\r\n * There is no `nok` parameter:\r\n *\r\n * *   line endings or spaces in markdown are often optional, in which case this\r\n *     factory can be used and `ok` will be switched to whether spaces were found\r\n *     or not\r\n * *   one line ending or space can be detected with\r\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @returns\r\n *   Start state.\r\n */\r\nexport function factoryWhitespace(effects, ok) {\r\n  /** @type {boolean} */\r\n  let seen\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      seen = true\r\n      return start\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(\r\n        effects,\r\n        start,\r\n        seen ? types.linePrefix : types.lineSuffix\r\n      )(code)\r\n    }\r\n\r\n    return ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factoryDestination} from 'micromark-factory-destination'\r\nimport {factoryLabel} from 'micromark-factory-label'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {factoryTitle} from 'micromark-factory-title'\r\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\r\nimport {\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const definition = {name: 'definition', tokenize: tokenizeDefinition}\r\n\r\n/** @type {Construct} */\r\nconst titleBefore = {tokenize: tokenizeTitleBefore, partial: true}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeDefinition(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {string} */\r\n  let identifier\r\n\r\n  return start\r\n\r\n  /**\r\n   * At start of a definition.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // Do not interrupt paragraphs (but do follow definitions).\r\n    // To do: do `interrupt` the way `markdown-rs` does.\r\n    // To do: parse whitespace the way `markdown-rs` does.\r\n    effects.enter(types.definition)\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    // To do: parse whitespace the way `markdown-rs` does.\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    return factoryLabel.call(\r\n      self,\r\n      effects,\r\n      labelAfter,\r\n      // Note: we don’t need to reset the way `markdown-rs` does.\r\n      nok,\r\n      types.definitionLabel,\r\n      types.definitionLabelMarker,\r\n      types.definitionLabelString\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * After label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelAfter(code) {\r\n    identifier = normalizeIdentifier(\r\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\r\n    )\r\n\r\n    if (code === codes.colon) {\r\n      effects.enter(types.definitionMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.definitionMarker)\r\n      return markerAfter\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After marker.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function markerAfter(code) {\r\n    // Note: whitespace is optional.\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, destinationBefore)(code)\r\n      : destinationBefore(code)\r\n  }\r\n\r\n  /**\r\n   * Before destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function destinationBefore(code) {\r\n    return factoryDestination(\r\n      effects,\r\n      destinationAfter,\r\n      // Note: we don’t need to reset the way `markdown-rs` does.\r\n      nok,\r\n      types.definitionDestination,\r\n      types.definitionDestinationLiteral,\r\n      types.definitionDestinationLiteralMarker,\r\n      types.definitionDestinationRaw,\r\n      types.definitionDestinationString\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * After destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function destinationAfter(code) {\r\n    return effects.attempt(titleBefore, after, after)(code)\r\n  }\r\n\r\n  /**\r\n   * After definition.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, afterWhitespace, types.whitespace)(code)\r\n      : afterWhitespace(code)\r\n  }\r\n\r\n  /**\r\n   * After definition, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterWhitespace(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.definition)\r\n\r\n      // Note: we don’t care about uniqueness.\r\n      // It’s likely that that doesn’t happen very frequently.\r\n      // It is more likely that it wastes precious time.\r\n      self.parser.defined.push(identifier)\r\n\r\n      // To do: `markdown-rs` interrupt.\r\n      // // You’d be interrupting.\r\n      // tokenizer.interrupt = true\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTitleBefore(effects, ok, nok) {\r\n  return titleBefore\r\n\r\n  /**\r\n   * After destination, at whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleBefore(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, beforeMarker)(code)\r\n      : nok(code)\r\n  }\r\n\r\n  /**\r\n   * At title.\r\n   *\r\n   * ```markdown\r\n   *   | [a]: b\r\n   * > | \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeMarker(code) {\r\n    return factoryTitle(\r\n      effects,\r\n      titleAfter,\r\n      nok,\r\n      types.definitionTitle,\r\n      types.definitionTitleMarker,\r\n      types.definitionTitleString\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * After title.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleAfter(code) {\r\n    return markdownSpace(code)\r\n      ? factorySpace(\r\n          effects,\r\n          titleAfterOptionalWhitespace,\r\n          types.whitespace\r\n        )(code)\r\n      : titleAfterOptionalWhitespace(code)\r\n  }\r\n\r\n  /**\r\n   * After title, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleAfterOptionalWhitespace(code) {\r\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const hardBreakEscape = {\r\n  name: 'hardBreakEscape',\r\n  tokenize: tokenizeHardBreakEscape\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of a hard break (escape).\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *      ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.backslash, 'expected `\\\\`')\r\n    effects.enter(types.hardBreakEscape)\r\n    effects.consume(code)\r\n    return after\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *       ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.exit(types.hardBreakEscape)\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {splice} from 'micromark-util-chunked'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const headingAtx = {\r\n  name: 'headingAtx',\r\n  tokenize: tokenizeHeadingAtx,\r\n  resolve: resolveHeadingAtx\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveHeadingAtx(events, context) {\r\n  let contentEnd = events.length - 2\r\n  let contentStart = 3\r\n  /** @type {Token} */\r\n  let content\r\n  /** @type {Token} */\r\n  let text\r\n\r\n  // Prefix whitespace, part of the opening.\r\n  if (events[contentStart][1].type === types.whitespace) {\r\n    contentStart += 2\r\n  }\r\n\r\n  // Suffix whitespace, part of the closing.\r\n  if (\r\n    contentEnd - 2 > contentStart &&\r\n    events[contentEnd][1].type === types.whitespace\r\n  ) {\r\n    contentEnd -= 2\r\n  }\r\n\r\n  if (\r\n    events[contentEnd][1].type === types.atxHeadingSequence &&\r\n    (contentStart === contentEnd - 1 ||\r\n      (contentEnd - 4 > contentStart &&\r\n        events[contentEnd - 2][1].type === types.whitespace))\r\n  ) {\r\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\r\n  }\r\n\r\n  if (contentEnd > contentStart) {\r\n    content = {\r\n      type: types.atxHeadingText,\r\n      start: events[contentStart][1].start,\r\n      end: events[contentEnd][1].end\r\n    }\r\n    text = {\r\n      type: types.chunkText,\r\n      start: events[contentStart][1].start,\r\n      end: events[contentEnd][1].end,\r\n      contentType: constants.contentTypeText\r\n    }\r\n\r\n    splice(events, contentStart, contentEnd - contentStart + 1, [\r\n      ['enter', content, context],\r\n      ['enter', text, context],\r\n      ['exit', text, context],\r\n      ['exit', content, context]\r\n    ])\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHeadingAtx(effects, ok, nok) {\r\n  let size = 0\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of a heading (atx).\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse indent like `markdown-rs`.\r\n    effects.enter(types.atxHeading)\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `#`.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    assert(code === codes.numberSign, 'expected `#`')\r\n    effects.enter(types.atxHeadingSequence)\r\n    return sequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (\r\n      code === codes.numberSign &&\r\n      size++ < constants.atxHeadingOpeningFenceSizeMax\r\n    ) {\r\n      effects.consume(code)\r\n      return sequenceOpen\r\n    }\r\n\r\n    // Always at least one `#`.\r\n    if (code === codes.eof || markdownLineEndingOrSpace(code)) {\r\n      effects.exit(types.atxHeadingSequence)\r\n      return atBreak(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === codes.numberSign) {\r\n      effects.enter(types.atxHeadingSequence)\r\n      return sequenceFurther(code)\r\n    }\r\n\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.atxHeading)\r\n      // To do: interrupt like `markdown-rs`.\r\n      // // Feel free to interrupt.\r\n      // tokenizer.interrupt = false\r\n      return ok(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, atBreak, types.whitespace)(code)\r\n    }\r\n\r\n    // To do: generate `data` tokens, add the `text` token later.\r\n    // Needs edit map, see: `markdown.rs`.\r\n    effects.enter(types.atxHeadingText)\r\n    return data(code)\r\n  }\r\n\r\n  /**\r\n   * In further sequence (after whitespace).\r\n   *\r\n   * Could be normal “visible” hashes in the heading or a final sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa ##\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceFurther(code) {\r\n    if (code === codes.numberSign) {\r\n      effects.consume(code)\r\n      return sequenceFurther\r\n    }\r\n\r\n    effects.exit(types.atxHeadingSequence)\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * In text.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function data(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.numberSign ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      effects.exit(types.atxHeadingText)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n}\r\n", "/**\r\n * List of lowercase HTML “block” tag names.\r\n *\r\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\r\n * 6).\r\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\r\n * strictly parsed.\r\n * For tag names not in this list, a more strict algorithm (condition 7) is used\r\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\r\n *\r\n * This is copied from:\r\n * <https://spec.commonmark.org/0.30/#html-blocks>.\r\n *\r\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\r\n */\r\nexport const htmlBlockNames = [\r\n  'address',\r\n  'article',\r\n  'aside',\r\n  'base',\r\n  'basefont',\r\n  'blockquote',\r\n  'body',\r\n  'caption',\r\n  'center',\r\n  'col',\r\n  'colgroup',\r\n  'dd',\r\n  'details',\r\n  'dialog',\r\n  'dir',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'frame',\r\n  'frameset',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'head',\r\n  'header',\r\n  'hr',\r\n  'html',\r\n  'iframe',\r\n  'legend',\r\n  'li',\r\n  'link',\r\n  'main',\r\n  'menu',\r\n  'menuitem',\r\n  'nav',\r\n  'noframes',\r\n  'ol',\r\n  'optgroup',\r\n  'option',\r\n  'p',\r\n  'param',\r\n  'search',\r\n  'section',\r\n  'summary',\r\n  'table',\r\n  'tbody',\r\n  'td',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'title',\r\n  'tr',\r\n  'track',\r\n  'ul'\r\n]\r\n\r\n/**\r\n * List of lowercase HTML “raw” tag names.\r\n *\r\n * The list, when parsing HTML (flow), results in HTML that can include lines\r\n * without exiting, until a closing tag also in this list is found (condition\r\n * 1).\r\n *\r\n * This module is copied from:\r\n * <https://spec.commonmark.org/0.30/#html-blocks>.\r\n *\r\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\r\n */\r\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {blankLine} from './blank-line.js'\r\n\r\n/** @type {Construct} */\r\nexport const htmlFlow = {\r\n  name: 'htmlFlow',\r\n  tokenize: tokenizeHtmlFlow,\r\n  resolveTo: resolveToHtmlFlow,\r\n  concrete: true\r\n}\r\n\r\n/** @type {Construct} */\r\nconst blankLineBefore = {tokenize: tokenizeBlankLineBefore, partial: true}\r\nconst nonLazyContinuationStart = {\r\n  tokenize: tokenizeNonLazyContinuationStart,\r\n  partial: true\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToHtmlFlow(events) {\r\n  let index = events.length\r\n\r\n  while (index--) {\r\n    if (\r\n      events[index][0] === 'enter' &&\r\n      events[index][1].type === types.htmlFlow\r\n    ) {\r\n      break\r\n    }\r\n  }\r\n\r\n  if (index > 1 && events[index - 2][1].type === types.linePrefix) {\r\n    // Add the prefix start to the HTML token.\r\n    events[index][1].start = events[index - 2][1].start\r\n    // Add the prefix start to the HTML line token.\r\n    events[index + 1][1].start = events[index - 2][1].start\r\n    // Remove the line prefix.\r\n    events.splice(index - 2, 2)\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHtmlFlow(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {number} */\r\n  let marker\r\n  /** @type {boolean} */\r\n  let closingTag\r\n  /** @type {string} */\r\n  let buffer\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {Code} */\r\n  let markerB\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of HTML (flow).\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * At `<`, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    assert(code === codes.lessThan, 'expected `<`')\r\n    effects.enter(types.htmlFlow)\r\n    effects.enter(types.htmlFlowData)\r\n    effects.consume(code)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *      ^\r\n   * > | <!doctype>\r\n   *      ^\r\n   * > | <!--xxx-->\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.exclamationMark) {\r\n      effects.consume(code)\r\n      return declarationOpen\r\n    }\r\n\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      closingTag = true\r\n      return tagCloseStart\r\n    }\r\n\r\n    if (code === codes.questionMark) {\r\n      effects.consume(code)\r\n      marker = constants.htmlInstruction\r\n      // To do:\r\n      // tokenizer.concrete = true\r\n      // To do: use `markdown-rs` style interrupt.\r\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\r\n      // right now, so we do need to search for `>`, similar to declarations.\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer = String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *       ^\r\n   * > | <!--xxx-->\r\n   *       ^\r\n   * > | <![CDATA[>&<]]>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declarationOpen(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      marker = constants.htmlComment\r\n      return commentOpenInside\r\n    }\r\n\r\n    if (code === codes.leftSquareBracket) {\r\n      effects.consume(code)\r\n      marker = constants.htmlCdata\r\n      index = 0\r\n      return cdataOpenInside\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      marker = constants.htmlDeclaration\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!-`, inside a comment, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentOpenInside(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<![`, inside CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *        ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataOpenInside(code) {\r\n    const value = constants.cdataOpeningString\r\n\r\n    if (code === value.charCodeAt(index++)) {\r\n      effects.consume(code)\r\n\r\n      if (index === value.length) {\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok : continuation\r\n      }\r\n\r\n      return cdataOpenInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | </x>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseStart(code) {\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer = String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <ab>\r\n   *      ^^\r\n   * > | </ab>\r\n   *       ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagName(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      const slash = code === codes.slash\r\n      const name = buffer.toLowerCase()\r\n\r\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\r\n        marker = constants.htmlRaw\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code)\r\n      }\r\n\r\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\r\n        marker = constants.htmlBasic\r\n\r\n        if (slash) {\r\n          effects.consume(code)\r\n          return basicSelfClosing\r\n        }\r\n\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code)\r\n      }\r\n\r\n      marker = constants.htmlComplete\r\n      // Do not support complete HTML when interrupting.\r\n      return self.interrupt && !self.parser.lazy[self.now().line]\r\n        ? nok(code)\r\n        : closingTag\r\n        ? completeClosingTagAfter(code)\r\n        : completeAttributeNameBefore(code)\r\n    }\r\n\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === codes.dash || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      buffer += String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a basic tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <div/>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function basicSelfClosing(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuation\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a complete tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <x/>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeClosingTagAfter(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeClosingTagAfter\r\n    }\r\n\r\n    return completeEnd(code)\r\n  }\r\n\r\n  /**\r\n   * At an attribute name.\r\n   *\r\n   * At first, this state is used after a complete tag name, after whitespace,\r\n   * where it expects optional attributes or the end of the tag.\r\n   * It is also reused after attributes, when expecting more optional\r\n   * attributes.\r\n   *\r\n   * ```markdown\r\n   * > | <a />\r\n   *        ^\r\n   * > | <a :b>\r\n   *        ^\r\n   * > | <a _b>\r\n   *        ^\r\n   * > | <a b>\r\n   *        ^\r\n   * > | <a >\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameBefore(code) {\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      return completeEnd\r\n    }\r\n\r\n    // ASCII alphanumerical and `:` and `_`.\r\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeName\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeNameBefore\r\n    }\r\n\r\n    return completeEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | <a :b>\r\n   *         ^\r\n   * > | <a _b>\r\n   *         ^\r\n   * > | <a b>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeName(code) {\r\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\r\n    if (\r\n      code === codes.dash ||\r\n      code === codes.dot ||\r\n      code === codes.colon ||\r\n      code === codes.underscore ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      effects.consume(code)\r\n      return completeAttributeName\r\n    }\r\n\r\n    return completeAttributeNameAfter(code)\r\n  }\r\n\r\n  /**\r\n   * After attribute name, at an optional initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b>\r\n   *         ^\r\n   * > | <a b=c>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameAfter(code) {\r\n    if (code === codes.equalsTo) {\r\n      effects.consume(code)\r\n      return completeAttributeValueBefore\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeNameAfter\r\n    }\r\n\r\n    return completeAttributeNameBefore(code)\r\n  }\r\n\r\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * > | <a b=\"c\">\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueBefore(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.greaterThan ||\r\n      code === codes.graveAccent\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.quotationMark || code === codes.apostrophe) {\r\n      effects.consume(code)\r\n      markerB = code\r\n      return completeAttributeValueQuoted\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeValueBefore\r\n    }\r\n\r\n    return completeAttributeValueUnquoted(code)\r\n  }\r\n\r\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *           ^\r\n   * > | <a b='c'>\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuoted(code) {\r\n    if (code === markerB) {\r\n      effects.consume(code)\r\n      markerB = null\r\n      return completeAttributeValueQuotedAfter\r\n    }\r\n\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return completeAttributeValueQuoted\r\n  }\r\n\r\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueUnquoted(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.slash ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.greaterThan ||\r\n      code === codes.graveAccent ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return completeAttributeNameAfter(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return completeAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the\r\n   * end of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuotedAfter(code) {\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownSpace(code)\r\n    ) {\r\n      return completeAttributeNameBefore(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In certain circumstances of a complete tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeEnd(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      return completeAfter\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `>` in a complete tag.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAfter(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return continuation(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAfter\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In continuation of any HTML kind.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuation(code) {\r\n    if (code === codes.dash && marker === constants.htmlComment) {\r\n      effects.consume(code)\r\n      return continuationCommentInside\r\n    }\r\n\r\n    if (code === codes.lessThan && marker === constants.htmlRaw) {\r\n      effects.consume(code)\r\n      return continuationRawTagOpen\r\n    }\r\n\r\n    if (code === codes.greaterThan && marker === constants.htmlDeclaration) {\r\n      effects.consume(code)\r\n      return continuationClose\r\n    }\r\n\r\n    if (code === codes.questionMark && marker === constants.htmlInstruction) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket && marker === constants.htmlCdata) {\r\n      effects.consume(code)\r\n      return continuationCdataInside\r\n    }\r\n\r\n    if (\r\n      markdownLineEnding(code) &&\r\n      (marker === constants.htmlBasic || marker === constants.htmlComplete)\r\n    ) {\r\n      effects.exit(types.htmlFlowData)\r\n      return effects.check(\r\n        blankLineBefore,\r\n        continuationAfter,\r\n        continuationStart\r\n      )(code)\r\n    }\r\n\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.htmlFlowData)\r\n      return continuationStart(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return continuation\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStart(code) {\r\n    return effects.check(\r\n      nonLazyContinuationStart,\r\n      continuationStartNonLazy,\r\n      continuationAfter\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStartNonLazy(code) {\r\n    assert(markdownLineEnding(code))\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return continuationBefore\r\n  }\r\n\r\n  /**\r\n   * In continuation, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   *   | <x>\r\n   * > | asd\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationBefore(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return continuationStart(code)\r\n    }\r\n\r\n    effects.enter(types.htmlFlowData)\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In comment continuation, after one `-`, expecting another.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCommentInside(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `<`, at `/`.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawTagOpen(code) {\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      buffer = ''\r\n      return continuationRawEndTag\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `</`, in a raw tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                             ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawEndTag(code) {\r\n    if (code === codes.greaterThan) {\r\n      const name = buffer.toLowerCase()\r\n\r\n      if (htmlRawNames.includes(name)) {\r\n        effects.consume(code)\r\n        return continuationClose\r\n      }\r\n\r\n      return continuation(code)\r\n    }\r\n\r\n    if (asciiAlpha(code) && buffer.length < constants.htmlRawSizeMax) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer += String.fromCharCode(code)\r\n      return continuationRawEndTag\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In cdata continuation, after `]`, expecting `]>`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *                  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCdataInside(code) {\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In declaration or instruction continuation, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | <!-->\r\n   *         ^\r\n   * > | <?>\r\n   *       ^\r\n   * > | <!q>\r\n   *        ^\r\n   * > | <!--ab-->\r\n   *             ^\r\n   * > | <![CDATA[>&<]]>\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationDeclarationInside(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      return continuationClose\r\n    }\r\n\r\n    // More dashes.\r\n    if (code === codes.dash && marker === constants.htmlComment) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In closed continuation: everything we get until the eol/eof is part of it.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationClose(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.htmlFlowData)\r\n      return continuationAfter(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return continuationClose\r\n  }\r\n\r\n  /**\r\n   * Done.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationAfter(code) {\r\n    effects.exit(types.htmlFlow)\r\n    // // Feel free to interrupt.\r\n    // tokenizer.interrupt = false\r\n    // // No longer concrete.\r\n    // tokenizer.concrete = false\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * At eol, before continuation.\r\n   *\r\n   * ```markdown\r\n   * > | * ```js\r\n   *            ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * A continuation.\r\n   *\r\n   * ```markdown\r\n   *   | * ```js\r\n   * > | b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Before eol, expecting blank line.\r\n   *\r\n   * ```markdown\r\n   * > | <div>\r\n   *          ^\r\n   *   |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(markdownLineEnding(code), 'expected a line ending')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return effects.attempt(blankLine, ok, nok)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const htmlText = {name: 'htmlText', tokenize: tokenizeHtmlText}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHtmlText(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {NonNullable<Code> | undefined} */\r\n  let marker\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {State} */\r\n  let returnState\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of HTML (text).\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.lessThan, 'expected `<`')\r\n    effects.enter(types.htmlText)\r\n    effects.enter(types.htmlTextData)\r\n    effects.consume(code)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *        ^\r\n   * > | a <!doctype> c\r\n   *        ^\r\n   * > | a <!--b--> c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.exclamationMark) {\r\n      effects.consume(code)\r\n      return declarationOpen\r\n    }\r\n\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      return tagCloseStart\r\n    }\r\n\r\n    if (code === codes.questionMark) {\r\n      effects.consume(code)\r\n      return instruction\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagOpen\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <!doctype> c\r\n   *         ^\r\n   * > | a <!--b--> c\r\n   *         ^\r\n   * > | a <![CDATA[>&<]]> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declarationOpen(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentOpenInside\r\n    }\r\n\r\n    if (code === codes.leftSquareBracket) {\r\n      effects.consume(code)\r\n      index = 0\r\n      return cdataOpenInside\r\n    }\r\n\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return declaration\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In a comment, after `<!-`, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentOpenInside(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentEnd\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In comment.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function comment(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentClose\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = comment\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return comment\r\n  }\r\n\r\n  /**\r\n   * In comment, after `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentClose(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentEnd\r\n    }\r\n\r\n    return comment(code)\r\n  }\r\n\r\n  /**\r\n   * In comment, after `--`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentEnd(code) {\r\n    return code === codes.greaterThan\r\n      ? end(code)\r\n      : code === codes.dash\r\n      ? commentClose(code)\r\n      : comment(code)\r\n  }\r\n\r\n  /**\r\n   * After `<![`, in CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *          ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataOpenInside(code) {\r\n    const value = constants.cdataOpeningString\r\n\r\n    if (code === value.charCodeAt(index++)) {\r\n      effects.consume(code)\r\n      return index === value.length ? cdata : cdataOpenInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                ^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdata(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return cdataClose\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = cdata\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return cdata\r\n  }\r\n\r\n  /**\r\n   * In CDATA, after `]`, at another `]`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataClose(code) {\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return cdataEnd\r\n    }\r\n\r\n    return cdata(code)\r\n  }\r\n\r\n  /**\r\n   * In CDATA, after `]]`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataEnd(code) {\r\n    if (code === codes.greaterThan) {\r\n      return end(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return cdataEnd\r\n    }\r\n\r\n    return cdata(code)\r\n  }\r\n\r\n  /**\r\n   * In declaration.\r\n   *\r\n   * ```markdown\r\n   * > | a <!b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declaration(code) {\r\n    if (code === codes.eof || code === codes.greaterThan) {\r\n      return end(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = declaration\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return declaration\r\n  }\r\n\r\n  /**\r\n   * In instruction.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function instruction(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.questionMark) {\r\n      effects.consume(code)\r\n      return instructionClose\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = instruction\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return instruction\r\n  }\r\n\r\n  /**\r\n   * In instruction, after `?`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function instructionClose(code) {\r\n    return code === codes.greaterThan ? end(code) : instruction(code)\r\n  }\r\n\r\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseStart(code) {\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagClose\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `</x`, in a tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagClose(code) {\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === codes.dash || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      return tagClose\r\n    }\r\n\r\n    return tagCloseBetween(code)\r\n  }\r\n\r\n  /**\r\n   * In closing tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseBetween(code) {\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagCloseBetween\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagCloseBetween\r\n    }\r\n\r\n    return end(code)\r\n  }\r\n\r\n  /**\r\n   * After `<x`, in opening tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpen(code) {\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === codes.dash || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      return tagOpen\r\n    }\r\n\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return tagOpenBetween(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In opening tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenBetween(code) {\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      return end\r\n    }\r\n\r\n    // ASCII alphabetical and `:` and `_`.\r\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeName\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenBetween\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenBetween\r\n    }\r\n\r\n    return end(code)\r\n  }\r\n\r\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeName(code) {\r\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\r\n    if (\r\n      code === codes.dash ||\r\n      code === codes.dot ||\r\n      code === codes.colon ||\r\n      code === codes.underscore ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeName\r\n    }\r\n\r\n    return tagOpenAttributeNameAfter(code)\r\n  }\r\n\r\n  /**\r\n   * After attribute name, before initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeNameAfter(code) {\r\n    if (code === codes.equalsTo) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeValueBefore\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeNameAfter\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeNameAfter\r\n    }\r\n\r\n    return tagOpenBetween(code)\r\n  }\r\n\r\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueBefore(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.greaterThan ||\r\n      code === codes.graveAccent\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.quotationMark || code === codes.apostrophe) {\r\n      effects.consume(code)\r\n      marker = code\r\n      return tagOpenAttributeValueQuoted\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeValueBefore\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeValueBefore\r\n    }\r\n\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueQuoted(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      marker = undefined\r\n      return tagOpenAttributeValueQuotedAfter\r\n    }\r\n\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeValueQuoted\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueQuoted\r\n  }\r\n\r\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueUnquoted(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.graveAccent\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return tagOpenBetween(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the end\r\n   * of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueQuotedAfter(code) {\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return tagOpenBetween(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In certain circumstances of a tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function end(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      effects.exit(types.htmlTextData)\r\n      effects.exit(types.htmlText)\r\n      return ok\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * At eol.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--a\r\n   *            ^\r\n   *   | b-->\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingBefore(code) {\r\n    assert(returnState, 'expected return state')\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.exit(types.htmlTextData)\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return lineEndingAfter\r\n  }\r\n\r\n  /**\r\n   * After eol, at optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingAfter(code) {\r\n    // Always populated by defaults.\r\n    assert(\r\n      self.parser.constructs.disable.null,\r\n      'expected `disable.null` to be populated'\r\n    )\r\n    return markdownSpace(code)\r\n      ? factorySpace(\r\n          effects,\r\n          lineEndingAfterPrefix,\r\n          types.linePrefix,\r\n          self.parser.constructs.disable.null.includes('codeIndented')\r\n            ? undefined\r\n            : constants.tabSize\r\n        )(code)\r\n      : lineEndingAfterPrefix(code)\r\n  }\r\n\r\n  /**\r\n   * After eol, after optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingAfterPrefix(code) {\r\n    effects.enter(types.htmlTextData)\r\n    return returnState(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factoryDestination} from 'micromark-factory-destination'\r\nimport {factoryLabel} from 'micromark-factory-label'\r\nimport {factoryTitle} from 'micromark-factory-title'\r\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\r\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\r\nimport {push, splice} from 'micromark-util-chunked'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const labelEnd = {\r\n  name: 'labelEnd',\r\n  tokenize: tokenizeLabelEnd,\r\n  resolveTo: resolveToLabelEnd,\r\n  resolveAll: resolveAllLabelEnd\r\n}\r\n\r\n/** @type {Construct} */\r\nconst resourceConstruct = {tokenize: tokenizeResource}\r\n/** @type {Construct} */\r\nconst referenceFullConstruct = {tokenize: tokenizeReferenceFull}\r\n/** @type {Construct} */\r\nconst referenceCollapsedConstruct = {tokenize: tokenizeReferenceCollapsed}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveAllLabelEnd(events) {\r\n  let index = -1\r\n\r\n  while (++index < events.length) {\r\n    const token = events[index][1]\r\n\r\n    if (\r\n      token.type === types.labelImage ||\r\n      token.type === types.labelLink ||\r\n      token.type === types.labelEnd\r\n    ) {\r\n      // Remove the marker.\r\n      events.splice(index + 1, token.type === types.labelImage ? 4 : 2)\r\n      token.type = types.data\r\n      index++\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToLabelEnd(events, context) {\r\n  let index = events.length\r\n  let offset = 0\r\n  /** @type {Token} */\r\n  let token\r\n  /** @type {number | undefined} */\r\n  let open\r\n  /** @type {number | undefined} */\r\n  let close\r\n  /** @type {Array<Event>} */\r\n  let media\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    token = events[index][1]\r\n\r\n    if (open) {\r\n      // If we see another link, or inactive link label, we’ve been here before.\r\n      if (\r\n        token.type === types.link ||\r\n        (token.type === types.labelLink && token._inactive)\r\n      ) {\r\n        break\r\n      }\r\n\r\n      // Mark other link openings as inactive, as we can’t have links in\r\n      // links.\r\n      if (events[index][0] === 'enter' && token.type === types.labelLink) {\r\n        token._inactive = true\r\n      }\r\n    } else if (close) {\r\n      if (\r\n        events[index][0] === 'enter' &&\r\n        (token.type === types.labelImage || token.type === types.labelLink) &&\r\n        !token._balanced\r\n      ) {\r\n        open = index\r\n\r\n        if (token.type !== types.labelLink) {\r\n          offset = 2\r\n          break\r\n        }\r\n      }\r\n    } else if (token.type === types.labelEnd) {\r\n      close = index\r\n    }\r\n  }\r\n\r\n  assert(open !== undefined, '`open` is supposed to be found')\r\n  assert(close !== undefined, '`close` is supposed to be found')\r\n\r\n  const group = {\r\n    type: events[open][1].type === types.labelLink ? types.link : types.image,\r\n    start: Object.assign({}, events[open][1].start),\r\n    end: Object.assign({}, events[events.length - 1][1].end)\r\n  }\r\n\r\n  const label = {\r\n    type: types.label,\r\n    start: Object.assign({}, events[open][1].start),\r\n    end: Object.assign({}, events[close][1].end)\r\n  }\r\n\r\n  const text = {\r\n    type: types.labelText,\r\n    start: Object.assign({}, events[open + offset + 2][1].end),\r\n    end: Object.assign({}, events[close - 2][1].start)\r\n  }\r\n\r\n  media = [\r\n    ['enter', group, context],\r\n    ['enter', label, context]\r\n  ]\r\n\r\n  // Opening marker.\r\n  media = push(media, events.slice(open + 1, open + offset + 3))\r\n\r\n  // Text open.\r\n  media = push(media, [['enter', text, context]])\r\n\r\n  // Always populated by defaults.\r\n  assert(\r\n    context.parser.constructs.insideSpan.null,\r\n    'expected `insideSpan.null` to be populated'\r\n  )\r\n  // Between.\r\n  media = push(\r\n    media,\r\n    resolveAll(\r\n      context.parser.constructs.insideSpan.null,\r\n      events.slice(open + offset + 4, close - 3),\r\n      context\r\n    )\r\n  )\r\n\r\n  // Text close, marker close, label close.\r\n  media = push(media, [\r\n    ['exit', text, context],\r\n    events[close - 2],\r\n    events[close - 1],\r\n    ['exit', label, context]\r\n  ])\r\n\r\n  // Reference, resource, or so.\r\n  media = push(media, events.slice(close + 1))\r\n\r\n  // Media close.\r\n  media = push(media, [['exit', group, context]])\r\n\r\n  splice(events, open, events.length, media)\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelEnd(effects, ok, nok) {\r\n  const self = this\r\n  let index = self.events.length\r\n  /** @type {Token} */\r\n  let labelStart\r\n  /** @type {boolean} */\r\n  let defined\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    if (\r\n      (self.events[index][1].type === types.labelImage ||\r\n        self.events[index][1].type === types.labelLink) &&\r\n      !self.events[index][1]._balanced\r\n    ) {\r\n      labelStart = self.events[index][1]\r\n      break\r\n    }\r\n  }\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label end.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *       ^\r\n   * > | [a][b] c\r\n   *       ^\r\n   * > | [a][] b\r\n   *       ^\r\n   * > | [a] b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.rightSquareBracket, 'expected `]`')\r\n\r\n    // If there is not an okay opening.\r\n    if (!labelStart) {\r\n      return nok(code)\r\n    }\r\n\r\n    // If the corresponding label (link) start is marked as inactive,\r\n    // it means we’d be wrapping a link, like this:\r\n    //\r\n    // ```markdown\r\n    // > | a [b [c](d) e](f) g.\r\n    //                  ^\r\n    // ```\r\n    //\r\n    // We can’t have that, so it’s just balanced brackets.\r\n    if (labelStart._inactive) {\r\n      return labelEndNok(code)\r\n    }\r\n\r\n    defined = self.parser.defined.includes(\r\n      normalizeIdentifier(\r\n        self.sliceSerialize({start: labelStart.end, end: self.now()})\r\n      )\r\n    )\r\n    effects.enter(types.labelEnd)\r\n    effects.enter(types.labelMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.labelMarker)\r\n    effects.exit(types.labelEnd)\r\n    return after\r\n  }\r\n\r\n  /**\r\n   * After `]`.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *       ^\r\n   * > | [a][b] c\r\n   *       ^\r\n   * > | [a][] b\r\n   *       ^\r\n   * > | [a] b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\r\n    // an extension.\r\n\r\n    // Resource (`[asd](fgh)`)?\r\n    if (code === codes.leftParenthesis) {\r\n      return effects.attempt(\r\n        resourceConstruct,\r\n        labelEndOk,\r\n        defined ? labelEndOk : labelEndNok\r\n      )(code)\r\n    }\r\n\r\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\r\n    if (code === codes.leftSquareBracket) {\r\n      return effects.attempt(\r\n        referenceFullConstruct,\r\n        labelEndOk,\r\n        defined ? referenceNotFull : labelEndNok\r\n      )(code)\r\n    }\r\n\r\n    // Shortcut (`[asd]`) reference?\r\n    return defined ? labelEndOk(code) : labelEndNok(code)\r\n  }\r\n\r\n  /**\r\n   * After `]`, at `[`, but not at a full reference.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] b\r\n   *        ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceNotFull(code) {\r\n    return effects.attempt(\r\n      referenceCollapsedConstruct,\r\n      labelEndOk,\r\n      labelEndNok\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * Done, we found something.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *           ^\r\n   * > | [a][b] c\r\n   *           ^\r\n   * > | [a][] b\r\n   *          ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEndOk(code) {\r\n    // Note: `markdown-rs` does a bunch of stuff here.\r\n    return ok(code)\r\n  }\r\n\r\n  /**\r\n   * Done, it’s nothing.\r\n   *\r\n   * There was an okay opening, but we didn’t match anything.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b c\r\n   *        ^\r\n   * > | [a][b c\r\n   *        ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEndNok(code) {\r\n    labelStart._balanced = true\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeResource(effects, ok, nok) {\r\n  return resourceStart\r\n\r\n  /**\r\n   * At a resource.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceStart(code) {\r\n    assert(code === codes.leftParenthesis, 'expected left paren')\r\n    effects.enter(types.resource)\r\n    effects.enter(types.resourceMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.resourceMarker)\r\n    return resourceBefore\r\n  }\r\n\r\n  /**\r\n   * In resource, after `(`, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceBefore(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceOpen)(code)\r\n      : resourceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after optional whitespace, at `)` or a destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceOpen(code) {\r\n    if (code === codes.rightParenthesis) {\r\n      return resourceEnd(code)\r\n    }\r\n\r\n    return factoryDestination(\r\n      effects,\r\n      resourceDestinationAfter,\r\n      resourceDestinationMissing,\r\n      types.resourceDestination,\r\n      types.resourceDestinationLiteral,\r\n      types.resourceDestinationLiteralMarker,\r\n      types.resourceDestinationRaw,\r\n      types.resourceDestinationString,\r\n      constants.linkResourceDestinationBalanceMax\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after destination, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceDestinationAfter(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceBetween)(code)\r\n      : resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * At invalid destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a](<<) b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceDestinationMissing(code) {\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after destination and whitespace, at `(` or title.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b ) c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceBetween(code) {\r\n    if (\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.leftParenthesis\r\n    ) {\r\n      return factoryTitle(\r\n        effects,\r\n        resourceTitleAfter,\r\n        nok,\r\n        types.resourceTitle,\r\n        types.resourceTitleMarker,\r\n        types.resourceTitleString\r\n      )(code)\r\n    }\r\n\r\n    return resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after title, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b \"c\") d\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceTitleAfter(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceEnd)(code)\r\n      : resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, at `)`.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceEnd(code) {\r\n    if (code === codes.rightParenthesis) {\r\n      effects.enter(types.resourceMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.resourceMarker)\r\n      effects.exit(types.resource)\r\n      return ok\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeReferenceFull(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return referenceFull\r\n\r\n  /**\r\n   * In a reference (full), at the `[`.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b] d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFull(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\r\n    return factoryLabel.call(\r\n      self,\r\n      effects,\r\n      referenceFullAfter,\r\n      referenceFullMissing,\r\n      types.reference,\r\n      types.referenceMarker,\r\n      types.referenceString\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In a reference (full), after `]`.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b] d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFullAfter(code) {\r\n    return self.parser.defined.includes(\r\n      normalizeIdentifier(\r\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\r\n      )\r\n    )\r\n      ? ok(code)\r\n      : nok(code)\r\n  }\r\n\r\n  /**\r\n   * In reference (full) that was missing.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFullMissing(code) {\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\r\n  return referenceCollapsedStart\r\n\r\n  /**\r\n   * In reference (collapsed), at `[`.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceCollapsedStart(code) {\r\n    // We only attempt a collapsed label if there’s a `[`.\r\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\r\n    effects.enter(types.reference)\r\n    effects.enter(types.referenceMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.referenceMarker)\r\n    return referenceCollapsedOpen\r\n  }\r\n\r\n  /**\r\n   * In reference (collapsed), at `]`.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] d\r\n   *         ^\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\r\n  function referenceCollapsedOpen(code) {\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.enter(types.referenceMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.referenceMarker)\r\n      effects.exit(types.reference)\r\n      return ok\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {labelEnd} from './label-end.js'\r\n\r\n/** @type {Construct} */\r\nexport const labelStartImage = {\r\n  name: 'labelStartImage',\r\n  tokenize: tokenizeLabelStartImage,\r\n  resolveAll: labelEnd.resolveAll\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartImage(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label (image) start.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.exclamationMark, 'expected `!`')\r\n    effects.enter(types.labelImage)\r\n    effects.enter(types.labelImageMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.labelImageMarker)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `!`, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.leftSquareBracket) {\r\n      effects.enter(types.labelMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.labelMarker)\r\n      effects.exit(types.labelImage)\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `![`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * This is needed in because, when GFM footnotes are enabled, images never\r\n   * form when started with a `^`.\r\n   * Instead, links form:\r\n   *\r\n   * ```markdown\r\n   * ![^a](b)\r\n   *\r\n   * ![^a][b]\r\n   *\r\n   * [b]: c\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <p>!<a href=\\\"b\\\">^a</a></p>\r\n   * <p>!<a href=\\\"c\\\">^a</a></p>\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // To do: use a new field to do this, this is still needed for\r\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\r\n    // behavior isn’t.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === codes.caret &&\r\n      '_hiddenFootnoteSupport' in self.parser.constructs\r\n      ? nok(code)\r\n      : ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {labelEnd} from './label-end.js'\r\n\r\n/** @type {Construct} */\r\nexport const labelStartLink = {\r\n  name: 'labelStartLink',\r\n  tokenize: tokenizeLabelStartLink,\r\n  resolveAll: labelEnd.resolveAll\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartLink(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label (link) start.\r\n   *\r\n   * ```markdown\r\n   * > | a [b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    effects.enter(types.labelLink)\r\n    effects.enter(types.labelMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.labelMarker)\r\n    effects.exit(types.labelLink)\r\n    return after\r\n  }\r\n\r\n  /** @type {State} */\r\n  function after(code) {\r\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\r\n    // remove.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === codes.caret &&\r\n      '_hiddenFootnoteSupport' in self.parser.constructs\r\n      ? nok(code)\r\n      : ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const lineEnding = {name: 'lineEnding', tokenize: tokenizeLineEnding}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLineEnding(effects, ok) {\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return factorySpace(effects, ok, types.linePrefix)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const thematicBreak = {\r\n  name: 'thematicBreak',\r\n  tokenize: tokenizeThematicBreak\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeThematicBreak(effects, ok, nok) {\r\n  let size = 0\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of thematic break.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(types.thematicBreak)\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at marker.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    assert(\r\n      code === codes.asterisk ||\r\n        code === codes.dash ||\r\n        code === codes.underscore,\r\n      'expected `*`, `-`, or `_`'\r\n    )\r\n    marker = code\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.enter(types.thematicBreakSequence)\r\n      return sequence(code)\r\n    }\r\n\r\n    if (\r\n      size >= constants.thematicBreakMarkerCountMin &&\r\n      (code === codes.eof || markdownLineEnding(code))\r\n    ) {\r\n      effects.exit(types.thematicBreak)\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequence(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      size++\r\n      return sequence\r\n    }\r\n\r\n    effects.exit(types.thematicBreakSequence)\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, atBreak, types.whitespace)(code)\r\n      : atBreak(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\r\n * @typedef {import('micromark-util-types').Exiter} Exiter\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {blankLine} from './blank-line.js'\r\nimport {thematicBreak} from './thematic-break.js'\r\n\r\n/** @type {Construct} */\r\nexport const list = {\r\n  name: 'list',\r\n  tokenize: tokenizeListStart,\r\n  continuation: {tokenize: tokenizeListContinuation},\r\n  exit: tokenizeListEnd\r\n}\r\n\r\n/** @type {Construct} */\r\nconst listItemPrefixWhitespaceConstruct = {\r\n  tokenize: tokenizeListItemPrefixWhitespace,\r\n  partial: true\r\n}\r\n\r\n/** @type {Construct} */\r\nconst indentConstruct = {tokenize: tokenizeIndent, partial: true}\r\n\r\n// To do: `markdown-rs` parses list items on their own and later stitches them\r\n// together.\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListStart(effects, ok, nok) {\r\n  const self = this\r\n  const tail = self.events[self.events.length - 1]\r\n  let initialSize =\r\n    tail && tail[1].type === types.linePrefix\r\n      ? tail[2].sliceSerialize(tail[1], true).length\r\n      : 0\r\n  let size = 0\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    assert(self.containerState, 'expected state')\r\n    const kind =\r\n      self.containerState.type ||\r\n      (code === codes.asterisk || code === codes.plusSign || code === codes.dash\r\n        ? types.listUnordered\r\n        : types.listOrdered)\r\n\r\n    if (\r\n      kind === types.listUnordered\r\n        ? !self.containerState.marker || code === self.containerState.marker\r\n        : asciiDigit(code)\r\n    ) {\r\n      if (!self.containerState.type) {\r\n        self.containerState.type = kind\r\n        effects.enter(kind, {_container: true})\r\n      }\r\n\r\n      if (kind === types.listUnordered) {\r\n        effects.enter(types.listItemPrefix)\r\n        return code === codes.asterisk || code === codes.dash\r\n          ? effects.check(thematicBreak, nok, atMarker)(code)\r\n          : atMarker(code)\r\n      }\r\n\r\n      if (!self.interrupt || code === codes.digit1) {\r\n        effects.enter(types.listItemPrefix)\r\n        effects.enter(types.listItemValue)\r\n        return inside(code)\r\n      }\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function inside(code) {\r\n    assert(self.containerState, 'expected state')\r\n    if (asciiDigit(code) && ++size < constants.listItemValueSizeMax) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n\r\n    if (\r\n      (!self.interrupt || size < 2) &&\r\n      (self.containerState.marker\r\n        ? code === self.containerState.marker\r\n        : code === codes.rightParenthesis || code === codes.dot)\r\n    ) {\r\n      effects.exit(types.listItemValue)\r\n      return atMarker(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * @type {State}\r\n   **/\r\n  function atMarker(code) {\r\n    assert(self.containerState, 'expected state')\r\n    assert(code !== codes.eof, 'eof (`null`) is not a marker')\r\n    effects.enter(types.listItemMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.listItemMarker)\r\n    self.containerState.marker = self.containerState.marker || code\r\n    return effects.check(\r\n      blankLine,\r\n      // Can’t be empty when interrupting.\r\n      self.interrupt ? nok : onBlank,\r\n      effects.attempt(\r\n        listItemPrefixWhitespaceConstruct,\r\n        endOfPrefix,\r\n        otherPrefix\r\n      )\r\n    )\r\n  }\r\n\r\n  /** @type {State} */\r\n  function onBlank(code) {\r\n    assert(self.containerState, 'expected state')\r\n    self.containerState.initialBlankLine = true\r\n    initialSize++\r\n    return endOfPrefix(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function otherPrefix(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(types.listItemPrefixWhitespace)\r\n      effects.consume(code)\r\n      effects.exit(types.listItemPrefixWhitespace)\r\n      return endOfPrefix\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function endOfPrefix(code) {\r\n    assert(self.containerState, 'expected state')\r\n    self.containerState.size =\r\n      initialSize +\r\n      self.sliceSerialize(effects.exit(types.listItemPrefix), true).length\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListContinuation(effects, ok, nok) {\r\n  const self = this\r\n\r\n  assert(self.containerState, 'expected state')\r\n  self.containerState._closeFlow = undefined\r\n\r\n  return effects.check(blankLine, onBlank, notBlank)\r\n\r\n  /** @type {State} */\r\n  function onBlank(code) {\r\n    assert(self.containerState, 'expected state')\r\n    assert(typeof self.containerState.size === 'number', 'expected size')\r\n    self.containerState.furtherBlankLines =\r\n      self.containerState.furtherBlankLines ||\r\n      self.containerState.initialBlankLine\r\n\r\n    // We have a blank line.\r\n    // Still, try to consume at most the items size.\r\n    return factorySpace(\r\n      effects,\r\n      ok,\r\n      types.listItemIndent,\r\n      self.containerState.size + 1\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function notBlank(code) {\r\n    assert(self.containerState, 'expected state')\r\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\r\n      self.containerState.furtherBlankLines = undefined\r\n      self.containerState.initialBlankLine = undefined\r\n      return notInCurrentItem(code)\r\n    }\r\n\r\n    self.containerState.furtherBlankLines = undefined\r\n    self.containerState.initialBlankLine = undefined\r\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function notInCurrentItem(code) {\r\n    assert(self.containerState, 'expected state')\r\n    // While we do continue, we signal that the flow should be closed.\r\n    self.containerState._closeFlow = true\r\n    // As we’re closing flow, we’re no longer interrupting.\r\n    self.interrupt = undefined\r\n    // Always populated by defaults.\r\n    assert(\r\n      self.parser.constructs.disable.null,\r\n      'expected `disable.null` to be populated'\r\n    )\r\n    return factorySpace(\r\n      effects,\r\n      effects.attempt(list, ok, nok),\r\n      types.linePrefix,\r\n      self.parser.constructs.disable.null.includes('codeIndented')\r\n        ? undefined\r\n        : constants.tabSize\r\n    )(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeIndent(effects, ok, nok) {\r\n  const self = this\r\n\r\n  assert(self.containerState, 'expected state')\r\n  assert(typeof self.containerState.size === 'number', 'expected size')\r\n\r\n  return factorySpace(\r\n    effects,\r\n    afterPrefix,\r\n    types.listItemIndent,\r\n    self.containerState.size + 1\r\n  )\r\n\r\n  /** @type {State} */\r\n  function afterPrefix(code) {\r\n    assert(self.containerState, 'expected state')\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === types.listItemIndent &&\r\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\r\n      ? ok(code)\r\n      : nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Exiter}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListEnd(effects) {\r\n  assert(this.containerState, 'expected state')\r\n  assert(typeof this.containerState.type === 'string', 'expected type')\r\n  effects.exit(this.containerState.type)\r\n}\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\r\n  const self = this\r\n\r\n  // Always populated by defaults.\r\n  assert(\r\n    self.parser.constructs.disable.null,\r\n    'expected `disable.null` to be populated'\r\n  )\r\n\r\n  return factorySpace(\r\n    effects,\r\n    afterPrefix,\r\n    types.listItemPrefixWhitespace,\r\n    self.parser.constructs.disable.null.includes('codeIndented')\r\n      ? undefined\r\n      : constants.tabSize + 1\r\n  )\r\n\r\n  /** @type {State} */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n\r\n    return !markdownSpace(code) &&\r\n      tail &&\r\n      tail[1].type === types.listItemPrefixWhitespace\r\n      ? ok(code)\r\n      : nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/** @type {Construct} */\r\nexport const setextUnderline = {\r\n  name: 'setextUnderline',\r\n  tokenize: tokenizeSetextUnderline,\r\n  resolveTo: resolveToSetextUnderline\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToSetextUnderline(events, context) {\r\n  // To do: resolve like `markdown-rs`.\r\n  let index = events.length\r\n  /** @type {number | undefined} */\r\n  let content\r\n  /** @type {number | undefined} */\r\n  let text\r\n  /** @type {number | undefined} */\r\n  let definition\r\n\r\n  // Find the opening of the content.\r\n  // It’ll always exist: we don’t tokenize if it isn’t there.\r\n  while (index--) {\r\n    if (events[index][0] === 'enter') {\r\n      if (events[index][1].type === types.content) {\r\n        content = index\r\n        break\r\n      }\r\n\r\n      if (events[index][1].type === types.paragraph) {\r\n        text = index\r\n      }\r\n    }\r\n    // Exit\r\n    else {\r\n      if (events[index][1].type === types.content) {\r\n        // Remove the content end (if needed we’ll add it later)\r\n        events.splice(index, 1)\r\n      }\r\n\r\n      if (!definition && events[index][1].type === types.definition) {\r\n        definition = index\r\n      }\r\n    }\r\n  }\r\n\r\n  assert(text !== undefined, 'expected a `text` index to be found')\r\n  assert(content !== undefined, 'expected a `text` index to be found')\r\n\r\n  const heading = {\r\n    type: types.setextHeading,\r\n    start: Object.assign({}, events[text][1].start),\r\n    end: Object.assign({}, events[events.length - 1][1].end)\r\n  }\r\n\r\n  // Change the paragraph to setext heading text.\r\n  events[text][1].type = types.setextHeadingText\r\n\r\n  // If we have definitions in the content, we’ll keep on having content,\r\n  // but we need move it.\r\n  if (definition) {\r\n    events.splice(text, 0, ['enter', heading, context])\r\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\r\n    events[content][1].end = Object.assign({}, events[definition][1].end)\r\n  } else {\r\n    events[content][1] = heading\r\n  }\r\n\r\n  // Add the heading exit at the end.\r\n  events.push(['exit', heading, context])\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeSetextUnderline(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * At start of heading (setext) underline.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    let index = self.events.length\r\n    /** @type {boolean | undefined} */\r\n    let paragraph\r\n\r\n    assert(\r\n      code === codes.dash || code === codes.equalsTo,\r\n      'expected `=` or `-`'\r\n    )\r\n\r\n    // Find an opening.\r\n    while (index--) {\r\n      // Skip enter/exit of line ending, line prefix, and content.\r\n      // We can now either have a definition or a paragraph.\r\n      if (\r\n        self.events[index][1].type !== types.lineEnding &&\r\n        self.events[index][1].type !== types.linePrefix &&\r\n        self.events[index][1].type !== types.content\r\n      ) {\r\n        paragraph = self.events[index][1].type === types.paragraph\r\n        break\r\n      }\r\n    }\r\n\r\n    // To do: handle lazy/pierce like `markdown-rs`.\r\n    // To do: parse indent like `markdown-rs`.\r\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\r\n      effects.enter(types.setextHeadingLine)\r\n      marker = code\r\n      return before(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `-` or `=`.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    effects.enter(types.setextHeadingLineSequence)\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n\r\n    effects.exit(types.setextHeadingLineSequence)\r\n\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, after, types.lineSuffix)(code)\r\n      : after(code)\r\n  }\r\n\r\n  /**\r\n   * After sequence, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.setextHeadingLine)\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["list", "list", "has", "chars", "diff", "value", "line", "obj", "constructs", "ok", "ok", "ok", "previous", "ok", "ok", "ok", "ok", "ok", "effects", "nok", "start", "ok", "furtherStart", "ok", "previous", "start", "ok", "previous", "ok", "ok", "ok", "ok", "ok", "titleBefore", "ok", "content", "ok", "ok", "ok", "ok", "ok", "ok", "ok", "ok", "ok", "content", "definition", "ok"]
}
