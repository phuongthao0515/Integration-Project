{
  "version": 3,
  "sources": ["../../stringify-entities/lib/core.js", "../../stringify-entities/lib/util/to-hexadecimal.js", "../../stringify-entities/lib/util/to-decimal.js", "../../character-entities-legacy/index.js", "../../character-entities-html4/index.js", "../../stringify-entities/lib/constant/dangerous.js", "../../stringify-entities/lib/util/to-named.js", "../../stringify-entities/lib/util/format-smart.js", "../../stringify-entities/lib/index.js"],
  "sourcesContent": ["/**\r\n * @typedef CoreOptions\r\n * @property {ReadonlyArray<string>} [subset=[]]\r\n *   Whether to only escape the given subset of characters.\r\n * @property {boolean} [escapeOnly=false]\r\n *   Whether to only escape possibly dangerous characters.\r\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\r\n *\r\n * @typedef FormatOptions\r\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\r\n *   Format strategy.\r\n *\r\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\r\n */\r\n\r\nconst defaultSubsetRegex = /[\"&'<>`]/g\r\nconst surrogatePairsRegex = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g\r\nconst controlCharactersRegex =\r\n  // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\r\n  /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g\r\nconst regexEscapeRegex = /[|\\\\{}()[\\]^$+*?.]/g\r\n\r\n/** @type {WeakMap<ReadonlyArray<string>, RegExp>} */\r\nconst subsetToRegexCache = new WeakMap()\r\n\r\n/**\r\n * Encode certain characters in `value`.\r\n *\r\n * @param {string} value\r\n * @param {CoreWithFormatOptions} options\r\n * @returns {string}\r\n */\r\nexport function core(value, options) {\r\n  value = value.replace(\r\n    options.subset\r\n      ? charactersToExpressionCached(options.subset)\r\n      : defaultSubsetRegex,\r\n    basic\r\n  )\r\n\r\n  if (options.subset || options.escapeOnly) {\r\n    return value\r\n  }\r\n\r\n  return (\r\n    value\r\n      // Surrogate pairs.\r\n      .replace(surrogatePairsRegex, surrogate)\r\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\r\n      // non-ASCII ones).\r\n      .replace(controlCharactersRegex, basic)\r\n  )\r\n\r\n  /**\r\n   * @param {string} pair\r\n   * @param {number} index\r\n   * @param {string} all\r\n   */\r\n  function surrogate(pair, index, all) {\r\n    return options.format(\r\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\r\n        pair.charCodeAt(1) -\r\n        0xdc00 +\r\n        0x10000,\r\n      all.charCodeAt(index + 2),\r\n      options\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @param {string} character\r\n   * @param {number} index\r\n   * @param {string} all\r\n   */\r\n  function basic(character, index, all) {\r\n    return options.format(\r\n      character.charCodeAt(0),\r\n      all.charCodeAt(index + 1),\r\n      options\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * A wrapper function that caches the result of `charactersToExpression` with a WeakMap.\r\n * This can improve performance when tooling calls `charactersToExpression` repeatedly\r\n * with the same subset.\r\n *\r\n * @param {ReadonlyArray<string>} subset\r\n * @returns {RegExp}\r\n */\r\nfunction charactersToExpressionCached(subset) {\r\n  let cached = subsetToRegexCache.get(subset)\r\n\r\n  if (!cached) {\r\n    cached = charactersToExpression(subset)\r\n    subsetToRegexCache.set(subset, cached)\r\n  }\r\n\r\n  return cached\r\n}\r\n\r\n/**\r\n * @param {ReadonlyArray<string>} subset\r\n * @returns {RegExp}\r\n */\r\nfunction charactersToExpression(subset) {\r\n  /** @type {Array<string>} */\r\n  const groups = []\r\n  let index = -1\r\n\r\n  while (++index < subset.length) {\r\n    groups.push(subset[index].replace(regexEscapeRegex, '\\\\$&'))\r\n  }\r\n\r\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\r\n}\r\n", "const hexadecimalRegex = /[\\dA-Fa-f]/\r\n\r\n/**\r\n * Configurable ways to encode characters as hexadecimal references.\r\n *\r\n * @param {number} code\r\n * @param {number} next\r\n * @param {boolean|undefined} omit\r\n * @returns {string}\r\n */\r\nexport function toHexadecimal(code, next, omit) {\r\n  const value = '&#x' + code.toString(16).toUpperCase()\r\n  return omit && next && !hexadecimalRegex.test(String.fromCharCode(next))\r\n    ? value\r\n    : value + ';'\r\n}\r\n", "const decimalRegex = /\\d/\r\n\r\n/**\r\n * Configurable ways to encode characters as decimal references.\r\n *\r\n * @param {number} code\r\n * @param {number} next\r\n * @param {boolean|undefined} omit\r\n * @returns {string}\r\n */\r\nexport function toDecimal(code, next, omit) {\r\n  const value = '&#' + String(code)\r\n  return omit && next && !decimalRegex.test(String.fromCharCode(next))\r\n    ? value\r\n    : value + ';'\r\n}\r\n", "/**\r\n * List of legacy HTML named character references that don’t need a trailing semicolon.\r\n *\r\n * @type {Array<string>}\r\n */\r\nexport const characterEntitiesLegacy = [\r\n  'AElig',\r\n  'AMP',\r\n  'Aacute',\r\n  'Acirc',\r\n  'Agrave',\r\n  'Aring',\r\n  'Atilde',\r\n  'Auml',\r\n  'COPY',\r\n  'Ccedil',\r\n  'ETH',\r\n  'Eacute',\r\n  'Ecirc',\r\n  'Egrave',\r\n  'Euml',\r\n  'GT',\r\n  'Iacute',\r\n  'Icirc',\r\n  'Igrave',\r\n  'Iuml',\r\n  'LT',\r\n  'Ntilde',\r\n  'Oacute',\r\n  'Ocirc',\r\n  'Ograve',\r\n  'Oslash',\r\n  'Otilde',\r\n  'Ouml',\r\n  'QUOT',\r\n  'REG',\r\n  'THORN',\r\n  'Uacute',\r\n  'Ucirc',\r\n  'Ugrave',\r\n  'Uuml',\r\n  'Yacute',\r\n  'aacute',\r\n  'acirc',\r\n  'acute',\r\n  'aelig',\r\n  'agrave',\r\n  'amp',\r\n  'aring',\r\n  'atilde',\r\n  'auml',\r\n  'brvbar',\r\n  'ccedil',\r\n  'cedil',\r\n  'cent',\r\n  'copy',\r\n  'curren',\r\n  'deg',\r\n  'divide',\r\n  'eacute',\r\n  'ecirc',\r\n  'egrave',\r\n  'eth',\r\n  'euml',\r\n  'frac12',\r\n  'frac14',\r\n  'frac34',\r\n  'gt',\r\n  'iacute',\r\n  'icirc',\r\n  'iexcl',\r\n  'igrave',\r\n  'iquest',\r\n  'iuml',\r\n  'laquo',\r\n  'lt',\r\n  'macr',\r\n  'micro',\r\n  'middot',\r\n  'nbsp',\r\n  'not',\r\n  'ntilde',\r\n  'oacute',\r\n  'ocirc',\r\n  'ograve',\r\n  'ordf',\r\n  'ordm',\r\n  'oslash',\r\n  'otilde',\r\n  'ouml',\r\n  'para',\r\n  'plusmn',\r\n  'pound',\r\n  'quot',\r\n  'raquo',\r\n  'reg',\r\n  'sect',\r\n  'shy',\r\n  'sup1',\r\n  'sup2',\r\n  'sup3',\r\n  'szlig',\r\n  'thorn',\r\n  'times',\r\n  'uacute',\r\n  'ucirc',\r\n  'ugrave',\r\n  'uml',\r\n  'uuml',\r\n  'yacute',\r\n  'yen',\r\n  'yuml'\r\n]\r\n", "/**\r\n * Map of named character references from HTML 4.\r\n *\r\n * @type {Record<string, string>}\r\n */\r\nexport const characterEntitiesHtml4 = {\r\n  nbsp: ' ',\r\n  iexcl: '¡',\r\n  cent: '¢',\r\n  pound: '£',\r\n  curren: '¤',\r\n  yen: '¥',\r\n  brvbar: '¦',\r\n  sect: '§',\r\n  uml: '¨',\r\n  copy: '©',\r\n  ordf: 'ª',\r\n  laquo: '«',\r\n  not: '¬',\r\n  shy: '­',\r\n  reg: '®',\r\n  macr: '¯',\r\n  deg: '°',\r\n  plusmn: '±',\r\n  sup2: '²',\r\n  sup3: '³',\r\n  acute: '´',\r\n  micro: 'µ',\r\n  para: '¶',\r\n  middot: '·',\r\n  cedil: '¸',\r\n  sup1: '¹',\r\n  ordm: 'º',\r\n  raquo: '»',\r\n  frac14: '¼',\r\n  frac12: '½',\r\n  frac34: '¾',\r\n  iquest: '¿',\r\n  Agrave: 'À',\r\n  Aacute: 'Á',\r\n  Acirc: 'Â',\r\n  Atilde: 'Ã',\r\n  Auml: 'Ä',\r\n  Aring: 'Å',\r\n  AElig: 'Æ',\r\n  Ccedil: 'Ç',\r\n  Egrave: 'È',\r\n  Eacute: 'É',\r\n  Ecirc: 'Ê',\r\n  Euml: 'Ë',\r\n  Igrave: 'Ì',\r\n  Iacute: 'Í',\r\n  Icirc: 'Î',\r\n  Iuml: 'Ï',\r\n  ETH: 'Ð',\r\n  Ntilde: 'Ñ',\r\n  Ograve: 'Ò',\r\n  Oacute: 'Ó',\r\n  Ocirc: 'Ô',\r\n  Otilde: 'Õ',\r\n  Ouml: 'Ö',\r\n  times: '×',\r\n  Oslash: 'Ø',\r\n  Ugrave: 'Ù',\r\n  Uacute: 'Ú',\r\n  Ucirc: 'Û',\r\n  Uuml: 'Ü',\r\n  Yacute: 'Ý',\r\n  THORN: 'Þ',\r\n  szlig: 'ß',\r\n  agrave: 'à',\r\n  aacute: 'á',\r\n  acirc: 'â',\r\n  atilde: 'ã',\r\n  auml: 'ä',\r\n  aring: 'å',\r\n  aelig: 'æ',\r\n  ccedil: 'ç',\r\n  egrave: 'è',\r\n  eacute: 'é',\r\n  ecirc: 'ê',\r\n  euml: 'ë',\r\n  igrave: 'ì',\r\n  iacute: 'í',\r\n  icirc: 'î',\r\n  iuml: 'ï',\r\n  eth: 'ð',\r\n  ntilde: 'ñ',\r\n  ograve: 'ò',\r\n  oacute: 'ó',\r\n  ocirc: 'ô',\r\n  otilde: 'õ',\r\n  ouml: 'ö',\r\n  divide: '÷',\r\n  oslash: 'ø',\r\n  ugrave: 'ù',\r\n  uacute: 'ú',\r\n  ucirc: 'û',\r\n  uuml: 'ü',\r\n  yacute: 'ý',\r\n  thorn: 'þ',\r\n  yuml: 'ÿ',\r\n  fnof: 'ƒ',\r\n  Alpha: 'Α',\r\n  Beta: 'Β',\r\n  Gamma: 'Γ',\r\n  Delta: 'Δ',\r\n  Epsilon: 'Ε',\r\n  Zeta: 'Ζ',\r\n  Eta: 'Η',\r\n  Theta: 'Θ',\r\n  Iota: 'Ι',\r\n  Kappa: 'Κ',\r\n  Lambda: 'Λ',\r\n  Mu: 'Μ',\r\n  Nu: 'Ν',\r\n  Xi: 'Ξ',\r\n  Omicron: 'Ο',\r\n  Pi: 'Π',\r\n  Rho: 'Ρ',\r\n  Sigma: 'Σ',\r\n  Tau: 'Τ',\r\n  Upsilon: 'Υ',\r\n  Phi: 'Φ',\r\n  Chi: 'Χ',\r\n  Psi: 'Ψ',\r\n  Omega: 'Ω',\r\n  alpha: 'α',\r\n  beta: 'β',\r\n  gamma: 'γ',\r\n  delta: 'δ',\r\n  epsilon: 'ε',\r\n  zeta: 'ζ',\r\n  eta: 'η',\r\n  theta: 'θ',\r\n  iota: 'ι',\r\n  kappa: 'κ',\r\n  lambda: 'λ',\r\n  mu: 'μ',\r\n  nu: 'ν',\r\n  xi: 'ξ',\r\n  omicron: 'ο',\r\n  pi: 'π',\r\n  rho: 'ρ',\r\n  sigmaf: 'ς',\r\n  sigma: 'σ',\r\n  tau: 'τ',\r\n  upsilon: 'υ',\r\n  phi: 'φ',\r\n  chi: 'χ',\r\n  psi: 'ψ',\r\n  omega: 'ω',\r\n  thetasym: 'ϑ',\r\n  upsih: 'ϒ',\r\n  piv: 'ϖ',\r\n  bull: '•',\r\n  hellip: '…',\r\n  prime: '′',\r\n  Prime: '″',\r\n  oline: '‾',\r\n  frasl: '⁄',\r\n  weierp: '℘',\r\n  image: 'ℑ',\r\n  real: 'ℜ',\r\n  trade: '™',\r\n  alefsym: 'ℵ',\r\n  larr: '←',\r\n  uarr: '↑',\r\n  rarr: '→',\r\n  darr: '↓',\r\n  harr: '↔',\r\n  crarr: '↵',\r\n  lArr: '⇐',\r\n  uArr: '⇑',\r\n  rArr: '⇒',\r\n  dArr: '⇓',\r\n  hArr: '⇔',\r\n  forall: '∀',\r\n  part: '∂',\r\n  exist: '∃',\r\n  empty: '∅',\r\n  nabla: '∇',\r\n  isin: '∈',\r\n  notin: '∉',\r\n  ni: '∋',\r\n  prod: '∏',\r\n  sum: '∑',\r\n  minus: '−',\r\n  lowast: '∗',\r\n  radic: '√',\r\n  prop: '∝',\r\n  infin: '∞',\r\n  ang: '∠',\r\n  and: '∧',\r\n  or: '∨',\r\n  cap: '∩',\r\n  cup: '∪',\r\n  int: '∫',\r\n  there4: '∴',\r\n  sim: '∼',\r\n  cong: '≅',\r\n  asymp: '≈',\r\n  ne: '≠',\r\n  equiv: '≡',\r\n  le: '≤',\r\n  ge: '≥',\r\n  sub: '⊂',\r\n  sup: '⊃',\r\n  nsub: '⊄',\r\n  sube: '⊆',\r\n  supe: '⊇',\r\n  oplus: '⊕',\r\n  otimes: '⊗',\r\n  perp: '⊥',\r\n  sdot: '⋅',\r\n  lceil: '⌈',\r\n  rceil: '⌉',\r\n  lfloor: '⌊',\r\n  rfloor: '⌋',\r\n  lang: '〈',\r\n  rang: '〉',\r\n  loz: '◊',\r\n  spades: '♠',\r\n  clubs: '♣',\r\n  hearts: '♥',\r\n  diams: '♦',\r\n  quot: '\"',\r\n  amp: '&',\r\n  lt: '<',\r\n  gt: '>',\r\n  OElig: 'Œ',\r\n  oelig: 'œ',\r\n  Scaron: 'Š',\r\n  scaron: 'š',\r\n  Yuml: 'Ÿ',\r\n  circ: 'ˆ',\r\n  tilde: '˜',\r\n  ensp: ' ',\r\n  emsp: ' ',\r\n  thinsp: ' ',\r\n  zwnj: '‌',\r\n  zwj: '‍',\r\n  lrm: '‎',\r\n  rlm: '‏',\r\n  ndash: '–',\r\n  mdash: '—',\r\n  lsquo: '‘',\r\n  rsquo: '’',\r\n  sbquo: '‚',\r\n  ldquo: '“',\r\n  rdquo: '”',\r\n  bdquo: '„',\r\n  dagger: '†',\r\n  Dagger: '‡',\r\n  permil: '‰',\r\n  lsaquo: '‹',\r\n  rsaquo: '›',\r\n  euro: '€'\r\n}\r\n", "/**\r\n * List of legacy (that don’t need a trailing `;`) named references which could,\r\n * depending on what follows them, turn into a different meaning\r\n *\r\n * @type {Array<string>}\r\n */\r\nexport const dangerous = [\r\n  'cent',\r\n  'copy',\r\n  'divide',\r\n  'gt',\r\n  'lt',\r\n  'not',\r\n  'para',\r\n  'times'\r\n]\r\n", "import {characterEntitiesLegacy} from 'character-entities-legacy'\r\nimport {characterEntitiesHtml4} from 'character-entities-html4'\r\nimport {dangerous} from '../constant/dangerous.js'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * `characterEntitiesHtml4` but inverted.\r\n *\r\n * @type {Record<string, string>}\r\n */\r\nconst characters = {}\r\n\r\n/** @type {string} */\r\nlet key\r\n\r\nfor (key in characterEntitiesHtml4) {\r\n  if (own.call(characterEntitiesHtml4, key)) {\r\n    characters[characterEntitiesHtml4[key]] = key\r\n  }\r\n}\r\n\r\nconst notAlphanumericRegex = /[^\\dA-Za-z]/\r\n\r\n/**\r\n * Configurable ways to encode characters as named references.\r\n *\r\n * @param {number} code\r\n * @param {number} next\r\n * @param {boolean|undefined} omit\r\n * @param {boolean|undefined} attribute\r\n * @returns {string}\r\n */\r\nexport function toNamed(code, next, omit, attribute) {\r\n  const character = String.fromCharCode(code)\r\n\r\n  if (own.call(characters, character)) {\r\n    const name = characters[character]\r\n    const value = '&' + name\r\n\r\n    if (\r\n      omit &&\r\n      characterEntitiesLegacy.includes(name) &&\r\n      !dangerous.includes(name) &&\r\n      (!attribute ||\r\n        (next &&\r\n          next !== 61 /* `=` */ &&\r\n          notAlphanumericRegex.test(String.fromCharCode(next))))\r\n    ) {\r\n      return value\r\n    }\r\n\r\n    return value + ';'\r\n  }\r\n\r\n  return ''\r\n}\r\n", "/**\r\n * @typedef FormatSmartOptions\r\n * @property {boolean} [useNamedReferences=false]\r\n *   Prefer named character references (`&amp;`) where possible.\r\n * @property {boolean} [useShortestReferences=false]\r\n *   Prefer the shortest possible reference, if that results in less bytes.\r\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\r\n * @property {boolean} [omitOptionalSemicolons=false]\r\n *   Whether to omit semicolons when possible.\r\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\r\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\r\n * @property {boolean} [attribute=false]\r\n *   Create character references which don’t fail in attributes.\r\n *   **Note**: `attribute` only applies when operating dangerously with\r\n *   `omitOptionalSemicolons: true`.\r\n */\r\n\r\nimport {toHexadecimal} from './to-hexadecimal.js'\r\nimport {toDecimal} from './to-decimal.js'\r\nimport {toNamed} from './to-named.js'\r\n\r\n/**\r\n * Configurable ways to encode a character yielding pretty or small results.\r\n *\r\n * @param {number} code\r\n * @param {number} next\r\n * @param {FormatSmartOptions} options\r\n * @returns {string}\r\n */\r\nexport function formatSmart(code, next, options) {\r\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\r\n  /** @type {string|undefined} */\r\n  let named\r\n\r\n  if (options.useNamedReferences || options.useShortestReferences) {\r\n    named = toNamed(\r\n      code,\r\n      next,\r\n      options.omitOptionalSemicolons,\r\n      options.attribute\r\n    )\r\n  }\r\n\r\n  // Use the shortest numeric reference when requested.\r\n  // A simple algorithm would use decimal for all code points under 100, as\r\n  // those are shorter than hexadecimal:\r\n  //\r\n  // * `&#99;` vs `&#x63;` (decimal shorter)\r\n  // * `&#100;` vs `&#x64;` (equal)\r\n  //\r\n  // However, because we take `next` into consideration when `omit` is used,\r\n  // And it would be possible that decimals are shorter on bigger values as\r\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\r\n  if (\r\n    (options.useShortestReferences || !named) &&\r\n    options.useShortestReferences\r\n  ) {\r\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\r\n\r\n    if (decimal.length < numeric.length) {\r\n      numeric = decimal\r\n    }\r\n  }\r\n\r\n  return named &&\r\n    (!options.useShortestReferences || named.length < numeric.length)\r\n    ? named\r\n    : numeric\r\n}\r\n", "/**\r\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\r\n * @typedef {import('./core.js').CoreOptions} LightOptions\r\n */\r\n\r\nimport {core} from './core.js'\r\nimport {formatSmart} from './util/format-smart.js'\r\nimport {formatBasic} from './util/format-basic.js'\r\n\r\n/**\r\n * Encode special characters in `value`.\r\n *\r\n * @param {string} value\r\n *   Value to encode.\r\n * @param {Options} [options]\r\n *   Configuration.\r\n * @returns {string}\r\n *   Encoded value.\r\n */\r\nexport function stringifyEntities(value, options) {\r\n  return core(value, Object.assign({format: formatSmart}, options))\r\n}\r\n\r\n/**\r\n * Encode special characters in `value` as hexadecimals.\r\n *\r\n * @param {string} value\r\n *   Value to encode.\r\n * @param {LightOptions} [options]\r\n *   Configuration.\r\n * @returns {string}\r\n *   Encoded value.\r\n */\r\nexport function stringifyEntitiesLight(value, options) {\r\n  return core(value, Object.assign({format: formatBasic}, options))\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
