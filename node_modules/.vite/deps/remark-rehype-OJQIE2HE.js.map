{
  "version": 3,
  "sources": ["../../mdast-util-to-hast/lib/handlers/blockquote.js", "../../mdast-util-to-hast/lib/handlers/break.js", "../../mdast-util-to-hast/lib/handlers/code.js", "../../mdast-util-to-hast/lib/handlers/delete.js", "../../mdast-util-to-hast/lib/handlers/emphasis.js", "../../mdast-util-to-hast/lib/handlers/footnote-reference.js", "../../mdast-util-to-hast/lib/handlers/footnote.js", "../../mdast-util-to-hast/lib/handlers/heading.js", "../../mdast-util-to-hast/lib/handlers/html.js", "../../mdast-util-to-hast/lib/revert.js", "../../mdast-util-to-hast/lib/handlers/image-reference.js", "../../mdast-util-to-hast/lib/handlers/image.js", "../../mdast-util-to-hast/lib/handlers/inline-code.js", "../../mdast-util-to-hast/lib/handlers/link-reference.js", "../../mdast-util-to-hast/lib/handlers/link.js", "../../mdast-util-to-hast/lib/handlers/list-item.js", "../../mdast-util-to-hast/lib/handlers/list.js", "../../mdast-util-to-hast/lib/handlers/paragraph.js", "../../mdast-util-to-hast/lib/handlers/root.js", "../../mdast-util-to-hast/lib/handlers/strong.js", "../../unist-util-position/lib/index.js", "../../mdast-util-to-hast/lib/handlers/table.js", "../../mdast-util-to-hast/lib/handlers/table-row.js", "../../mdast-util-to-hast/lib/handlers/table-cell.js", "../../trim-lines/index.js", "../../mdast-util-to-hast/lib/handlers/text.js", "../../mdast-util-to-hast/lib/handlers/thematic-break.js", "../../mdast-util-to-hast/lib/handlers/index.js", "../../unist-util-generated/lib/index.js", "../../mdast-util-definitions/lib/index.js", "../../mdast-util-to-hast/lib/state.js", "../../mdast-util-to-hast/lib/footer.js", "../../mdast-util-to-hast/lib/index.js", "../../remark-rehype/lib/index.js"],
  "sourcesContent": ["/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Blockquote} Blockquote\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * Turn an mdast `blockquote` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Blockquote} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function blockquote(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'blockquote',\r\n    properties: {},\r\n    children: state.wrap(state.all(node), true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('mdast').Break} Break\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * Turn an mdast `break` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Break} node\r\n *   mdast node.\r\n * @returns {Array<Element | Text>}\r\n *   hast element content.\r\n */\r\nexport function hardBreak(state, node) {\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\r\n  state.patch(node, result)\r\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('../state.js').State} State\r\n\r\n */\r\n\r\n/**\r\n * Turn an mdast `code` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Code} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function code(state, node) {\r\n  const value = node.value ? node.value + '\\n' : ''\r\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\r\n  // on for years in remark now.\r\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\r\n  /** @type {Properties} */\r\n  const properties = {}\r\n\r\n  if (lang) {\r\n    properties.className = ['language-' + lang]\r\n  }\r\n\r\n  // Create `<code>`.\r\n  /** @type {Element} */\r\n  let result = {\r\n    type: 'element',\r\n    tagName: 'code',\r\n    properties,\r\n    children: [{type: 'text', value}]\r\n  }\r\n\r\n  if (node.meta) {\r\n    result.data = {meta: node.meta}\r\n  }\r\n\r\n  state.patch(node, result)\r\n  result = state.applyData(node, result)\r\n\r\n  // Create `<pre>`.\r\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\r\n  state.patch(node, result)\r\n  return result\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Delete} Delete\r\n * @typedef {import('../state.js').State} State\r\n\r\n */\r\n\r\n/**\r\n * Turn an mdast `delete` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Delete} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function strikethrough(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'del',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Emphasis} Emphasis\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * Turn an mdast `emphasis` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Emphasis} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function emphasis(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'em',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Turn an mdast `footnoteReference` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {FootnoteReference} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function footnoteReference(state, node) {\r\n  const id = String(node.identifier).toUpperCase()\r\n  const safeId = normalizeUri(id.toLowerCase())\r\n  const index = state.footnoteOrder.indexOf(id)\r\n  /** @type {number} */\r\n  let counter\r\n\r\n  if (index === -1) {\r\n    state.footnoteOrder.push(id)\r\n    state.footnoteCounts[id] = 1\r\n    counter = state.footnoteOrder.length\r\n  } else {\r\n    state.footnoteCounts[id]++\r\n    counter = index + 1\r\n  }\r\n\r\n  const reuseCounter = state.footnoteCounts[id]\r\n\r\n  /** @type {Element} */\r\n  const link = {\r\n    type: 'element',\r\n    tagName: 'a',\r\n    properties: {\r\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\r\n      id:\r\n        state.clobberPrefix +\r\n        'fnref-' +\r\n        safeId +\r\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\r\n      dataFootnoteRef: true,\r\n      ariaDescribedBy: ['footnote-label']\r\n    },\r\n    children: [{type: 'text', value: String(counter)}]\r\n  }\r\n  state.patch(node, link)\r\n\r\n  /** @type {Element} */\r\n  const sup = {\r\n    type: 'element',\r\n    tagName: 'sup',\r\n    properties: {},\r\n    children: [link]\r\n  }\r\n  state.patch(node, sup)\r\n  return state.applyData(node, sup)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Footnote} Footnote\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {footnoteReference} from './footnote-reference.js'\r\n\r\n// To do: when both:\r\n// * <https://github.com/micromark/micromark-extension-footnote>\r\n// * <https://github.com/syntax-tree/mdast-util-footnote>\r\n// …are archived, remove this (also from mdast).\r\n// These inline notes are not used in GFM.\r\n\r\n/**\r\n * Turn an mdast `footnote` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Footnote} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function footnote(state, node) {\r\n  const footnoteById = state.footnoteById\r\n  let no = 1\r\n\r\n  while (no in footnoteById) no++\r\n\r\n  const identifier = String(no)\r\n\r\n  footnoteById[identifier] = {\r\n    type: 'footnoteDefinition',\r\n    identifier,\r\n    children: [{type: 'paragraph', children: node.children}],\r\n    position: node.position\r\n  }\r\n\r\n  return footnoteReference(state, {\r\n    type: 'footnoteReference',\r\n    identifier,\r\n    position: node.position\r\n  })\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * Turn an mdast `heading` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Heading} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function heading(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'h' + node.depth,\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').HTML} Html\r\n * @typedef {import('../state.js').State} State\r\n * @typedef {import('../../index.js').Raw} Raw\r\n */\r\n\r\n/**\r\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\r\n * nothing).\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Html} node\r\n *   mdast node.\r\n * @returns {Raw | Element | null}\r\n *   hast node.\r\n */\r\nexport function html(state, node) {\r\n  if (state.dangerous) {\r\n    /** @type {Raw} */\r\n    const result = {type: 'raw', value: node.value}\r\n    state.patch(node, result)\r\n    return state.applyData(node, result)\r\n  }\r\n\r\n  // To do: next major: return `undefined`.\r\n  return null\r\n}\r\n", "/**\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n *\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').Reference} Reference\r\n * @typedef {import('mdast').Root} Root\r\n *\r\n * @typedef {import('./state.js').State} State\r\n */\r\n\r\n/**\r\n * @typedef {Root | Content} Nodes\r\n * @typedef {Extract<Nodes, Reference>} References\r\n */\r\n\r\n// To do: next major: always return array.\r\n\r\n/**\r\n * Return the content of a reference without definition as plain text.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {References} node\r\n *   Reference node (image, link).\r\n * @returns {ElementContent | Array<ElementContent>}\r\n *   hast content.\r\n */\r\nexport function revert(state, node) {\r\n  const subtype = node.referenceType\r\n  let suffix = ']'\r\n\r\n  if (subtype === 'collapsed') {\r\n    suffix += '[]'\r\n  } else if (subtype === 'full') {\r\n    suffix += '[' + (node.label || node.identifier) + ']'\r\n  }\r\n\r\n  if (node.type === 'imageReference') {\r\n    return {type: 'text', value: '![' + node.alt + suffix}\r\n  }\r\n\r\n  const contents = state.all(node)\r\n  const head = contents[0]\r\n\r\n  if (head && head.type === 'text') {\r\n    head.value = '[' + head.value\r\n  } else {\r\n    contents.unshift({type: 'text', value: '['})\r\n  }\r\n\r\n  const tail = contents[contents.length - 1]\r\n\r\n  if (tail && tail.type === 'text') {\r\n    tail.value += suffix\r\n  } else {\r\n    contents.push({type: 'text', value: suffix})\r\n  }\r\n\r\n  return contents\r\n}\r\n", "/**\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').ImageReference} ImageReference\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\nimport {revert} from '../revert.js'\r\n\r\n/**\r\n * Turn an mdast `imageReference` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {ImageReference} node\r\n *   mdast node.\r\n * @returns {ElementContent | Array<ElementContent>}\r\n *   hast node.\r\n */\r\nexport function imageReference(state, node) {\r\n  const def = state.definition(node.identifier)\r\n\r\n  if (!def) {\r\n    return revert(state, node)\r\n  }\r\n\r\n  /** @type {Properties} */\r\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\r\n\r\n  if (def.title !== null && def.title !== undefined) {\r\n    properties.title = def.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'img', properties, children: []}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Image} Image\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Turn an mdast `image` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Image} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function image(state, node) {\r\n  /** @type {Properties} */\r\n  const properties = {src: normalizeUri(node.url)}\r\n\r\n  if (node.alt !== null && node.alt !== undefined) {\r\n    properties.alt = node.alt\r\n  }\r\n\r\n  if (node.title !== null && node.title !== undefined) {\r\n    properties.title = node.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'img', properties, children: []}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * Turn an mdast `inlineCode` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {InlineCode} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function inlineCode(state, node) {\r\n  /** @type {Text} */\r\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\r\n  state.patch(node, text)\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'code',\r\n    properties: {},\r\n    children: [text]\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').LinkReference} LinkReference\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\nimport {revert} from '../revert.js'\r\n\r\n/**\r\n * Turn an mdast `linkReference` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {LinkReference} node\r\n *   mdast node.\r\n * @returns {ElementContent | Array<ElementContent>}\r\n *   hast node.\r\n */\r\nexport function linkReference(state, node) {\r\n  const def = state.definition(node.identifier)\r\n\r\n  if (!def) {\r\n    return revert(state, node)\r\n  }\r\n\r\n  /** @type {Properties} */\r\n  const properties = {href: normalizeUri(def.url || '')}\r\n\r\n  if (def.title !== null && def.title !== undefined) {\r\n    properties.title = def.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'a',\r\n    properties,\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Turn an mdast `link` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Link} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function link(state, node) {\r\n  /** @type {Properties} */\r\n  const properties = {href: normalizeUri(node.url)}\r\n\r\n  if (node.title !== null && node.title !== undefined) {\r\n    properties.title = node.title\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'a',\r\n    properties,\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Parent} Parent\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * @typedef {Root | Content} Nodes\r\n * @typedef {Extract<Nodes, Parent>} Parents\r\n */\r\n\r\n/**\r\n * Turn an mdast `listItem` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {ListItem} node\r\n *   mdast node.\r\n * @param {Parents | null | undefined} parent\r\n *   Parent of `node`.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function listItem(state, node, parent) {\r\n  const results = state.all(node)\r\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\r\n  /** @type {Properties} */\r\n  const properties = {}\r\n  /** @type {Array<ElementContent>} */\r\n  const children = []\r\n\r\n  if (typeof node.checked === 'boolean') {\r\n    const head = results[0]\r\n    /** @type {Element} */\r\n    let paragraph\r\n\r\n    if (head && head.type === 'element' && head.tagName === 'p') {\r\n      paragraph = head\r\n    } else {\r\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\r\n      results.unshift(paragraph)\r\n    }\r\n\r\n    if (paragraph.children.length > 0) {\r\n      paragraph.children.unshift({type: 'text', value: ' '})\r\n    }\r\n\r\n    paragraph.children.unshift({\r\n      type: 'element',\r\n      tagName: 'input',\r\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\r\n      children: []\r\n    })\r\n\r\n    // According to github-markdown-css, this class hides bullet.\r\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\r\n    properties.className = ['task-list-item']\r\n  }\r\n\r\n  let index = -1\r\n\r\n  while (++index < results.length) {\r\n    const child = results[index]\r\n\r\n    // Add eols before nodes, except if this is a loose, first paragraph.\r\n    if (\r\n      loose ||\r\n      index !== 0 ||\r\n      child.type !== 'element' ||\r\n      child.tagName !== 'p'\r\n    ) {\r\n      children.push({type: 'text', value: '\\n'})\r\n    }\r\n\r\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\r\n      children.push(...child.children)\r\n    } else {\r\n      children.push(child)\r\n    }\r\n  }\r\n\r\n  const tail = results[results.length - 1]\r\n\r\n  // Add a final eol.\r\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\r\n    children.push({type: 'text', value: '\\n'})\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {type: 'element', tagName: 'li', properties, children}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n\r\n/**\r\n * @param {Parents} node\r\n * @return {Boolean}\r\n */\r\nfunction listLoose(node) {\r\n  let loose = false\r\n  if (node.type === 'list') {\r\n    loose = node.spread || false\r\n    const children = node.children\r\n    let index = -1\r\n\r\n    while (!loose && ++index < children.length) {\r\n      loose = listItemLoose(children[index])\r\n    }\r\n  }\r\n\r\n  return loose\r\n}\r\n\r\n/**\r\n * @param {ListItem} node\r\n * @return {Boolean}\r\n */\r\nfunction listItemLoose(node) {\r\n  const spread = node.spread\r\n\r\n  return spread === undefined || spread === null\r\n    ? node.children.length > 1\r\n    : spread\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * Turn an mdast `list` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {List} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function list(state, node) {\r\n  /** @type {Properties} */\r\n  const properties = {}\r\n  const results = state.all(node)\r\n  let index = -1\r\n\r\n  if (typeof node.start === 'number' && node.start !== 1) {\r\n    properties.start = node.start\r\n  }\r\n\r\n  // Like GitHub, add a class for custom styling.\r\n  while (++index < results.length) {\r\n    const child = results[index]\r\n\r\n    if (\r\n      child.type === 'element' &&\r\n      child.tagName === 'li' &&\r\n      child.properties &&\r\n      Array.isArray(child.properties.className) &&\r\n      child.properties.className.includes('task-list-item')\r\n    ) {\r\n      properties.className = ['contains-task-list']\r\n      break\r\n    }\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: node.ordered ? 'ol' : 'ul',\r\n    properties,\r\n    children: state.wrap(results, true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * Turn an mdast `paragraph` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Paragraph} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function paragraph(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'p',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('hast').Element} HastElement\r\n * @typedef {import('mdast').Root} MdastRoot\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * Turn an mdast `root` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdastRoot} node\r\n *   mdast node.\r\n * @returns {HastRoot | HastElement}\r\n *   hast node.\r\n */\r\nexport function root(state, node) {\r\n  /** @type {HastRoot} */\r\n  const result = {type: 'root', children: state.wrap(state.all(node))}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * Turn an mdast `strong` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Strong} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function strong(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'strong',\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('unist').Position} Position\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n */\r\n\r\n/**\r\n * @typedef NodeLike\r\n * @property {string} type\r\n * @property {PositionLike | null | undefined} [position]\r\n *\r\n * @typedef PositionLike\r\n * @property {PointLike | null | undefined} [start]\r\n * @property {PointLike | null | undefined} [end]\r\n *\r\n * @typedef PointLike\r\n * @property {number | null | undefined} [line]\r\n * @property {number | null | undefined} [column]\r\n * @property {number | null | undefined} [offset]\r\n */\r\n\r\n/**\r\n * Get the starting point of `node`.\r\n *\r\n * @param node\r\n *   Node.\r\n * @returns\r\n *   Point.\r\n */\r\nexport const pointStart = point('start')\r\n\r\n/**\r\n * Get the ending point of `node`.\r\n *\r\n * @param node\r\n *   Node.\r\n * @returns\r\n *   Point.\r\n */\r\nexport const pointEnd = point('end')\r\n\r\n/**\r\n * Get the positional info of `node`.\r\n *\r\n * @param {NodeLike | Node | null | undefined} [node]\r\n *   Node.\r\n * @returns {Position}\r\n *   Position.\r\n */\r\nexport function position(node) {\r\n  return {start: pointStart(node), end: pointEnd(node)}\r\n}\r\n\r\n/**\r\n * Get the positional info of `node`.\r\n *\r\n * @param {'start' | 'end'} type\r\n *   Side.\r\n * @returns\r\n *   Getter.\r\n */\r\nfunction point(type) {\r\n  return point\r\n\r\n  /**\r\n   * Get the point info of `node` at a bound side.\r\n   *\r\n   * @param {NodeLike | Node | null | undefined} [node]\r\n   * @returns {Point}\r\n   */\r\n  function point(node) {\r\n    const point = (node && node.position && node.position[type]) || {}\r\n\r\n    // To do: next major: don’t return points when invalid.\r\n    return {\r\n      // @ts-expect-error: in practice, null is allowed.\r\n      line: point.line || null,\r\n      // @ts-expect-error: in practice, null is allowed.\r\n      column: point.column || null,\r\n      // @ts-expect-error: in practice, null is allowed.\r\n      offset: point.offset > -1 ? point.offset : null\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').Table} Table\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {pointStart, pointEnd} from 'unist-util-position'\r\n\r\n/**\r\n * Turn an mdast `table` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Table} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function table(state, node) {\r\n  const rows = state.all(node)\r\n  const firstRow = rows.shift()\r\n  /** @type {Array<Element>} */\r\n  const tableContent = []\r\n\r\n  if (firstRow) {\r\n    /** @type {Element} */\r\n    const head = {\r\n      type: 'element',\r\n      tagName: 'thead',\r\n      properties: {},\r\n      children: state.wrap([firstRow], true)\r\n    }\r\n    state.patch(node.children[0], head)\r\n    tableContent.push(head)\r\n  }\r\n\r\n  if (rows.length > 0) {\r\n    /** @type {Element} */\r\n    const body = {\r\n      type: 'element',\r\n      tagName: 'tbody',\r\n      properties: {},\r\n      children: state.wrap(rows, true)\r\n    }\r\n\r\n    const start = pointStart(node.children[1])\r\n    const end = pointEnd(node.children[node.children.length - 1])\r\n    if (start.line && end.line) body.position = {start, end}\r\n    tableContent.push(body)\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'table',\r\n    properties: {},\r\n    children: state.wrap(tableContent, true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').Parent} Parent\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast').TableRow} TableRow\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * @typedef {Root | Content} Nodes\r\n * @typedef {Extract<Nodes, Parent>} Parents\r\n */\r\n\r\n/**\r\n * Turn an mdast `tableRow` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {TableRow} node\r\n *   mdast node.\r\n * @param {Parents | null | undefined} parent\r\n *   Parent of `node`.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function tableRow(state, node, parent) {\r\n  const siblings = parent ? parent.children : undefined\r\n  // Generate a body row when without parent.\r\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\r\n  const tagName = rowIndex === 0 ? 'th' : 'td'\r\n  const align = parent && parent.type === 'table' ? parent.align : undefined\r\n  const length = align ? align.length : node.children.length\r\n  let cellIndex = -1\r\n  /** @type {Array<ElementContent>} */\r\n  const cells = []\r\n\r\n  while (++cellIndex < length) {\r\n    // Note: can also be undefined.\r\n    const cell = node.children[cellIndex]\r\n    /** @type {Properties} */\r\n    const properties = {}\r\n    const alignValue = align ? align[cellIndex] : undefined\r\n\r\n    if (alignValue) {\r\n      properties.align = alignValue\r\n    }\r\n\r\n    /** @type {Element} */\r\n    let result = {type: 'element', tagName, properties, children: []}\r\n\r\n    if (cell) {\r\n      result.children = state.all(cell)\r\n      state.patch(cell, result)\r\n      result = state.applyData(node, result)\r\n    }\r\n\r\n    cells.push(result)\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'tr',\r\n    properties: {},\r\n    children: state.wrap(cells, true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').TableCell} TableCell\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * Turn an mdast `tableCell` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {TableCell} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function tableCell(state, node) {\r\n  // Note: this function is normally not called: see `table-row` for how rows\r\n  // and their cells are compiled.\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'td', // Assume body cell.\r\n    properties: {},\r\n    children: state.all(node)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "const tab = 9 /* `\\t` */\r\nconst space = 32 /* ` ` */\r\n\r\n/**\r\n * Remove initial and final spaces and tabs at the line breaks in `value`.\r\n * Does not trim initial and final spaces and tabs of the value itself.\r\n *\r\n * @param {string} value\r\n *   Value to trim.\r\n * @returns {string}\r\n *   Trimmed value.\r\n */\r\nexport function trimLines(value) {\r\n  const source = String(value)\r\n  const search = /\\r?\\n|\\r/g\r\n  let match = search.exec(source)\r\n  let last = 0\r\n  /** @type {Array<string>} */\r\n  const lines = []\r\n\r\n  while (match) {\r\n    lines.push(\r\n      trimLine(source.slice(last, match.index), last > 0, true),\r\n      match[0]\r\n    )\r\n\r\n    last = match.index + match[0].length\r\n    match = search.exec(source)\r\n  }\r\n\r\n  lines.push(trimLine(source.slice(last), last > 0, false))\r\n\r\n  return lines.join('')\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n *   Line to trim.\r\n * @param {boolean} start\r\n *   Whether to trim the start of the line.\r\n * @param {boolean} end\r\n *   Whether to trim the end of the line.\r\n * @returns {string}\r\n *   Trimmed line.\r\n */\r\nfunction trimLine(value, start, end) {\r\n  let startIndex = 0\r\n  let endIndex = value.length\r\n\r\n  if (start) {\r\n    let code = value.codePointAt(startIndex)\r\n\r\n    while (code === tab || code === space) {\r\n      startIndex++\r\n      code = value.codePointAt(startIndex)\r\n    }\r\n  }\r\n\r\n  if (end) {\r\n    let code = value.codePointAt(endIndex - 1)\r\n\r\n    while (code === tab || code === space) {\r\n      endIndex--\r\n      code = value.codePointAt(endIndex - 1)\r\n    }\r\n  }\r\n\r\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} HastElement\r\n * @typedef {import('hast').Text} HastText\r\n * @typedef {import('mdast').Text} MdastText\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\nimport {trimLines} from 'trim-lines'\r\n\r\n/**\r\n * Turn an mdast `text` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdastText} node\r\n *   mdast node.\r\n * @returns {HastText | HastElement}\r\n *   hast node.\r\n */\r\nexport function text(state, node) {\r\n  /** @type {HastText} */\r\n  const result = {type: 'text', value: trimLines(String(node.value))}\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n/**\r\n * Turn an mdast `thematicBreak` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {ThematicBreak} node\r\n *   mdast node.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function thematicBreak(state, node) {\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'hr',\r\n    properties: {},\r\n    children: []\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n", "import {blockquote} from './blockquote.js'\r\nimport {hardBreak} from './break.js'\r\nimport {code} from './code.js'\r\nimport {strikethrough} from './delete.js'\r\nimport {emphasis} from './emphasis.js'\r\nimport {footnoteReference} from './footnote-reference.js'\r\nimport {footnote} from './footnote.js'\r\nimport {heading} from './heading.js'\r\nimport {html} from './html.js'\r\nimport {imageReference} from './image-reference.js'\r\nimport {image} from './image.js'\r\nimport {inlineCode} from './inline-code.js'\r\nimport {linkReference} from './link-reference.js'\r\nimport {link} from './link.js'\r\nimport {listItem} from './list-item.js'\r\nimport {list} from './list.js'\r\nimport {paragraph} from './paragraph.js'\r\nimport {root} from './root.js'\r\nimport {strong} from './strong.js'\r\nimport {table} from './table.js'\r\nimport {tableRow} from './table-row.js'\r\nimport {tableCell} from './table-cell.js'\r\nimport {text} from './text.js'\r\nimport {thematicBreak} from './thematic-break.js'\r\n\r\n/**\r\n * Default handlers for nodes.\r\n */\r\nexport const handlers = {\r\n  blockquote,\r\n  break: hardBreak,\r\n  code,\r\n  delete: strikethrough,\r\n  emphasis,\r\n  footnoteReference,\r\n  footnote,\r\n  heading,\r\n  html,\r\n  imageReference,\r\n  image,\r\n  inlineCode,\r\n  linkReference,\r\n  link,\r\n  listItem,\r\n  list,\r\n  paragraph,\r\n  root,\r\n  strong,\r\n  table,\r\n  tableCell,\r\n  tableRow,\r\n  text,\r\n  thematicBreak,\r\n  toml: ignore,\r\n  yaml: ignore,\r\n  definition: ignore,\r\n  footnoteDefinition: ignore\r\n}\r\n\r\n// Return nothing for nodes that are ignored.\r\nfunction ignore() {\r\n  // To do: next major: return `undefined`.\r\n  return null\r\n}\r\n", "/**\r\n * @typedef PointLike\r\n * @property {number | null | undefined} [line]\r\n * @property {number | null | undefined} [column]\r\n * @property {number | null | undefined} [offset]\r\n *\r\n * @typedef PositionLike\r\n * @property {PointLike | null | undefined} [start]\r\n * @property {PointLike | null | undefined} [end]\r\n *\r\n * @typedef NodeLike\r\n * @property {PositionLike | null | undefined} [position]\r\n */\r\n\r\n/**\r\n * Check if `node` is generated.\r\n *\r\n * @param {NodeLike | null | undefined} [node]\r\n *   Node to check.\r\n * @returns {boolean}\r\n *   Whether `node` is generated (does not have positional info).\r\n */\r\nexport function generated(node) {\r\n  return (\r\n    !node ||\r\n    !node.position ||\r\n    !node.position.start ||\r\n    !node.position.start.line ||\r\n    !node.position.start.column ||\r\n    !node.position.end ||\r\n    !node.position.end.line ||\r\n    !node.position.end.column\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').Definition} Definition\r\n */\r\n\r\n/**\r\n * @typedef {Root | Content} Node\r\n *\r\n * @callback GetDefinition\r\n *   Get a definition by identifier.\r\n * @param {string | null | undefined} [identifier]\r\n *   Identifier of definition.\r\n * @returns {Definition | null}\r\n *   Definition corresponding to `identifier` or `null`.\r\n */\r\n\r\nimport {visit} from 'unist-util-visit'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Find definitions in `tree`.\r\n *\r\n * Uses CommonMark precedence, which means that earlier definitions are\r\n * preferred over duplicate later definitions.\r\n *\r\n * @param {Node} tree\r\n *   Tree to check.\r\n * @returns {GetDefinition}\r\n *   Getter.\r\n */\r\nexport function definitions(tree) {\r\n  /** @type {Record<string, Definition>} */\r\n  const cache = Object.create(null)\r\n\r\n  if (!tree || !tree.type) {\r\n    throw new Error('mdast-util-definitions expected node')\r\n  }\r\n\r\n  visit(tree, 'definition', (definition) => {\r\n    const id = clean(definition.identifier)\r\n    if (id && !own.call(cache, id)) {\r\n      cache[id] = definition\r\n    }\r\n  })\r\n\r\n  return definition\r\n\r\n  /** @type {GetDefinition} */\r\n  function definition(identifier) {\r\n    const id = clean(identifier)\r\n    // To do: next major: return `undefined` when not found.\r\n    return id && own.call(cache, id) ? cache[id] : null\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string | null | undefined} [value]\r\n * @returns {string}\r\n */\r\nfunction clean(value) {\r\n  return String(value || '').toUpperCase()\r\n}\r\n", "/**\r\n * @typedef {import('hast').Content} HastContent\r\n * @typedef {import('hast').Element} HastElement\r\n * @typedef {import('hast').ElementContent} HastElementContent\r\n * @typedef {import('hast').Properties} HastProperties\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('hast').Text} HastText\r\n *\r\n * @typedef {import('mdast').Content} MdastContent\r\n * @typedef {import('mdast').Definition} MdastDefinition\r\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\r\n * @typedef {import('mdast').Parent} MdastParent\r\n * @typedef {import('mdast').Root} MdastRoot\r\n */\r\n\r\n/**\r\n * @typedef {HastRoot | HastContent} HastNodes\r\n * @typedef {MdastRoot | MdastContent} MdastNodes\r\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\r\n *\r\n * @typedef EmbeddedHastFields\r\n *   hast fields.\r\n * @property {string | null | undefined} [hName]\r\n *   Generate a specific element with this tag name instead.\r\n * @property {HastProperties | null | undefined} [hProperties]\r\n *   Generate an element with these properties instead.\r\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\r\n *   Generate an element with this content instead.\r\n *\r\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\r\n *   mdast data with embedded hast fields.\r\n *\r\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\r\n *   mdast node with embedded hast data.\r\n *\r\n * @typedef PointLike\r\n *   Point-like value.\r\n * @property {number | null | undefined} [line]\r\n *   Line.\r\n * @property {number | null | undefined} [column]\r\n *   Column.\r\n * @property {number | null | undefined} [offset]\r\n *   Offset.\r\n *\r\n * @typedef PositionLike\r\n *   Position-like value.\r\n * @property {PointLike | null | undefined} [start]\r\n *   Point-like value.\r\n * @property {PointLike | null | undefined} [end]\r\n *   Point-like value.\r\n *\r\n * @callback Handler\r\n *   Handle a node.\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {any} node\r\n *   mdast node to handle.\r\n * @param {MdastParents | null | undefined} parent\r\n *   Parent of `node`.\r\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\r\n *   hast node.\r\n *\r\n * @callback HFunctionProps\r\n *   Signature of `state` for when props are passed.\r\n * @param {MdastNodes | PositionLike | null | undefined} node\r\n *   mdast node or unist position.\r\n * @param {string} tagName\r\n *   HTML tag name.\r\n * @param {HastProperties} props\r\n *   Properties.\r\n * @param {Array<HastElementContent> | null | undefined} [children]\r\n *   hast content.\r\n * @returns {HastElement}\r\n *   Compiled element.\r\n *\r\n * @callback HFunctionNoProps\r\n *   Signature of `state` for when no props are passed.\r\n * @param {MdastNodes | PositionLike | null | undefined} node\r\n *   mdast node or unist position.\r\n * @param {string} tagName\r\n *   HTML tag name.\r\n * @param {Array<HastElementContent> | null | undefined} [children]\r\n *   hast content.\r\n * @returns {HastElement}\r\n *   Compiled element.\r\n *\r\n * @typedef HFields\r\n *   Info on `state`.\r\n * @property {boolean} dangerous\r\n *   Whether HTML is allowed.\r\n * @property {string} clobberPrefix\r\n *   Prefix to use to prevent DOM clobbering.\r\n * @property {string} footnoteLabel\r\n *   Label to use to introduce the footnote section.\r\n * @property {string} footnoteLabelTagName\r\n *   HTML used for the footnote label.\r\n * @property {HastProperties} footnoteLabelProperties\r\n *   Properties on the HTML tag used for the footnote label.\r\n * @property {string} footnoteBackLabel\r\n *   Label to use from backreferences back to their footnote call.\r\n * @property {(identifier: string) => MdastDefinition | null} definition\r\n *   Definition cache.\r\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\r\n *   Footnote definitions by their identifier.\r\n * @property {Array<string>} footnoteOrder\r\n *   Identifiers of order when footnote calls first appear in tree order.\r\n * @property {Record<string, number>} footnoteCounts\r\n *   Counts for how often the same footnote was called.\r\n * @property {Handlers} handlers\r\n *   Applied handlers.\r\n * @property {Handler} unknownHandler\r\n *   Handler for any none not in `passThrough` or otherwise handled.\r\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\r\n *   Copy a node’s positional info.\r\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\r\n *   Honor the `data` of `from`, and generate an element instead of `node`.\r\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\r\n *   Transform an mdast node to hast.\r\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\r\n *   Transform the children of an mdast parent to hast.\r\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\r\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\r\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\r\n *   Like `state` but lower-level and usable on non-elements.\r\n *   Deprecated: use `patch` and `applyData`.\r\n * @property {Array<string>} passThrough\r\n *   List of node types to pass through untouched (except for their children).\r\n *\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\r\n *   Whether to persist raw HTML in markdown in the hast tree.\r\n * @property {string | null | undefined} [clobberPrefix='user-content-']\r\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\r\n *   *clobbering*.\r\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\r\n *   Label to use from backreferences back to their footnote call (affects\r\n *   screen readers).\r\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\r\n *   Label to use for the footnotes section (affects screen readers).\r\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\r\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\r\n *   is always added as footnote calls use it with `aria-describedby` to\r\n *   provide an accessible label).\r\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\r\n *   Tag name to use for the footnote label.\r\n * @property {Handlers | null | undefined} [handlers]\r\n *   Extra handlers for nodes.\r\n * @property {Array<string> | null | undefined} [passThrough]\r\n *   List of custom mdast node types to pass through (keep) in hast (note that\r\n *   the node itself is passed, but eventual children are transformed).\r\n * @property {Handler | null | undefined} [unknownHandler]\r\n *   Handler for all unknown nodes.\r\n *\r\n * @typedef {Record<string, Handler>} Handlers\r\n *   Handle nodes.\r\n *\r\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\r\n *   Info passed around.\r\n */\r\n\r\nimport {visit} from 'unist-util-visit'\r\nimport {position, pointStart, pointEnd} from 'unist-util-position'\r\nimport {generated} from 'unist-util-generated'\r\nimport {definitions} from 'mdast-util-definitions'\r\nimport {handlers} from './handlers/index.js'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Create `state` from an mdast tree.\r\n *\r\n * @param {MdastNodes} tree\r\n *   mdast node to transform.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {State}\r\n *   `state` function.\r\n */\r\nexport function createState(tree, options) {\r\n  const settings = options || {}\r\n  const dangerous = settings.allowDangerousHtml || false\r\n  /** @type {Record<string, MdastFootnoteDefinition>} */\r\n  const footnoteById = {}\r\n\r\n  // To do: next major: add `options` to state, remove:\r\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\r\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\r\n  // `unknownHandler`.\r\n\r\n  // To do: next major: move to `state.options.allowDangerousHtml`.\r\n  state.dangerous = dangerous\r\n  // To do: next major: move to `state.options`.\r\n  state.clobberPrefix =\r\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\r\n      ? 'user-content-'\r\n      : settings.clobberPrefix\r\n  // To do: next major: move to `state.options`.\r\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\r\n  // To do: next major: move to `state.options`.\r\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\r\n  // To do: next major: move to `state.options`.\r\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\r\n    className: ['sr-only']\r\n  }\r\n  // To do: next major: move to `state.options`.\r\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\r\n  // To do: next major: move to `state.options`.\r\n  state.unknownHandler = settings.unknownHandler\r\n  // To do: next major: move to `state.options`.\r\n  state.passThrough = settings.passThrough\r\n\r\n  state.handlers = {...handlers, ...settings.handlers}\r\n\r\n  // To do: next major: replace utility with `definitionById` object, so we\r\n  // only walk once (as we need footnotes too).\r\n  state.definition = definitions(tree)\r\n  state.footnoteById = footnoteById\r\n  /** @type {Array<string>} */\r\n  state.footnoteOrder = []\r\n  /** @type {Record<string, number>} */\r\n  state.footnoteCounts = {}\r\n\r\n  state.patch = patch\r\n  state.applyData = applyData\r\n  state.one = oneBound\r\n  state.all = allBound\r\n  state.wrap = wrap\r\n  // To do: next major: remove `augment`.\r\n  state.augment = augment\r\n\r\n  visit(tree, 'footnoteDefinition', (definition) => {\r\n    const id = String(definition.identifier).toUpperCase()\r\n\r\n    // Mimick CM behavior of link definitions.\r\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\r\n    if (!own.call(footnoteById, id)) {\r\n      footnoteById[id] = definition\r\n    }\r\n  })\r\n\r\n  // @ts-expect-error Hush, it’s fine!\r\n  return state\r\n\r\n  /**\r\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\r\n   *\r\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\r\n   * @param {HastElementContent} right\r\n   * @returns {HastElementContent}\r\n   */\r\n  /* c8 ignore start */\r\n  // To do: next major: remove.\r\n  function augment(left, right) {\r\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\r\n    if (left && 'data' in left && left.data) {\r\n      /** @type {MdastData} */\r\n      const data = left.data\r\n\r\n      if (data.hName) {\r\n        if (right.type !== 'element') {\r\n          right = {\r\n            type: 'element',\r\n            tagName: '',\r\n            properties: {},\r\n            children: []\r\n          }\r\n        }\r\n\r\n        right.tagName = data.hName\r\n      }\r\n\r\n      if (right.type === 'element' && data.hProperties) {\r\n        right.properties = {...right.properties, ...data.hProperties}\r\n      }\r\n\r\n      if ('children' in right && right.children && data.hChildren) {\r\n        right.children = data.hChildren\r\n      }\r\n    }\r\n\r\n    if (left) {\r\n      const ctx = 'type' in left ? left : {position: left}\r\n\r\n      if (!generated(ctx)) {\r\n        // @ts-expect-error: fine.\r\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\r\n      }\r\n    }\r\n\r\n    return right\r\n  }\r\n  /* c8 ignore stop */\r\n\r\n  /**\r\n   * Create an element for `node`.\r\n   *\r\n   * @type {HFunctionProps}\r\n   */\r\n  /* c8 ignore start */\r\n  // To do: next major: remove.\r\n  function state(node, tagName, props, children) {\r\n    if (Array.isArray(props)) {\r\n      children = props\r\n      props = {}\r\n    }\r\n\r\n    // @ts-expect-error augmenting an element yields an element.\r\n    return augment(node, {\r\n      type: 'element',\r\n      tagName,\r\n      properties: props || {},\r\n      children: children || []\r\n    })\r\n  }\r\n  /* c8 ignore stop */\r\n\r\n  /**\r\n   * Transform an mdast node into a hast node.\r\n   *\r\n   * @param {MdastNodes} node\r\n   *   mdast node.\r\n   * @param {MdastParents | null | undefined} [parent]\r\n   *   Parent of `node`.\r\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\r\n   *   Resulting hast node.\r\n   */\r\n  function oneBound(node, parent) {\r\n    // @ts-expect-error: that’s a state :)\r\n    return one(state, node, parent)\r\n  }\r\n\r\n  /**\r\n   * Transform the children of an mdast node into hast nodes.\r\n   *\r\n   * @param {MdastNodes} parent\r\n   *   mdast node to compile\r\n   * @returns {Array<HastElementContent>}\r\n   *   Resulting hast nodes.\r\n   */\r\n  function allBound(parent) {\r\n    // @ts-expect-error: that’s a state :)\r\n    return all(state, parent)\r\n  }\r\n}\r\n\r\n/**\r\n * Copy a node’s positional info.\r\n *\r\n * @param {MdastNodes} from\r\n *   mdast node to copy from.\r\n * @param {HastNodes} to\r\n *   hast node to copy into.\r\n * @returns {void}\r\n *   Nothing.\r\n */\r\nfunction patch(from, to) {\r\n  if (from.position) to.position = position(from)\r\n}\r\n\r\n/**\r\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\r\n *\r\n * @template {HastNodes} Type\r\n *   Node type.\r\n * @param {MdastNodes} from\r\n *   mdast node to use data from.\r\n * @param {Type} to\r\n *   hast node to change.\r\n * @returns {Type | HastElement}\r\n *   Nothing.\r\n */\r\nfunction applyData(from, to) {\r\n  /** @type {Type | HastElement} */\r\n  let result = to\r\n\r\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\r\n  if (from && from.data) {\r\n    const hName = from.data.hName\r\n    const hChildren = from.data.hChildren\r\n    const hProperties = from.data.hProperties\r\n\r\n    if (typeof hName === 'string') {\r\n      // Transforming the node resulted in an element with a different name\r\n      // than wanted:\r\n      if (result.type === 'element') {\r\n        result.tagName = hName\r\n      }\r\n      // Transforming the node resulted in a non-element, which happens for\r\n      // raw, text, and root nodes (unless custom handlers are passed).\r\n      // The intent is likely to keep the content around (otherwise: pass\r\n      // `hChildren`).\r\n      else {\r\n        result = {\r\n          type: 'element',\r\n          tagName: hName,\r\n          properties: {},\r\n          children: []\r\n        }\r\n\r\n        // To do: next major: take the children from the `root`, or inject the\r\n        // raw/text/comment or so into the element?\r\n        // if ('children' in node) {\r\n        //   // @ts-expect-error: assume `children` are allowed in elements.\r\n        //   result.children = node.children\r\n        // } else {\r\n        //   // @ts-expect-error: assume `node` is allowed in elements.\r\n        //   result.children.push(node)\r\n        // }\r\n      }\r\n    }\r\n\r\n    if (result.type === 'element' && hProperties) {\r\n      result.properties = {...result.properties, ...hProperties}\r\n    }\r\n\r\n    if (\r\n      'children' in result &&\r\n      result.children &&\r\n      hChildren !== null &&\r\n      hChildren !== undefined\r\n    ) {\r\n      // @ts-expect-error: assume valid children are defined.\r\n      result.children = hChildren\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Transform an mdast node into a hast node.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdastNodes} node\r\n *   mdast node.\r\n * @param {MdastParents | null | undefined} [parent]\r\n *   Parent of `node`.\r\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\r\n *   Resulting hast node.\r\n */\r\n// To do: next major: do not expose, keep bound.\r\nexport function one(state, node, parent) {\r\n  const type = node && node.type\r\n\r\n  // Fail on non-nodes.\r\n  if (!type) {\r\n    throw new Error('Expected node, got `' + node + '`')\r\n  }\r\n\r\n  if (own.call(state.handlers, type)) {\r\n    return state.handlers[type](state, node, parent)\r\n  }\r\n\r\n  if (state.passThrough && state.passThrough.includes(type)) {\r\n    // To do: next major: deep clone.\r\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\r\n    return 'children' in node ? {...node, children: all(state, node)} : node\r\n  }\r\n\r\n  if (state.unknownHandler) {\r\n    return state.unknownHandler(state, node, parent)\r\n  }\r\n\r\n  return defaultUnknownHandler(state, node)\r\n}\r\n\r\n/**\r\n * Transform the children of an mdast node into hast nodes.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdastNodes} parent\r\n *   mdast node to compile\r\n * @returns {Array<HastElementContent>}\r\n *   Resulting hast nodes.\r\n */\r\n// To do: next major: do not expose, keep bound.\r\nexport function all(state, parent) {\r\n  /** @type {Array<HastElementContent>} */\r\n  const values = []\r\n\r\n  if ('children' in parent) {\r\n    const nodes = parent.children\r\n    let index = -1\r\n    while (++index < nodes.length) {\r\n      const result = one(state, nodes[index], parent)\r\n\r\n      // To do: see if we van clean this? Can we merge texts?\r\n      if (result) {\r\n        if (index && nodes[index - 1].type === 'break') {\r\n          if (!Array.isArray(result) && result.type === 'text') {\r\n            result.value = result.value.replace(/^\\s+/, '')\r\n          }\r\n\r\n          if (!Array.isArray(result) && result.type === 'element') {\r\n            const head = result.children[0]\r\n\r\n            if (head && head.type === 'text') {\r\n              head.value = head.value.replace(/^\\s+/, '')\r\n            }\r\n          }\r\n        }\r\n\r\n        if (Array.isArray(result)) {\r\n          values.push(...result)\r\n        } else {\r\n          values.push(result)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return values\r\n}\r\n\r\n/**\r\n * Transform an unknown node.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {MdastNodes} node\r\n *   Unknown mdast node.\r\n * @returns {HastText | HastElement}\r\n *   Resulting hast node.\r\n */\r\nfunction defaultUnknownHandler(state, node) {\r\n  const data = node.data || {}\r\n  /** @type {HastText | HastElement} */\r\n  const result =\r\n    'value' in node &&\r\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\r\n      ? {type: 'text', value: node.value}\r\n      : {\r\n          type: 'element',\r\n          tagName: 'div',\r\n          properties: {},\r\n          children: all(state, node)\r\n        }\r\n\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n\r\n/**\r\n * Wrap `nodes` with line endings between each node.\r\n *\r\n * @template {HastContent} Type\r\n *   Node type.\r\n * @param {Array<Type>} nodes\r\n *   List of nodes to wrap.\r\n * @param {boolean | null | undefined} [loose=false]\r\n *   Whether to add line endings at start and end.\r\n * @returns {Array<Type | HastText>}\r\n *   Wrapped nodes.\r\n */\r\nexport function wrap(nodes, loose) {\r\n  /** @type {Array<Type | HastText>} */\r\n  const result = []\r\n  let index = -1\r\n\r\n  if (loose) {\r\n    result.push({type: 'text', value: '\\n'})\r\n  }\r\n\r\n  while (++index < nodes.length) {\r\n    if (index) result.push({type: 'text', value: '\\n'})\r\n    result.push(nodes[index])\r\n  }\r\n\r\n  if (loose && nodes.length > 0) {\r\n    result.push({type: 'text', value: '\\n'})\r\n  }\r\n\r\n  return result\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n *\r\n * @typedef {import('./state.js').State} State\r\n */\r\n\r\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Generate a hast footer for called footnote definitions.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @returns {Element | undefined}\r\n *   `section` element or `undefined`.\r\n */\r\nexport function footer(state) {\r\n  /** @type {Array<ElementContent>} */\r\n  const listItems = []\r\n  let index = -1\r\n\r\n  while (++index < state.footnoteOrder.length) {\r\n    const def = state.footnoteById[state.footnoteOrder[index]]\r\n\r\n    if (!def) {\r\n      continue\r\n    }\r\n\r\n    const content = state.all(def)\r\n    const id = String(def.identifier).toUpperCase()\r\n    const safeId = normalizeUri(id.toLowerCase())\r\n    let referenceIndex = 0\r\n    /** @type {Array<ElementContent>} */\r\n    const backReferences = []\r\n\r\n    while (++referenceIndex <= state.footnoteCounts[id]) {\r\n      /** @type {Element} */\r\n      const backReference = {\r\n        type: 'element',\r\n        tagName: 'a',\r\n        properties: {\r\n          href:\r\n            '#' +\r\n            state.clobberPrefix +\r\n            'fnref-' +\r\n            safeId +\r\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\r\n          dataFootnoteBackref: true,\r\n          className: ['data-footnote-backref'],\r\n          ariaLabel: state.footnoteBackLabel\r\n        },\r\n        children: [{type: 'text', value: '↩'}]\r\n      }\r\n\r\n      if (referenceIndex > 1) {\r\n        backReference.children.push({\r\n          type: 'element',\r\n          tagName: 'sup',\r\n          children: [{type: 'text', value: String(referenceIndex)}]\r\n        })\r\n      }\r\n\r\n      if (backReferences.length > 0) {\r\n        backReferences.push({type: 'text', value: ' '})\r\n      }\r\n\r\n      backReferences.push(backReference)\r\n    }\r\n\r\n    const tail = content[content.length - 1]\r\n\r\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\r\n      const tailTail = tail.children[tail.children.length - 1]\r\n      if (tailTail && tailTail.type === 'text') {\r\n        tailTail.value += ' '\r\n      } else {\r\n        tail.children.push({type: 'text', value: ' '})\r\n      }\r\n\r\n      tail.children.push(...backReferences)\r\n    } else {\r\n      content.push(...backReferences)\r\n    }\r\n\r\n    /** @type {Element} */\r\n    const listItem = {\r\n      type: 'element',\r\n      tagName: 'li',\r\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\r\n      children: state.wrap(content, true)\r\n    }\r\n\r\n    state.patch(def, listItem)\r\n\r\n    listItems.push(listItem)\r\n  }\r\n\r\n  if (listItems.length === 0) {\r\n    return\r\n  }\r\n\r\n  return {\r\n    type: 'element',\r\n    tagName: 'section',\r\n    properties: {dataFootnotes: true, className: ['footnotes']},\r\n    children: [\r\n      {\r\n        type: 'element',\r\n        tagName: state.footnoteLabelTagName,\r\n        properties: {\r\n          // To do: use structured clone.\r\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\r\n          id: 'footnote-label'\r\n        },\r\n        children: [{type: 'text', value: state.footnoteLabel}]\r\n      },\r\n      {type: 'text', value: '\\n'},\r\n      {\r\n        type: 'element',\r\n        tagName: 'ol',\r\n        properties: {},\r\n        children: state.wrap(listItems, true)\r\n      },\r\n      {type: 'text', value: '\\n'}\r\n    ]\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('hast').Content} HastContent\r\n * @typedef {import('hast').Root} HastRoot\r\n *\r\n * @typedef {import('mdast').Content} MdastContent\r\n * @typedef {import('mdast').Root} MdastRoot\r\n *\r\n * @typedef {import('./state.js').Options} Options\r\n */\r\n\r\n/**\r\n * @typedef {HastRoot | HastContent} HastNodes\r\n * @typedef {MdastRoot | MdastContent} MdastNodes\r\n */\r\n\r\nimport {footer} from './footer.js'\r\nimport {createState} from './state.js'\r\n\r\n/**\r\n * Transform mdast to hast.\r\n *\r\n * ##### Notes\r\n *\r\n * ###### HTML\r\n *\r\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\r\n * as semistandard `raw` nodes.\r\n * Most utilities ignore `raw` nodes but two notable ones don’t:\r\n *\r\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\r\n *     output the raw HTML.\r\n *     This is typically discouraged as noted by the option name but is useful\r\n *     if you completely trust authors\r\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\r\n *     into standard hast nodes (`element`, `text`, etc).\r\n *     This is a heavy task as it needs a full HTML parser, but it is the only\r\n *     way to support untrusted content\r\n *\r\n * ###### Footnotes\r\n *\r\n * Many options supported here relate to footnotes.\r\n * Footnotes are not specified by CommonMark, which we follow by default.\r\n * They are supported by GitHub, so footnotes can be enabled in markdown with\r\n * `mdast-util-gfm`.\r\n *\r\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\r\n * that explains footnotes, which is hidden for sighted users but shown to\r\n * assistive technology.\r\n * When your page is not in English, you must define translated values.\r\n *\r\n * Back references use ARIA attributes, but the section label itself uses a\r\n * heading that is hidden with an `sr-only` class.\r\n * To show it to sighted users, define different attributes in\r\n * `footnoteLabelProperties`.\r\n *\r\n * ###### Clobbering\r\n *\r\n * Footnotes introduces a problem, as it links footnote calls to footnote\r\n * definitions on the page through `id` attributes generated from user content,\r\n * which results in DOM clobbering.\r\n *\r\n * DOM clobbering is this:\r\n *\r\n * ```html\r\n * <p id=x></p>\r\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\r\n * ```\r\n *\r\n * Elements by their ID are made available by browsers on the `window` object,\r\n * which is a security risk.\r\n * Using a prefix solves this problem.\r\n *\r\n * More information on how to handle clobbering and the prefix is explained in\r\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\r\n *\r\n * ###### Unknown nodes\r\n *\r\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\r\n * The default behavior for unknown nodes is:\r\n *\r\n * *   when the node has a `value` (and doesn’t have `data.hName`,\r\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\r\n *     node\r\n * *   otherwise, create a `<div>` element (which could be changed with\r\n *     `data.hName`), with its children mapped from mdast to hast as well\r\n *\r\n * This behavior can be changed by passing an `unknownHandler`.\r\n *\r\n * @param {MdastNodes} tree\r\n *   mdast tree.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {HastNodes | null | undefined}\r\n *   hast tree.\r\n */\r\n// To do: next major: always return a single `root`.\r\nexport function toHast(tree, options) {\r\n  const state = createState(tree, options)\r\n  const node = state.one(tree, null)\r\n  const foot = footer(state)\r\n\r\n  if (foot) {\r\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\r\n    // content.\r\n    // So assume `node` is a parent node.\r\n    node.children.push({type: 'text', value: '\\n'}, foot)\r\n  }\r\n\r\n  // To do: next major: always return root?\r\n  return Array.isArray(node) ? {type: 'root', children: node} : node\r\n}\r\n", "/**\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('mdast').Root} MdastRoot\r\n * @typedef {import('mdast-util-to-hast').Options} Options\r\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\r\n *\r\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\r\n */\r\n\r\nimport {toHast} from 'mdast-util-to-hast'\r\n\r\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\r\n\r\n/**\r\n * Plugin that turns markdown into HTML to support rehype.\r\n *\r\n * *   If a destination processor is given, that processor runs with a new HTML\r\n *     (hast) tree (bridge-mode).\r\n *     As the given processor runs with a hast tree, and rehype plugins support\r\n *     hast, that means rehype plugins can be used with the given processor.\r\n *     The hast tree is discarded in the end.\r\n *     It’s highly unlikely that you want to do this.\r\n * *   The common case is to not pass a destination processor, in which case the\r\n *     current processor continues running with a new HTML (hast) tree\r\n *     (mutate-mode).\r\n *     As the current processor continues with a hast tree, and rehype plugins\r\n *     support hast, that means rehype plugins can be used after\r\n *     `remark-rehype`.\r\n *     It’s likely that this is what you want to do.\r\n *\r\n * @param destination\r\n *   Optional unified processor.\r\n * @param options\r\n *   Options passed to `mdast-util-to-hast`.\r\n */\r\nconst remarkRehype =\r\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\r\n  (\r\n    function (destination, options) {\r\n      return destination && 'run' in destination\r\n        ? bridge(destination, options)\r\n        : mutate(destination || options)\r\n    }\r\n  )\r\n\r\nexport default remarkRehype\r\n\r\n/**\r\n * Bridge-mode.\r\n * Runs the destination with the new hast tree.\r\n *\r\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\r\n */\r\nfunction bridge(destination, options) {\r\n  return (node, file, next) => {\r\n    destination.run(toHast(node, options), file, (error) => {\r\n      next(error)\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Mutate-mode.\r\n * Further plugins run on the hast tree.\r\n *\r\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\r\n */\r\nfunction mutate(options) {\r\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\r\n  return (node) => toHast(node, options)\r\n}\r\n"],
  "mappings": "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",
  "names": ["link", "text", "paragraph", "point", "result", "code", "definition", "own", "listItem"]
}
