{
  "version": 3,
  "sources": ["../../micromark-extension-gfm-autolink-literal/dev/lib/syntax.js", "../../micromark-extension-gfm-footnote/dev/lib/syntax.js", "../../micromark-extension-gfm-footnote/dev/lib/html.js", "../../micromark-extension-gfm-strikethrough/dev/lib/syntax.js", "../../micromark-extension-gfm-table/dev/lib/edit-map.js", "../../micromark-extension-gfm-table/dev/lib/infer.js", "../../micromark-extension-gfm-table/dev/lib/syntax.js", "../../micromark-extension-gfm-tagfilter/index.js", "../../micromark-extension-gfm-task-list-item/dev/lib/syntax.js", "../../micromark-extension-gfm/index.js", "../../mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js", "../../mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js", "../../mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/color.browser.js", "../../mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js", "../../mdast-util-find-and-replace/lib/index.js", "../../mdast-util-gfm-autolink-literal/lib/index.js", "../../mdast-util-gfm-footnote/lib/index.js", "../../mdast-util-gfm-strikethrough/lib/index.js", "../../markdown-table/index.js", "../../mdast-util-gfm-table/lib/index.js", "../../mdast-util-gfm-task-list-item/lib/index.js", "../../mdast-util-gfm/lib/index.js", "../../remark-gfm/index.js"],
  "sourcesContent": ["/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').Previous} Previous\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  asciiControl,\r\n  markdownLineEndingOrSpace,\r\n  unicodePunctuation,\r\n  unicodeWhitespace\r\n} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\n\r\nconst wwwPrefix = {tokenize: tokenizeWwwPrefix, partial: true}\r\nconst domain = {tokenize: tokenizeDomain, partial: true}\r\nconst path = {tokenize: tokenizePath, partial: true}\r\nconst trail = {tokenize: tokenizeTrail, partial: true}\r\nconst emailDomainDotTrail = {\r\n  tokenize: tokenizeEmailDomainDotTrail,\r\n  partial: true\r\n}\r\n\r\nconst wwwAutolink = {tokenize: tokenizeWwwAutolink, previous: previousWww}\r\nconst protocolAutolink = {\r\n  tokenize: tokenizeProtocolAutolink,\r\n  previous: previousProtocol\r\n}\r\nconst emailAutolink = {tokenize: tokenizeEmailAutolink, previous: previousEmail}\r\n\r\n/** @type {ConstructRecord} */\r\nconst text = {}\r\n\r\n// To do: next major: expose functions that yields extension.\r\n\r\n/**\r\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\r\n * autolink literal syntax.\r\n *\r\n * @type {Extension}\r\n */\r\nexport const gfmAutolinkLiteral = {text}\r\n\r\n/** @type {Code} */\r\nlet code = codes.digit0\r\n\r\n// Add alphanumerics.\r\nwhile (code < codes.leftCurlyBrace) {\r\n  text[code] = emailAutolink\r\n  code++\r\n  if (code === codes.colon) code = codes.uppercaseA\r\n  else if (code === codes.leftSquareBracket) code = codes.lowercaseA\r\n}\r\n\r\ntext[codes.plusSign] = emailAutolink\r\ntext[codes.dash] = emailAutolink\r\ntext[codes.dot] = emailAutolink\r\ntext[codes.underscore] = emailAutolink\r\ntext[codes.uppercaseH] = [emailAutolink, protocolAutolink]\r\ntext[codes.lowercaseH] = [emailAutolink, protocolAutolink]\r\ntext[codes.uppercaseW] = [emailAutolink, wwwAutolink]\r\ntext[codes.lowercaseW] = [emailAutolink, wwwAutolink]\r\n\r\n// To do: perform email autolink literals on events, afterwards.\r\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\r\n// It should look for `@`, then for atext backwards, and then for a label\r\n// forwards.\r\n// To do: `mailto:`, `xmpp:` protocol as prefix.\r\n\r\n/**\r\n * Email autolink literal.\r\n *\r\n * ```markdown\r\n * > | a contact@example.org b\r\n *       ^^^^^^^^^^^^^^^^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeEmailAutolink(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {boolean | undefined} */\r\n  let dot\r\n  /** @type {boolean} */\r\n  let data\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of email autolink literal.\r\n   *\r\n   * ```markdown\r\n   * > | a contact@example.org b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (\r\n      !gfmAtext(code) ||\r\n      !previousEmail.call(self, self.previous) ||\r\n      previousUnbalanced(self.events)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.enter('literalAutolink')\r\n    effects.enter('literalAutolinkEmail')\r\n    return atext(code)\r\n  }\r\n\r\n  /**\r\n   * In email atext.\r\n   *\r\n   * ```markdown\r\n   * > | a contact@example.org b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atext(code) {\r\n    if (gfmAtext(code)) {\r\n      effects.consume(code)\r\n      return atext\r\n    }\r\n\r\n    if (code === codes.atSign) {\r\n      effects.consume(code)\r\n      return emailDomain\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In email domain.\r\n   *\r\n   * The reference code is a bit overly complex as it handles the `@`, of which\r\n   * there may be just one.\r\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\r\n   *\r\n   * ```markdown\r\n   * > | a contact@example.org b\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailDomain(code) {\r\n    // Dot followed by alphanumerical (not `-` or `_`).\r\n    if (code === codes.dot) {\r\n      return effects.check(\r\n        emailDomainDotTrail,\r\n        emailDomainAfter,\r\n        emailDomainDot\r\n      )(code)\r\n    }\r\n\r\n    // Alphanumerical, `-`, and `_`.\r\n    if (\r\n      code === codes.dash ||\r\n      code === codes.underscore ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      data = true\r\n      effects.consume(code)\r\n      return emailDomain\r\n    }\r\n\r\n    // To do: `/` if xmpp.\r\n\r\n    // Note: normally we’d truncate trailing punctuation from the link.\r\n    // However, email autolink literals cannot contain any of those markers,\r\n    // except for `.`, but that can only occur if it isn’t trailing.\r\n    // So we can ignore truncating!\r\n    return emailDomainAfter(code)\r\n  }\r\n\r\n  /**\r\n   * In email domain, on dot that is not a trail.\r\n   *\r\n   * ```markdown\r\n   * > | a contact@example.org b\r\n   *                      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailDomainDot(code) {\r\n    effects.consume(code)\r\n    dot = true\r\n    return emailDomain\r\n  }\r\n\r\n  /**\r\n   * After email domain.\r\n   *\r\n   * ```markdown\r\n   * > | a contact@example.org b\r\n   *                          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailDomainAfter(code) {\r\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\r\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\r\n    if (data && dot && asciiAlpha(self.previous)) {\r\n      effects.exit('literalAutolinkEmail')\r\n      effects.exit('literalAutolink')\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * `www` autolink literal.\r\n *\r\n * ```markdown\r\n * > | a www.example.org b\r\n *       ^^^^^^^^^^^^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeWwwAutolink(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return wwwStart\r\n\r\n  /**\r\n   * Start of www autolink literal.\r\n   *\r\n   * ```markdown\r\n   * > | www.example.com/a?b#c\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function wwwStart(code) {\r\n    if (\r\n      (code !== codes.uppercaseW && code !== codes.lowercaseW) ||\r\n      !previousWww.call(self, self.previous) ||\r\n      previousUnbalanced(self.events)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.enter('literalAutolink')\r\n    effects.enter('literalAutolinkWww')\r\n    // Note: we *check*, so we can discard the `www.` we parsed.\r\n    // If it worked, we consider it as a part of the domain.\r\n    return effects.check(\r\n      wwwPrefix,\r\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\r\n      nok\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * After a www autolink literal.\r\n   *\r\n   * ```markdown\r\n   * > | www.example.com/a?b#c\r\n   *                          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function wwwAfter(code) {\r\n    effects.exit('literalAutolinkWww')\r\n    effects.exit('literalAutolink')\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Protocol autolink literal.\r\n *\r\n * ```markdown\r\n * > | a https://example.org b\r\n *       ^^^^^^^^^^^^^^^^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\r\n  const self = this\r\n  let buffer = ''\r\n  let seen = false\r\n\r\n  return protocolStart\r\n\r\n  /**\r\n   * Start of protocol autolink literal.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a?b#c\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function protocolStart(code) {\r\n    if (\r\n      (code === codes.uppercaseH || code === codes.lowercaseH) &&\r\n      previousProtocol.call(self, self.previous) &&\r\n      !previousUnbalanced(self.events)\r\n    ) {\r\n      effects.enter('literalAutolink')\r\n      effects.enter('literalAutolinkHttp')\r\n      buffer += String.fromCodePoint(code)\r\n      effects.consume(code)\r\n      return protocolPrefixInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In protocol.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a?b#c\r\n   *     ^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function protocolPrefixInside(code) {\r\n    // `5` is size of `https`\r\n    if (asciiAlpha(code) && buffer.length < 5) {\r\n      // @ts-expect-error: definitely number.\r\n      buffer += String.fromCodePoint(code)\r\n      effects.consume(code)\r\n      return protocolPrefixInside\r\n    }\r\n\r\n    if (code === codes.colon) {\r\n      const protocol = buffer.toLowerCase()\r\n\r\n      if (protocol === 'http' || protocol === 'https') {\r\n        effects.consume(code)\r\n        return protocolSlashesInside\r\n      }\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In slashes.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a?b#c\r\n   *           ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function protocolSlashesInside(code) {\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n\r\n      if (seen) {\r\n        return afterProtocol\r\n      }\r\n\r\n      seen = true\r\n      return protocolSlashesInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After protocol, before domain.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a?b#c\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterProtocol(code) {\r\n    // To do: this is different from `markdown-rs`:\r\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\r\n    return code === codes.eof ||\r\n      asciiControl(code) ||\r\n      markdownLineEndingOrSpace(code) ||\r\n      unicodeWhitespace(code) ||\r\n      unicodePunctuation(code)\r\n      ? nok(code)\r\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\r\n  }\r\n\r\n  /**\r\n   * After a protocol autolink literal.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a?b#c\r\n   *                              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function protocolAfter(code) {\r\n    effects.exit('literalAutolinkHttp')\r\n    effects.exit('literalAutolink')\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * `www` prefix.\r\n *\r\n * ```markdown\r\n * > | a www.example.org b\r\n *       ^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeWwwPrefix(effects, ok, nok) {\r\n  let size = 0\r\n\r\n  return wwwPrefixInside\r\n\r\n  /**\r\n   * In www prefix.\r\n   *\r\n   * ```markdown\r\n   * > | www.example.com\r\n   *     ^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function wwwPrefixInside(code) {\r\n    if ((code === codes.uppercaseW || code === codes.lowercaseW) && size < 3) {\r\n      size++\r\n      effects.consume(code)\r\n      return wwwPrefixInside\r\n    }\r\n\r\n    if (code === codes.dot && size === 3) {\r\n      effects.consume(code)\r\n      return wwwPrefixAfter\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After www prefix.\r\n   *\r\n   * ```markdown\r\n   * > | www.example.com\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function wwwPrefixAfter(code) {\r\n    // If there is *anything*, we can link.\r\n    return code === codes.eof ? nok(code) : ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Domain.\r\n *\r\n * ```markdown\r\n * > | a https://example.org b\r\n *               ^^^^^^^^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeDomain(effects, ok, nok) {\r\n  /** @type {boolean | undefined} */\r\n  let underscoreInLastSegment\r\n  /** @type {boolean | undefined} */\r\n  let underscoreInLastLastSegment\r\n  /** @type {boolean | undefined} */\r\n  let seen\r\n\r\n  return domainInside\r\n\r\n  /**\r\n   * In domain.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a\r\n   *             ^^^^^^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function domainInside(code) {\r\n    // Check whether this marker, which is a trailing punctuation\r\n    // marker, optionally followed by more trailing markers, and then\r\n    // followed by an end.\r\n    if (code === codes.dot || code === codes.underscore) {\r\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\r\n    }\r\n\r\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\r\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\r\n    // so that’s Unicode.\r\n    // Instead of some new production for Unicode alphanumerics, markdown\r\n    // already has that for Unicode punctuation and whitespace, so use those.\r\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\r\n    if (\r\n      code === codes.eof ||\r\n      markdownLineEndingOrSpace(code) ||\r\n      unicodeWhitespace(code) ||\r\n      (code !== codes.dash && unicodePunctuation(code))\r\n    ) {\r\n      return domainAfter(code)\r\n    }\r\n\r\n    seen = true\r\n    effects.consume(code)\r\n    return domainInside\r\n  }\r\n\r\n  /**\r\n   * In domain, at potential trailing punctuation, that was not trailing.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function domainAtPunctuation(code) {\r\n    // There is an underscore in the last segment of the domain\r\n    if (code === codes.underscore) {\r\n      underscoreInLastSegment = true\r\n    }\r\n    // Otherwise, it’s a `.`: save the last segment underscore in the\r\n    // penultimate segment slot.\r\n    else {\r\n      underscoreInLastLastSegment = underscoreInLastSegment\r\n      underscoreInLastSegment = undefined\r\n    }\r\n\r\n    effects.consume(code)\r\n    return domainInside\r\n  }\r\n\r\n  /**\r\n   * After domain.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a\r\n   *                        ^\r\n   * ```\r\n   *\r\n   * @type {State} */\r\n  function domainAfter(code) {\r\n    // Note: that’s GH says a dot is needed, but it’s not true:\r\n    // <https://github.com/github/cmark-gfm/issues/279>\r\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\r\n      return nok(code)\r\n    }\r\n\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Path.\r\n *\r\n * ```markdown\r\n * > | a https://example.org/stuff b\r\n *                          ^^^^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizePath(effects, ok) {\r\n  let sizeOpen = 0\r\n  let sizeClose = 0\r\n\r\n  return pathInside\r\n\r\n  /**\r\n   * In path.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a\r\n   *                        ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function pathInside(code) {\r\n    if (code === codes.leftParenthesis) {\r\n      sizeOpen++\r\n      effects.consume(code)\r\n      return pathInside\r\n    }\r\n\r\n    // To do: `markdown-rs` also needs this.\r\n    // If this is a paren, and there are less closings than openings,\r\n    // we don’t check for a trail.\r\n    if (code === codes.rightParenthesis && sizeClose < sizeOpen) {\r\n      return pathAtPunctuation(code)\r\n    }\r\n\r\n    // Check whether this trailing punctuation marker is optionally\r\n    // followed by more trailing markers, and then followed\r\n    // by an end.\r\n    if (\r\n      code === codes.exclamationMark ||\r\n      code === codes.quotationMark ||\r\n      code === codes.ampersand ||\r\n      code === codes.apostrophe ||\r\n      code === codes.rightParenthesis ||\r\n      code === codes.asterisk ||\r\n      code === codes.comma ||\r\n      code === codes.dot ||\r\n      code === codes.colon ||\r\n      code === codes.semicolon ||\r\n      code === codes.lessThan ||\r\n      code === codes.questionMark ||\r\n      code === codes.rightSquareBracket ||\r\n      code === codes.underscore ||\r\n      code === codes.tilde\r\n    ) {\r\n      return effects.check(trail, ok, pathAtPunctuation)(code)\r\n    }\r\n\r\n    if (\r\n      code === codes.eof ||\r\n      markdownLineEndingOrSpace(code) ||\r\n      unicodeWhitespace(code)\r\n    ) {\r\n      return ok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return pathInside\r\n  }\r\n\r\n  /**\r\n   * In path, at potential trailing punctuation, that was not trailing.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com/a\"b\r\n   *                          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function pathAtPunctuation(code) {\r\n    // Count closing parens.\r\n    if (code === codes.rightParenthesis) {\r\n      sizeClose++\r\n    }\r\n\r\n    effects.consume(code)\r\n    return pathInside\r\n  }\r\n}\r\n\r\n/**\r\n * Trail.\r\n *\r\n * This calls `ok` if this *is* the trail, followed by an end, which means\r\n * the entire trail is not part of the link.\r\n * It calls `nok` if this *is* part of the link.\r\n *\r\n * ```markdown\r\n * > | https://example.com\").\r\n *                        ^^^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTrail(effects, ok, nok) {\r\n  return trail\r\n\r\n  /**\r\n   * In trail of domain or path.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com\").\r\n   *                        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function trail(code) {\r\n    // Regular trailing punctuation.\r\n    if (\r\n      code === codes.exclamationMark ||\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.rightParenthesis ||\r\n      code === codes.asterisk ||\r\n      code === codes.comma ||\r\n      code === codes.dot ||\r\n      code === codes.colon ||\r\n      code === codes.semicolon ||\r\n      code === codes.questionMark ||\r\n      code === codes.underscore ||\r\n      code === codes.tilde\r\n    ) {\r\n      effects.consume(code)\r\n      return trail\r\n    }\r\n\r\n    // `&` followed by one or more alphabeticals and then a `;`, is\r\n    // as a whole considered as trailing punctuation.\r\n    // In all other cases, it is considered as continuation of the URL.\r\n    if (code === codes.ampersand) {\r\n      effects.consume(code)\r\n      return trailCharRefStart\r\n    }\r\n\r\n    // Needed because we allow literals after `[`, as we fix:\r\n    // <https://github.com/github/cmark-gfm/issues/278>.\r\n    // Check that it is not followed by `(` or `[`.\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return trailBracketAfter\r\n    }\r\n\r\n    if (\r\n      // `<` is an end.\r\n      code === codes.lessThan ||\r\n      // So is whitespace.\r\n      code === codes.eof ||\r\n      markdownLineEndingOrSpace(code) ||\r\n      unicodeWhitespace(code)\r\n    ) {\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In trail, after `]`.\r\n   *\r\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\r\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com](\r\n   *                         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function trailBracketAfter(code) {\r\n    // Whitespace or something that could start a resource or reference is the end.\r\n    // Switch back to trail otherwise.\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.leftParenthesis ||\r\n      code === codes.leftSquareBracket ||\r\n      markdownLineEndingOrSpace(code) ||\r\n      unicodeWhitespace(code)\r\n    ) {\r\n      return ok(code)\r\n    }\r\n\r\n    return trail(code)\r\n  }\r\n\r\n  /**\r\n   * In character-reference like trail, after `&`.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com&amp;).\r\n   *                         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function trailCharRefStart(code) {\r\n    // When non-alpha, it’s not a trail.\r\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\r\n  }\r\n\r\n  /**\r\n   * In character-reference like trail.\r\n   *\r\n   * ```markdown\r\n   * > | https://example.com&amp;).\r\n   *                         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function trailCharRefInside(code) {\r\n    // Switch back to trail if this is well-formed.\r\n    if (code === codes.semicolon) {\r\n      effects.consume(code)\r\n      return trail\r\n    }\r\n\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return trailCharRefInside\r\n    }\r\n\r\n    // It’s not a trail.\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Dot in email domain trail.\r\n *\r\n * This calls `ok` if this *is* the trail, followed by an end, which means\r\n * the trail is not part of the link.\r\n * It calls `nok` if this *is* part of the link.\r\n *\r\n * ```markdown\r\n * > | contact@example.org.\r\n *                        ^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Dot.\r\n   *\r\n   * ```markdown\r\n   * > | contact@example.org.\r\n   *                    ^   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // Must be dot.\r\n    effects.consume(code)\r\n    return after\r\n  }\r\n\r\n  /**\r\n   * After dot.\r\n   *\r\n   * ```markdown\r\n   * > | contact@example.org.\r\n   *                     ^   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // Not a trail if alphanumeric.\r\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * See:\r\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\r\n *\r\n * @type {Previous}\r\n */\r\nfunction previousWww(code) {\r\n  return (\r\n    code === codes.eof ||\r\n    code === codes.leftParenthesis ||\r\n    code === codes.asterisk ||\r\n    code === codes.underscore ||\r\n    code === codes.leftSquareBracket ||\r\n    code === codes.rightSquareBracket ||\r\n    code === codes.tilde ||\r\n    markdownLineEndingOrSpace(code)\r\n  )\r\n}\r\n\r\n/**\r\n * See:\r\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\r\n *\r\n * @type {Previous}\r\n */\r\nfunction previousProtocol(code) {\r\n  return !asciiAlpha(code)\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Previous}\r\n */\r\nfunction previousEmail(code) {\r\n  // Do not allow a slash “inside” atext.\r\n  // The reference code is a bit weird, but that’s what it results in.\r\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\r\n  // Other than slash, every preceding character is allowed.\r\n  return !(code === codes.slash || gfmAtext(code))\r\n}\r\n\r\n/**\r\n * @param {Code} code\r\n * @returns {boolean}\r\n */\r\nfunction gfmAtext(code) {\r\n  return (\r\n    code === codes.plusSign ||\r\n    code === codes.dash ||\r\n    code === codes.dot ||\r\n    code === codes.underscore ||\r\n    asciiAlphanumeric(code)\r\n  )\r\n}\r\n\r\n/**\r\n * @param {Array<Event>} events\r\n * @returns {boolean}\r\n */\r\nfunction previousUnbalanced(events) {\r\n  let index = events.length\r\n  let result = false\r\n\r\n  while (index--) {\r\n    const token = events[index][1]\r\n\r\n    if (\r\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\r\n      !token._balanced\r\n    ) {\r\n      result = true\r\n      break\r\n    }\r\n\r\n    // If we’ve seen this token, and it was marked as not having any unbalanced\r\n    // bracket before it, we can exit.\r\n    if (token._gfmAutolinkLiteralWalkedInto) {\r\n      result = false\r\n      break\r\n    }\r\n  }\r\n\r\n  if (events.length > 0 && !result) {\r\n    // Mark the last token as “walked into” w/o finding\r\n    // anything.\r\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\r\n  }\r\n\r\n  return result\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Exiter} Exiter\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {blankLine} from 'micromark-core-commonmark'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\n\r\nconst indent = {tokenize: tokenizeIndent, partial: true}\r\n\r\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\r\n// affects label start (image).\r\n// That will let us drop `tokenizePotentialGfmFootnote*`.\r\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\r\n// That can be removed when `micromark-extension-footnote` is archived.\r\n\r\n/**\r\n * Create an extension for `micromark` to enable GFM footnote syntax.\r\n *\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions` to\r\n *   enable GFM footnote syntax.\r\n */\r\nexport function gfmFootnote() {\r\n  /** @type {Extension} */\r\n  return {\r\n    document: {\r\n      [codes.leftSquareBracket]: {\r\n        tokenize: tokenizeDefinitionStart,\r\n        continuation: {tokenize: tokenizeDefinitionContinuation},\r\n        exit: gfmFootnoteDefinitionEnd\r\n      }\r\n    },\r\n    text: {\r\n      [codes.leftSquareBracket]: {tokenize: tokenizeGfmFootnoteCall},\r\n      [codes.rightSquareBracket]: {\r\n        add: 'after',\r\n        tokenize: tokenizePotentialGfmFootnoteCall,\r\n        resolveTo: resolveToPotentialGfmFootnoteCall\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// To do: remove after micromark update.\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\r\n  const self = this\r\n  let index = self.events.length\r\n  /** @type {Array<string>} */\r\n  // @ts-expect-error It’s fine!\r\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\r\n  /** @type {Token} */\r\n  let labelStart\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    const token = self.events[index][1]\r\n\r\n    if (token.type === types.labelImage) {\r\n      labelStart = token\r\n      break\r\n    }\r\n\r\n    // Exit if we’ve walked far enough.\r\n    if (\r\n      token.type === 'gfmFootnoteCall' ||\r\n      token.type === types.labelLink ||\r\n      token.type === types.label ||\r\n      token.type === types.image ||\r\n      token.type === types.link\r\n    ) {\r\n      break\r\n    }\r\n  }\r\n\r\n  return start\r\n\r\n  /**\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.rightSquareBracket, 'expected `]`')\r\n\r\n    if (!labelStart || !labelStart._balanced) {\r\n      return nok(code)\r\n    }\r\n\r\n    const id = normalizeIdentifier(\r\n      self.sliceSerialize({start: labelStart.end, end: self.now()})\r\n    )\r\n\r\n    if (id.codePointAt(0) !== codes.caret || !defined.includes(id.slice(1))) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.enter('gfmFootnoteCallLabelMarker')\r\n    effects.consume(code)\r\n    effects.exit('gfmFootnoteCallLabelMarker')\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n// To do: remove after micromark update.\r\n/** @type {Resolver} */\r\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\r\n  let index = events.length\r\n  /** @type {Token | undefined} */\r\n  let labelStart\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    if (\r\n      events[index][1].type === types.labelImage &&\r\n      events[index][0] === 'enter'\r\n    ) {\r\n      labelStart = events[index][1]\r\n      break\r\n    }\r\n  }\r\n\r\n  assert(labelStart, 'expected `labelStart` to resolve')\r\n\r\n  // Change the `labelImageMarker` to a `data`.\r\n  events[index + 1][1].type = types.data\r\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\r\n\r\n  // The whole (without `!`):\r\n  /** @type {Token} */\r\n  const call = {\r\n    type: 'gfmFootnoteCall',\r\n    start: Object.assign({}, events[index + 3][1].start),\r\n    end: Object.assign({}, events[events.length - 1][1].end)\r\n  }\r\n  // The `^` marker\r\n  /** @type {Token} */\r\n  const marker = {\r\n    type: 'gfmFootnoteCallMarker',\r\n    start: Object.assign({}, events[index + 3][1].end),\r\n    end: Object.assign({}, events[index + 3][1].end)\r\n  }\r\n  // Increment the end 1 character.\r\n  marker.end.column++\r\n  marker.end.offset++\r\n  marker.end._bufferIndex++\r\n  /** @type {Token} */\r\n  const string = {\r\n    type: 'gfmFootnoteCallString',\r\n    start: Object.assign({}, marker.end),\r\n    end: Object.assign({}, events[events.length - 1][1].start)\r\n  }\r\n  /** @type {Token} */\r\n  const chunk = {\r\n    type: types.chunkString,\r\n    contentType: 'string',\r\n    start: Object.assign({}, string.start),\r\n    end: Object.assign({}, string.end)\r\n  }\r\n\r\n  /** @type {Array<Event>} */\r\n  const replacement = [\r\n    // Take the `labelImageMarker` (now `data`, the `!`)\r\n    events[index + 1],\r\n    events[index + 2],\r\n    ['enter', call, context],\r\n    // The `[`\r\n    events[index + 3],\r\n    events[index + 4],\r\n    // The `^`.\r\n    ['enter', marker, context],\r\n    ['exit', marker, context],\r\n    // Everything in between.\r\n    ['enter', string, context],\r\n    ['enter', chunk, context],\r\n    ['exit', chunk, context],\r\n    ['exit', string, context],\r\n    // The ending (`]`, properly parsed and labelled).\r\n    events[events.length - 2],\r\n    events[events.length - 1],\r\n    ['exit', call, context]\r\n  ]\r\n\r\n  events.splice(index, events.length - index + 1, ...replacement)\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {Array<string>} */\r\n  // @ts-expect-error It’s fine!\r\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\r\n  let size = 0\r\n  /** @type {boolean} */\r\n  let data\r\n\r\n  // Note: the implementation of `markdown-rs` is different, because it houses\r\n  // core *and* extensions in one project.\r\n  // Therefore, it can include footnote logic inside `label-end`.\r\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\r\n  // needed for labels.\r\n  return start\r\n\r\n  /**\r\n   * Start of footnote label.\r\n   *\r\n   * ```markdown\r\n   * > | a [^b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    effects.enter('gfmFootnoteCall')\r\n    effects.enter('gfmFootnoteCallLabelMarker')\r\n    effects.consume(code)\r\n    effects.exit('gfmFootnoteCallLabelMarker')\r\n    return callStart\r\n  }\r\n\r\n  /**\r\n   * After `[`, at `^`.\r\n   *\r\n   * ```markdown\r\n   * > | a [^b] c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function callStart(code) {\r\n    if (code !== codes.caret) return nok(code)\r\n\r\n    effects.enter('gfmFootnoteCallMarker')\r\n    effects.consume(code)\r\n    effects.exit('gfmFootnoteCallMarker')\r\n    effects.enter('gfmFootnoteCallString')\r\n    effects.enter('chunkString').contentType = 'string'\r\n    return callData\r\n  }\r\n\r\n  /**\r\n   * In label.\r\n   *\r\n   * ```markdown\r\n   * > | a [^b] c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function callData(code) {\r\n    if (\r\n      // Too long.\r\n      size > constants.linkReferenceSizeMax ||\r\n      // Closing brace with nothing.\r\n      (code === codes.rightSquareBracket && !data) ||\r\n      // Space or tab is not supported by GFM for some reason.\r\n      // `\\n` and `[` not being supported makes sense.\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.exit('chunkString')\r\n      const token = effects.exit('gfmFootnoteCallString')\r\n\r\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\r\n        return nok(code)\r\n      }\r\n\r\n      effects.enter('gfmFootnoteCallLabelMarker')\r\n      effects.consume(code)\r\n      effects.exit('gfmFootnoteCallLabelMarker')\r\n      effects.exit('gfmFootnoteCall')\r\n      return ok\r\n    }\r\n\r\n    if (!markdownLineEndingOrSpace(code)) {\r\n      data = true\r\n    }\r\n\r\n    size++\r\n    effects.consume(code)\r\n    return code === codes.backslash ? callEscape : callData\r\n  }\r\n\r\n  /**\r\n   * On character after escape.\r\n   *\r\n   * ```markdown\r\n   * > | a [^b\\c] d\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function callEscape(code) {\r\n    if (\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.backslash ||\r\n      code === codes.rightSquareBracket\r\n    ) {\r\n      effects.consume(code)\r\n      size++\r\n      return callData\r\n    }\r\n\r\n    return callData(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeDefinitionStart(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {Array<string>} */\r\n  // @ts-expect-error It’s fine!\r\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\r\n  /** @type {string} */\r\n  let identifier\r\n  let size = 0\r\n  /** @type {boolean | undefined} */\r\n  let data\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of GFM footnote definition.\r\n   *\r\n   * ```markdown\r\n   * > | [^a]: b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    effects.enter('gfmFootnoteDefinition')._container = true\r\n    effects.enter('gfmFootnoteDefinitionLabel')\r\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\r\n    effects.consume(code)\r\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\r\n    return labelAtMarker\r\n  }\r\n\r\n  /**\r\n   * In label, at caret.\r\n   *\r\n   * ```markdown\r\n   * > | [^a]: b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelAtMarker(code) {\r\n    if (code === codes.caret) {\r\n      effects.enter('gfmFootnoteDefinitionMarker')\r\n      effects.consume(code)\r\n      effects.exit('gfmFootnoteDefinitionMarker')\r\n      effects.enter('gfmFootnoteDefinitionLabelString')\r\n      effects.enter('chunkString').contentType = 'string'\r\n      return labelInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In label.\r\n   *\r\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\r\n   * > definition labels.\r\n   *\r\n   * ```markdown\r\n   * > | [^a]: b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelInside(code) {\r\n    if (\r\n      // Too long.\r\n      size > constants.linkReferenceSizeMax ||\r\n      // Closing brace with nothing.\r\n      (code === codes.rightSquareBracket && !data) ||\r\n      // Space or tab is not supported by GFM for some reason.\r\n      // `\\n` and `[` not being supported makes sense.\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.exit('chunkString')\r\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\r\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\r\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\r\n      effects.consume(code)\r\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\r\n      effects.exit('gfmFootnoteDefinitionLabel')\r\n      return labelAfter\r\n    }\r\n\r\n    if (!markdownLineEndingOrSpace(code)) {\r\n      data = true\r\n    }\r\n\r\n    size++\r\n    effects.consume(code)\r\n    return code === codes.backslash ? labelEscape : labelInside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\r\n   * > <https://github.com/github/cmark-gfm/issues/240>\r\n   *\r\n   * ```markdown\r\n   * > | [^a\\*b]: c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEscape(code) {\r\n    if (\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.backslash ||\r\n      code === codes.rightSquareBracket\r\n    ) {\r\n      effects.consume(code)\r\n      size++\r\n      return labelInside\r\n    }\r\n\r\n    return labelInside(code)\r\n  }\r\n\r\n  /**\r\n   * After definition label.\r\n   *\r\n   * ```markdown\r\n   * > | [^a]: b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelAfter(code) {\r\n    if (code === codes.colon) {\r\n      effects.enter('definitionMarker')\r\n      effects.consume(code)\r\n      effects.exit('definitionMarker')\r\n\r\n      if (!defined.includes(identifier)) {\r\n        defined.push(identifier)\r\n      }\r\n\r\n      // Any whitespace after the marker is eaten, forming indented code\r\n      // is not possible.\r\n      // No space is also fine, just like a block quote marker.\r\n      return factorySpace(\r\n        effects,\r\n        whitespaceAfter,\r\n        'gfmFootnoteDefinitionWhitespace'\r\n      )\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After definition prefix.\r\n   *\r\n   * ```markdown\r\n   * > | [^a]: b\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function whitespaceAfter(code) {\r\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\r\n  /// Start of footnote definition continuation.\r\n  ///\r\n  /// ```markdown\r\n  ///   | [^a]: b\r\n  /// > |     c\r\n  ///     ^\r\n  /// ```\r\n  //\r\n  // Either a blank line, which is okay, or an indented thing.\r\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\r\n}\r\n\r\n/** @type {Exiter} */\r\nfunction gfmFootnoteDefinitionEnd(effects) {\r\n  effects.exit('gfmFootnoteDefinition')\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeIndent(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return factorySpace(\r\n    effects,\r\n    afterPrefix,\r\n    'gfmFootnoteDefinitionIndent',\r\n    constants.tabSize + 1\r\n  )\r\n\r\n  /**\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\r\n      tail[2].sliceSerialize(tail[1], true).length === constants.tabSize\r\n      ? ok(code)\r\n      : nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n */\r\n\r\n/**\r\n * @callback BackLabelTemplate\r\n *   Generate a back label dynamically.\r\n *\r\n *   For the following markdown:\r\n *\r\n *   ```markdown\r\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\r\n *\r\n *   [^remark]: things about remark\r\n *   [^micromark]: things about micromark\r\n *   ```\r\n *\r\n *   This function will be called with:\r\n *\r\n *   * `0` and `0` for the backreference from `things about micromark` to\r\n *      `alpha`, as it is the first used definition, and the first call to it\r\n *   * `0` and `1` for the backreference from `things about micromark` to\r\n *      `bravo`, as it is the first used definition, and the second call to it\r\n *   * `1` and `0` for the backreference from `things about remark` to\r\n *      `charlie`, as it is the second used definition\r\n * @param {number} referenceIndex\r\n *   Index of the definition in the order that they are first referenced,\r\n *   0-indexed.\r\n * @param {number} rereferenceIndex\r\n *   Index of calls to the same definition, 0-indexed.\r\n * @returns {string}\r\n *   Back label to use when linking back from definitions to their reference.\r\n */\r\n\r\n/**\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {string} [clobberPrefix='user-content-']\r\n *   Prefix to use before the `id` attribute on footnotes to prevent them from\r\n *   *clobbering*.\r\n *\r\n *   The default is `'user-content-'`.\r\n *   Pass `''` for trusted markdown and when you are careful with\r\n *   polyfilling.\r\n *   You could pass a different prefix.\r\n *\r\n *   DOM clobbering is this:\r\n *\r\n *   ```html\r\n *   <p id=\"x\"></p>\r\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\r\n *   ```\r\n *\r\n *   The above example shows that elements are made available by browsers, by\r\n *   their ID, on the `window` object.\r\n *   This is a security risk because you might be expecting some other variable\r\n *   at that place.\r\n *   It can also break polyfills.\r\n *   Using a prefix solves these problems.\r\n * @property {string} [label='Footnotes']\r\n *   Textual label to use for the footnotes section.\r\n *\r\n *   The default value is `'Footnotes'`.\r\n *   Change it when the markdown is not in English.\r\n *\r\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\r\n *   is defined that does that) and so affects screen readers only.\r\n *   If you do have such a class, but want to show this section to everyone,\r\n *   pass different attributes with the `labelAttributes` option.\r\n * @property {string} [labelAttributes='class=\"sr-only\"']\r\n *   Attributes to use on the footnote label.\r\n *\r\n *   Change it to show the label and add other attributes.\r\n *\r\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\r\n *   is defined that does that) and so affects screen readers only.\r\n *   If you do have such a class, but want to show this section to everyone,\r\n *   pass an empty string.\r\n *   You can also add different attributes.\r\n *\r\n *   > 👉 **Note**: `id=\"footnote-label\"` is always added, because footnote\r\n *   > calls use it with `aria-describedby` to provide an accessible label.\r\n * @property {string} [labelTagName='h2']\r\n *   HTML tag name to use for the footnote label element.\r\n *\r\n *   Change it to match your document structure.\r\n *\r\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\r\n *   is defined that does that) and so affects screen readers only.\r\n *   If you do have such a class, but want to show this section to everyone,\r\n *   pass different attributes with the `labelAttributes` option.\r\n * @property {BackLabelTemplate | string} [backLabel]\r\n *   Textual label to describe the backreference back to references.\r\n *\r\n *   The default value is:\r\n *\r\n *   ```js\r\n *   function defaultBackLabel(referenceIndex, rereferenceIndex) {\r\n *    return (\r\n *      'Back to reference ' +\r\n *      (referenceIndex + 1) +\r\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\r\n *    )\r\n *  }\r\n *   ```\r\n *\r\n *   Change it when the markdown is not in English.\r\n *\r\n *   This label is used in the `aria-label` attribute on each backreference\r\n *   (the `↩` links).\r\n *   It affects users of assistive technology.\r\n */\r\n\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Generate the default label that GitHub uses on backreferences.\r\n *\r\n * @param {number} referenceIndex\r\n *   Index of the definition in the order that they are first referenced,\r\n *   0-indexed.\r\n * @param {number} rereferenceIndex\r\n *   Index of calls to the same definition, 0-indexed.\r\n * @returns {string}\r\n *   Default label.\r\n */\r\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\r\n  return (\r\n    'Back to reference ' +\r\n    (referenceIndex + 1) +\r\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\r\n  )\r\n}\r\n\r\n/**\r\n * Create an extension for `micromark` to support GFM footnotes when\r\n * serializing to HTML.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {HtmlExtension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GFM footnotes when serializing to HTML.\r\n */\r\nexport function gfmFootnoteHtml(options) {\r\n  const config = options || emptyOptions\r\n  const label = config.label || 'Footnotes'\r\n  const labelTagName = config.labelTagName || 'h2'\r\n  const labelAttributes =\r\n    config.labelAttributes === null || config.labelAttributes === undefined\r\n      ? 'class=\"sr-only\"'\r\n      : config.labelAttributes\r\n  const backLabel = config.backLabel || defaultBackLabel\r\n  const clobberPrefix =\r\n    config.clobberPrefix === null || config.clobberPrefix === undefined\r\n      ? 'user-content-'\r\n      : config.clobberPrefix\r\n  return {\r\n    enter: {\r\n      gfmFootnoteDefinition() {\r\n        const stack = this.getData('tightStack')\r\n        stack.push(false)\r\n      },\r\n      gfmFootnoteDefinitionLabelString() {\r\n        this.buffer()\r\n      },\r\n      gfmFootnoteCallString() {\r\n        this.buffer()\r\n      }\r\n    },\r\n    exit: {\r\n      gfmFootnoteDefinition() {\r\n        let definitions = this.getData('gfmFootnoteDefinitions')\r\n        const footnoteStack = this.getData('gfmFootnoteDefinitionStack')\r\n        assert(footnoteStack, 'expected `footnoteStack`')\r\n        const tightStack = this.getData('tightStack')\r\n        const current = footnoteStack.pop()\r\n        const value = this.resume()\r\n\r\n        assert(current, 'expected to be in a footnote')\r\n\r\n        if (!definitions) {\r\n          this.setData('gfmFootnoteDefinitions', (definitions = {}))\r\n        }\r\n\r\n        if (!own.call(definitions, current)) definitions[current] = value\r\n\r\n        tightStack.pop()\r\n        this.setData('slurpOneLineEnding', true)\r\n        // “Hack” to prevent a line ending from showing up if we’re in a definition in\r\n        // an empty list item.\r\n        this.setData('lastWasTag')\r\n      },\r\n      gfmFootnoteDefinitionLabelString(token) {\r\n        let footnoteStack = /** @type {Array<string>} */ (\r\n          this.getData('gfmFootnoteDefinitionStack')\r\n        )\r\n\r\n        if (!footnoteStack) {\r\n          this.setData('gfmFootnoteDefinitionStack', (footnoteStack = []))\r\n        }\r\n\r\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)))\r\n        this.resume() // Drop the label.\r\n        this.buffer() // Get ready for a value.\r\n      },\r\n      gfmFootnoteCallString(token) {\r\n        let calls = this.getData('gfmFootnoteCallOrder')\r\n        let counts = this.getData('gfmFootnoteCallCounts')\r\n        const id = normalizeIdentifier(this.sliceSerialize(token))\r\n        /** @type {number} */\r\n        let counter\r\n\r\n        this.resume()\r\n\r\n        if (!calls) this.setData('gfmFootnoteCallOrder', (calls = []))\r\n        if (!counts) this.setData('gfmFootnoteCallCounts', (counts = {}))\r\n\r\n        const index = calls.indexOf(id)\r\n        const safeId = sanitizeUri(id.toLowerCase())\r\n\r\n        if (index === -1) {\r\n          calls.push(id)\r\n          counts[id] = 1\r\n          counter = calls.length\r\n        } else {\r\n          counts[id]++\r\n          counter = index + 1\r\n        }\r\n\r\n        const reuseCounter = counts[id]\r\n\r\n        this.tag(\r\n          '<sup><a href=\"#' +\r\n            clobberPrefix +\r\n            'fn-' +\r\n            safeId +\r\n            '\" id=\"' +\r\n            clobberPrefix +\r\n            'fnref-' +\r\n            safeId +\r\n            (reuseCounter > 1 ? '-' + reuseCounter : '') +\r\n            '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' +\r\n            String(counter) +\r\n            '</a></sup>'\r\n        )\r\n      },\r\n      null() {\r\n        const calls = /** @type {Array<string>} */ (\r\n          this.getData('gfmFootnoteCallOrder') || []\r\n        )\r\n        const counts = /** @type {Record<string, number>} */ (\r\n          this.getData('gfmFootnoteCallCounts') || {}\r\n        )\r\n        const definitions = /** @type {Record<string, string>} */ (\r\n          this.getData('gfmFootnoteDefinitions') || {}\r\n        )\r\n        let index = -1\r\n\r\n        if (calls.length > 0) {\r\n          this.lineEndingIfNeeded()\r\n          this.tag(\r\n            '<section data-footnotes=\"\" class=\"footnotes\"><' +\r\n              labelTagName +\r\n              ' id=\"footnote-label\"' +\r\n              (labelAttributes ? ' ' + labelAttributes : '') +\r\n              '>'\r\n          )\r\n          this.raw(this.encode(label))\r\n          this.tag('</' + labelTagName + '>')\r\n          this.lineEndingIfNeeded()\r\n          this.tag('<ol>')\r\n        }\r\n\r\n        while (++index < calls.length) {\r\n          // Called definitions are always defined.\r\n          const id = calls[index]\r\n          const safeId = sanitizeUri(id.toLowerCase())\r\n          let referenceIndex = 0\r\n          /** @type {Array<string>} */\r\n          const references = []\r\n\r\n          while (++referenceIndex <= counts[id]) {\r\n            references.push(\r\n              '<a href=\"#' +\r\n                clobberPrefix +\r\n                'fnref-' +\r\n                safeId +\r\n                (referenceIndex > 1 ? '-' + referenceIndex : '') +\r\n                '\" data-footnote-backref=\"\" aria-label=\"' +\r\n                this.encode(\r\n                  typeof backLabel === 'string'\r\n                    ? backLabel\r\n                    : backLabel(index, referenceIndex)\r\n                ) +\r\n                '\" class=\"data-footnote-backref\">↩' +\r\n                (referenceIndex > 1\r\n                  ? '<sup>' + referenceIndex + '</sup>'\r\n                  : '') +\r\n                '</a>'\r\n            )\r\n          }\r\n\r\n          const reference = references.join(' ')\r\n          let injected = false\r\n\r\n          this.lineEndingIfNeeded()\r\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">')\r\n          this.lineEndingIfNeeded()\r\n          this.tag(\r\n            definitions[id].replace(\r\n              /<\\/p>(?:\\r?\\n|\\r)?$/,\r\n              (/** @type {string} */ $0) => {\r\n                injected = true\r\n                return ' ' + reference + $0\r\n              }\r\n            )\r\n          )\r\n\r\n          if (!injected) {\r\n            this.lineEndingIfNeeded()\r\n            this.tag(reference)\r\n          }\r\n\r\n          this.lineEndingIfNeeded()\r\n          this.tag('</li>')\r\n        }\r\n\r\n        if (calls.length > 0) {\r\n          this.lineEndingIfNeeded()\r\n          this.tag('</ol>')\r\n          this.lineEndingIfNeeded()\r\n          this.tag('</section>')\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n *\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean} [singleTilde=true]\r\n *   Whether to support strikethrough with a single tilde.\r\n *\r\n *   Single tildes work on github.com, but are technically prohibited by the\r\n *   GFM spec.\r\n */\r\n\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {splice} from 'micromark-util-chunked'\r\nimport {classifyCharacter} from 'micromark-util-classify-character'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\n\r\n/**\r\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions`, to\r\n *   enable GFM strikethrough syntax.\r\n */\r\nexport function gfmStrikethrough(options) {\r\n  const options_ = options || {}\r\n  let single = options_.singleTilde\r\n  const tokenizer = {\r\n    tokenize: tokenizeStrikethrough,\r\n    resolveAll: resolveAllStrikethrough\r\n  }\r\n\r\n  if (single === null || single === undefined) {\r\n    single = true\r\n  }\r\n\r\n  return {\r\n    text: {[codes.tilde]: tokenizer},\r\n    insideSpan: {null: [tokenizer]},\r\n    attentionMarkers: {null: [codes.tilde]}\r\n  }\r\n\r\n  /**\r\n   * Take events and resolve strikethrough.\r\n   *\r\n   * @type {Resolver}\r\n   */\r\n  function resolveAllStrikethrough(events, context) {\r\n    let index = -1\r\n\r\n    // Walk through all events.\r\n    while (++index < events.length) {\r\n      // Find a token that can close.\r\n      if (\r\n        events[index][0] === 'enter' &&\r\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\r\n        events[index][1]._close\r\n      ) {\r\n        let open = index\r\n\r\n        // Now walk back to find an opener.\r\n        while (open--) {\r\n          // Find a token that can open the closer.\r\n          if (\r\n            events[open][0] === 'exit' &&\r\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\r\n            events[open][1]._open &&\r\n            // If the sizes are the same:\r\n            events[index][1].end.offset - events[index][1].start.offset ===\r\n              events[open][1].end.offset - events[open][1].start.offset\r\n          ) {\r\n            events[index][1].type = 'strikethroughSequence'\r\n            events[open][1].type = 'strikethroughSequence'\r\n\r\n            /** @type {Token} */\r\n            const strikethrough = {\r\n              type: 'strikethrough',\r\n              start: Object.assign({}, events[open][1].start),\r\n              end: Object.assign({}, events[index][1].end)\r\n            }\r\n\r\n            /** @type {Token} */\r\n            const text = {\r\n              type: 'strikethroughText',\r\n              start: Object.assign({}, events[open][1].end),\r\n              end: Object.assign({}, events[index][1].start)\r\n            }\r\n\r\n            // Opening.\r\n            /** @type {Array<Event>} */\r\n            const nextEvents = [\r\n              ['enter', strikethrough, context],\r\n              ['enter', events[open][1], context],\r\n              ['exit', events[open][1], context],\r\n              ['enter', text, context]\r\n            ]\r\n\r\n            const insideSpan = context.parser.constructs.insideSpan.null\r\n\r\n            if (insideSpan) {\r\n              // Between.\r\n              splice(\r\n                nextEvents,\r\n                nextEvents.length,\r\n                0,\r\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\r\n              )\r\n            }\r\n\r\n            // Closing.\r\n            splice(nextEvents, nextEvents.length, 0, [\r\n              ['exit', text, context],\r\n              ['enter', events[index][1], context],\r\n              ['exit', events[index][1], context],\r\n              ['exit', strikethrough, context]\r\n            ])\r\n\r\n            splice(events, open - 1, index - open + 3, nextEvents)\r\n\r\n            index = open + nextEvents.length - 2\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    index = -1\r\n\r\n    while (++index < events.length) {\r\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\r\n        events[index][1].type = types.data\r\n      }\r\n    }\r\n\r\n    return events\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   * @type {Tokenizer}\r\n   */\r\n  function tokenizeStrikethrough(effects, ok, nok) {\r\n    const previous = this.previous\r\n    const events = this.events\r\n    let size = 0\r\n\r\n    return start\r\n\r\n    /** @type {State} */\r\n    function start(code) {\r\n      assert(code === codes.tilde, 'expected `~`')\r\n\r\n      if (\r\n        previous === codes.tilde &&\r\n        events[events.length - 1][1].type !== types.characterEscape\r\n      ) {\r\n        return nok(code)\r\n      }\r\n\r\n      effects.enter('strikethroughSequenceTemporary')\r\n      return more(code)\r\n    }\r\n\r\n    /** @type {State} */\r\n    function more(code) {\r\n      const before = classifyCharacter(previous)\r\n\r\n      if (code === codes.tilde) {\r\n        // If this is the third marker, exit.\r\n        if (size > 1) return nok(code)\r\n        effects.consume(code)\r\n        size++\r\n        return more\r\n      }\r\n\r\n      if (size < 2 && !single) return nok(code)\r\n      const token = effects.exit('strikethroughSequenceTemporary')\r\n      const after = classifyCharacter(code)\r\n      token._open =\r\n        !after || (after === constants.attentionSideAfter && Boolean(before))\r\n      token._close =\r\n        !before || (before === constants.attentionSideAfter && Boolean(after))\r\n      return ok(code)\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n */\r\n\r\n// Port of `edit_map.rs` from `markdown-rs`.\r\n// This should move to `markdown-js` later.\r\n\r\n// Deal with several changes in events, batching them together.\r\n//\r\n// Preferably, changes should be kept to a minimum.\r\n// Sometimes, it’s needed to change the list of events, because parsing can be\r\n// messy, and it helps to expose a cleaner interface of events to the compiler\r\n// and other users.\r\n// It can also help to merge many adjacent similar events.\r\n// And, in other cases, it’s needed to parse subcontent: pass some events\r\n// through another tokenizer and inject the result.\r\n\r\n/**\r\n * @typedef {[number, number, Array<Event>]} Change\r\n * @typedef {[number, number, number]} Jump\r\n */\r\n\r\n/**\r\n * Tracks a bunch of edits.\r\n */\r\nexport class EditMap {\r\n  /**\r\n   * Create a new edit map.\r\n   */\r\n  constructor() {\r\n    /**\r\n     * Record of changes.\r\n     *\r\n     * @type {Array<Change>}\r\n     */\r\n    this.map = []\r\n  }\r\n\r\n  /**\r\n   * Create an edit: a remove and/or add at a certain place.\r\n   *\r\n   * @param {number} index\r\n   * @param {number} remove\r\n   * @param {Array<Event>} add\r\n   * @returns {void}\r\n   */\r\n  add(index, remove, add) {\r\n    addImpl(this, index, remove, add)\r\n  }\r\n\r\n  // To do: not used here.\r\n  // /**\r\n  //  * Create an edit: but insert `add` before existing additions.\r\n  //  *\r\n  //  * @param {number} index\r\n  //  * @param {number} remove\r\n  //  * @param {Array<Event>} add\r\n  //  * @returns {void}\r\n  //  */\r\n  // addBefore(index, remove, add) {\r\n  //   addImpl(this, index, remove, add, true)\r\n  // }\r\n\r\n  /**\r\n   * Done, change the events.\r\n   *\r\n   * @param {Array<Event>} events\r\n   * @returns {void}\r\n   */\r\n  consume(events) {\r\n    this.map.sort((a, b) => a[0] - b[0])\r\n\r\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\r\n    if (this.map.length === 0) {\r\n      return\r\n    }\r\n\r\n    // To do: if links are added in events, like they are in `markdown-rs`,\r\n    // this is needed.\r\n    // // Calculate jumps: where items in the current list move to.\r\n    // /** @type {Array<Jump>} */\r\n    // const jumps = []\r\n    // let index = 0\r\n    // let addAcc = 0\r\n    // let removeAcc = 0\r\n    // while (index < this.map.length) {\r\n    //   const [at, remove, add] = this.map[index]\r\n    //   removeAcc += remove\r\n    //   addAcc += add.length\r\n    //   jumps.push([at, removeAcc, addAcc])\r\n    //   index += 1\r\n    // }\r\n    //\r\n    // . shiftLinks(events, jumps)\r\n\r\n    let index = this.map.length\r\n    /** @type {Array<Array<Event>>} */\r\n    const vecs = []\r\n    while (index > 0) {\r\n      index -= 1\r\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\r\n      // eslint-disable-next-line unicorn/no-array-push-push\r\n      vecs.push(this.map[index][2])\r\n\r\n      // Truncate rest.\r\n      events.length = this.map[index][0]\r\n    }\r\n\r\n    vecs.push([...events])\r\n    events.length = 0\r\n\r\n    let slice = vecs.pop()\r\n\r\n    while (slice) {\r\n      events.push(...slice)\r\n      slice = vecs.pop()\r\n    }\r\n\r\n    // Truncate everything.\r\n    this.map.length = 0\r\n  }\r\n}\r\n\r\n/**\r\n * Create an edit.\r\n *\r\n * @param {EditMap} editMap\r\n * @param {number} at\r\n * @param {number} remove\r\n * @param {Array<Event>} add\r\n * @returns {void}\r\n */\r\nfunction addImpl(editMap, at, remove, add) {\r\n  let index = 0\r\n\r\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\r\n  if (remove === 0 && add.length === 0) {\r\n    return\r\n  }\r\n\r\n  while (index < editMap.map.length) {\r\n    if (editMap.map[index][0] === at) {\r\n      editMap.map[index][1] += remove\r\n\r\n      // To do: before not used.\r\n      // if (before) {\r\n      //   add.push(...editMap.map[index][2])\r\n      //   editMap.map[index][2] = add\r\n      // } else {\r\n      editMap.map[index][2].push(...add)\r\n      // }\r\n\r\n      return\r\n    }\r\n\r\n    index += 1\r\n  }\r\n\r\n  editMap.map.push([at, remove, add])\r\n}\r\n\r\n// /**\r\n//  * Shift `previous` and `next` links according to `jumps`.\r\n//  *\r\n//  * This fixes links in case there are events removed or added between them.\r\n//  *\r\n//  * @param {Array<Event>} events\r\n//  * @param {Array<Jump>} jumps\r\n//  */\r\n// function shiftLinks(events, jumps) {\r\n//   let jumpIndex = 0\r\n//   let index = 0\r\n//   let add = 0\r\n//   let rm = 0\r\n\r\n//   while (index < events.length) {\r\n//     const rmCurr = rm\r\n\r\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\r\n//       add = jumps[jumpIndex][2]\r\n//       rm = jumps[jumpIndex][1]\r\n//       jumpIndex += 1\r\n//     }\r\n\r\n//     // Ignore items that will be removed.\r\n//     if (rm > rmCurr) {\r\n//       index += rm - rmCurr\r\n//     } else {\r\n//       console.log('to do: links?', add, rmCurr)\r\n//       // ?\r\n//       // if let Some(link) = &events[index].link {\r\n//       //     if let Some(next) = link.next {\r\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\r\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\r\n//       //             add = jumps[jumpIndex].2;\r\n//       //             rm = jumps[jumpIndex].1;\r\n//       //             jumpIndex += 1;\r\n//       //         }\r\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\r\n//       //         index = next;\r\n//       //         continue;\r\n//       //     }\r\n//       // }\r\n//       index += 1\r\n//     }\r\n//   }\r\n// }\r\n", "/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n */\r\n\r\n/**\r\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\r\n */\r\n\r\nimport {ok as assert} from 'uvu/assert'\r\n\r\n/**\r\n * Figure out the alignment of a GFM table.\r\n *\r\n * @param {Array<Event>} events\r\n * @param {number} index\r\n * @returns {Array<Align>}\r\n */\r\nexport function gfmTableAlign(events, index) {\r\n  assert(events[index][1].type === 'table', 'expected table')\r\n  let inDelimiterRow = false\r\n  /** @type {Array<Align>} */\r\n  const align = []\r\n\r\n  while (index < events.length) {\r\n    const event = events[index]\r\n\r\n    if (inDelimiterRow) {\r\n      if (event[0] === 'enter') {\r\n        // Start of alignment value: set a new column.\r\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\r\n        if (event[1].type === 'tableContent') {\r\n          align.push(\r\n            events[index + 1][1].type === 'tableDelimiterMarker'\r\n              ? 'left'\r\n              : 'none'\r\n          )\r\n        }\r\n      }\r\n      // Exits:\r\n      // End of alignment value: change the column.\r\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\r\n      else if (event[1].type === 'tableContent') {\r\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\r\n          const alignIndex = align.length - 1\r\n\r\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\r\n        }\r\n      }\r\n      // Done!\r\n      else if (event[1].type === 'tableDelimiterRow') {\r\n        break\r\n      }\r\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\r\n      inDelimiterRow = true\r\n    }\r\n\r\n    index += 1\r\n  }\r\n\r\n  return align\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\n/**\r\n * @typedef {[number, number, number, number]} Range\r\n *   Cell info.\r\n *\r\n * @typedef {0 | 1 | 2 | 3} RowKind\r\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\r\n */\r\n\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\nimport {EditMap} from './edit-map.js'\r\nimport {gfmTableAlign} from './infer.js'\r\n\r\n// To do: next major: expose functions.\r\n\r\n/**\r\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\r\n * table syntax.\r\n *\r\n * @type {Extension}\r\n */\r\nexport const gfmTable = {\r\n  flow: {null: {tokenize: tokenizeTable, resolveAll: resolveTable}}\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTable(effects, ok, nok) {\r\n  const self = this\r\n  let size = 0\r\n  let sizeB = 0\r\n  /** @type {boolean | undefined} */\r\n  let seen\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of a GFM table.\r\n   *\r\n   * If there is a valid table row or table head before, then we try to parse\r\n   * another row.\r\n   * Otherwise, we try to parse a head.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   * ```\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    let index = self.events.length - 1\r\n\r\n    while (index > -1) {\r\n      const type = self.events[index][1].type\r\n      if (\r\n        type === types.lineEnding ||\r\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\r\n        type === types.linePrefix\r\n      )\r\n        index--\r\n      else break\r\n    }\r\n\r\n    const tail = index > -1 ? self.events[index][1].type : null\r\n\r\n    const next =\r\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\r\n\r\n    // Don’t allow lazy body rows.\r\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\r\n      return nok(code)\r\n    }\r\n\r\n    return next(code)\r\n  }\r\n\r\n  /**\r\n   * Before table head row.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowBefore(code) {\r\n    effects.enter('tableHead')\r\n    effects.enter('tableRow')\r\n    return headRowStart(code)\r\n  }\r\n\r\n  /**\r\n   * Before table head row, after whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowStart(code) {\r\n    if (code === codes.verticalBar) {\r\n      return headRowBreak(code)\r\n    }\r\n\r\n    // To do: micromark-js should let us parse our own whitespace in extensions,\r\n    // like `markdown-rs`:\r\n    //\r\n    // ```js\r\n    // // 4+ spaces.\r\n    // if (markdownSpace(code)) {\r\n    //   return nok(code)\r\n    // }\r\n    // ```\r\n\r\n    seen = true\r\n    // Count the first character, that isn’t a pipe, double.\r\n    sizeB += 1\r\n    return headRowBreak(code)\r\n  }\r\n\r\n  /**\r\n   * At break in table head row.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *       ^\r\n   *         ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowBreak(code) {\r\n    if (code === codes.eof) {\r\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\r\n      return nok(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\r\n      if (sizeB > 1) {\r\n        sizeB = 0\r\n        // To do: check if this works.\r\n        // Feel free to interrupt:\r\n        self.interrupt = true\r\n        effects.exit('tableRow')\r\n        effects.enter(types.lineEnding)\r\n        effects.consume(code)\r\n        effects.exit(types.lineEnding)\r\n        return headDelimiterStart\r\n      }\r\n\r\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\r\n      return nok(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      // To do: check if this is fine.\r\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\r\n      // State::Retry(space_or_tab(tokenizer))\r\n      return factorySpace(effects, headRowBreak, types.whitespace)(code)\r\n    }\r\n\r\n    sizeB += 1\r\n\r\n    if (seen) {\r\n      seen = false\r\n      // Header cell count.\r\n      size += 1\r\n    }\r\n\r\n    if (code === codes.verticalBar) {\r\n      effects.enter('tableCellDivider')\r\n      effects.consume(code)\r\n      effects.exit('tableCellDivider')\r\n      // Whether a delimiter was seen.\r\n      seen = true\r\n      return headRowBreak\r\n    }\r\n\r\n    // Anything else is cell data.\r\n    effects.enter(types.data)\r\n    return headRowData(code)\r\n  }\r\n\r\n  /**\r\n   * In table head row data.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *       ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowData(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.verticalBar ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      effects.exit(types.data)\r\n      return headRowBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === codes.backslash ? headRowEscape : headRowData\r\n  }\r\n\r\n  /**\r\n   * In table head row escape.\r\n   *\r\n   * ```markdown\r\n   * > | | a\\-b |\r\n   *         ^\r\n   *   | | ---- |\r\n   *   | | c    |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowEscape(code) {\r\n    if (code === codes.backslash || code === codes.verticalBar) {\r\n      effects.consume(code)\r\n      return headRowData\r\n    }\r\n\r\n    return headRowData(code)\r\n  }\r\n\r\n  /**\r\n   * Before delimiter row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *     ^\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterStart(code) {\r\n    // Reset `interrupt`.\r\n    self.interrupt = false\r\n\r\n    // Note: in `markdown-rs`, we need to handle piercing here too.\r\n    if (self.parser.lazy[self.now().line]) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.enter('tableDelimiterRow')\r\n    // Track if we’ve seen a `:` or `|`.\r\n    seen = false\r\n\r\n    if (markdownSpace(code)) {\r\n      assert(self.parser.constructs.disable.null, 'expected `disabled.null`')\r\n      return factorySpace(\r\n        effects,\r\n        headDelimiterBefore,\r\n        types.linePrefix,\r\n        self.parser.constructs.disable.null.includes('codeIndented')\r\n          ? undefined\r\n          : constants.tabSize\r\n      )(code)\r\n    }\r\n\r\n    return headDelimiterBefore(code)\r\n  }\r\n\r\n  /**\r\n   * Before delimiter row, after optional whitespace.\r\n   *\r\n   * Reused when a `|` is found later, to parse another cell.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *     ^\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterBefore(code) {\r\n    if (code === codes.dash || code === codes.colon) {\r\n      return headDelimiterValueBefore(code)\r\n    }\r\n\r\n    if (code === codes.verticalBar) {\r\n      seen = true\r\n      // If we start with a pipe, we open a cell marker.\r\n      effects.enter('tableCellDivider')\r\n      effects.consume(code)\r\n      effects.exit('tableCellDivider')\r\n      return headDelimiterCellBefore\r\n    }\r\n\r\n    // More whitespace / empty row not allowed at start.\r\n    return headDelimiterNok(code)\r\n  }\r\n\r\n  /**\r\n   * After `|`, before delimiter cell.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterCellBefore(code) {\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(\r\n        effects,\r\n        headDelimiterValueBefore,\r\n        types.whitespace\r\n      )(code)\r\n    }\r\n\r\n    return headDelimiterValueBefore(code)\r\n  }\r\n\r\n  /**\r\n   * Before delimiter cell value.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterValueBefore(code) {\r\n    // Align: left.\r\n    if (code === codes.colon) {\r\n      sizeB += 1\r\n      seen = true\r\n\r\n      effects.enter('tableDelimiterMarker')\r\n      effects.consume(code)\r\n      effects.exit('tableDelimiterMarker')\r\n      return headDelimiterLeftAlignmentAfter\r\n    }\r\n\r\n    // Align: none.\r\n    if (code === codes.dash) {\r\n      sizeB += 1\r\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\r\n      return headDelimiterLeftAlignmentAfter(code)\r\n    }\r\n\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return headDelimiterCellAfter(code)\r\n    }\r\n\r\n    return headDelimiterNok(code)\r\n  }\r\n\r\n  /**\r\n   * After delimiter cell left alignment marker.\r\n   *\r\n   * ```markdown\r\n   *   | | a  |\r\n   * > | | :- |\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterLeftAlignmentAfter(code) {\r\n    if (code === codes.dash) {\r\n      effects.enter('tableDelimiterFiller')\r\n      return headDelimiterFiller(code)\r\n    }\r\n\r\n    // Anything else is not ok after the left-align colon.\r\n    return headDelimiterNok(code)\r\n  }\r\n\r\n  /**\r\n   * In delimiter cell filler.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterFiller(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return headDelimiterFiller\r\n    }\r\n\r\n    // Align is `center` if it was `left`, `right` otherwise.\r\n    if (code === codes.colon) {\r\n      seen = true\r\n      effects.exit('tableDelimiterFiller')\r\n      effects.enter('tableDelimiterMarker')\r\n      effects.consume(code)\r\n      effects.exit('tableDelimiterMarker')\r\n      return headDelimiterRightAlignmentAfter\r\n    }\r\n\r\n    effects.exit('tableDelimiterFiller')\r\n    return headDelimiterRightAlignmentAfter(code)\r\n  }\r\n\r\n  /**\r\n   * After delimiter cell right alignment marker.\r\n   *\r\n   * ```markdown\r\n   *   | |  a |\r\n   * > | | -: |\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterRightAlignmentAfter(code) {\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(\r\n        effects,\r\n        headDelimiterCellAfter,\r\n        types.whitespace\r\n      )(code)\r\n    }\r\n\r\n    return headDelimiterCellAfter(code)\r\n  }\r\n\r\n  /**\r\n   * After delimiter cell.\r\n   *\r\n   * ```markdown\r\n   *   | |  a |\r\n   * > | | -: |\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterCellAfter(code) {\r\n    if (code === codes.verticalBar) {\r\n      return headDelimiterBefore(code)\r\n    }\r\n\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      // Exit when:\r\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\r\n      //   underline instead)\r\n      // * the header cell count is not the delimiter cell count\r\n      if (!seen || size !== sizeB) {\r\n        return headDelimiterNok(code)\r\n      }\r\n\r\n      // Note: in markdown-rs`, a reset is needed here.\r\n      effects.exit('tableDelimiterRow')\r\n      effects.exit('tableHead')\r\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\r\n      // effects.register_resolver(ResolveName::GfmTable)\r\n      return ok(code)\r\n    }\r\n\r\n    return headDelimiterNok(code)\r\n  }\r\n\r\n  /**\r\n   * In delimiter row, at a disallowed byte.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | x |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterNok(code) {\r\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * Before table body row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowStart(code) {\r\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\r\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\r\n    // never at whitespace.\r\n    effects.enter('tableRow')\r\n    return bodyRowBreak(code)\r\n  }\r\n\r\n  /**\r\n   * At break in table body row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   *       ^\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowBreak(code) {\r\n    if (code === codes.verticalBar) {\r\n      effects.enter('tableCellDivider')\r\n      effects.consume(code)\r\n      effects.exit('tableCellDivider')\r\n      return bodyRowBreak\r\n    }\r\n\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit('tableRow')\r\n      return ok(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, bodyRowBreak, types.whitespace)(code)\r\n    }\r\n\r\n    // Anything else is cell content.\r\n    effects.enter(types.data)\r\n    return bodyRowData(code)\r\n  }\r\n\r\n  /**\r\n   * In table body row data.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowData(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.verticalBar ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      effects.exit(types.data)\r\n      return bodyRowBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === codes.backslash ? bodyRowEscape : bodyRowData\r\n  }\r\n\r\n  /**\r\n   * In table body row escape.\r\n   *\r\n   * ```markdown\r\n   *   | | a    |\r\n   *   | | ---- |\r\n   * > | | b\\-c |\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowEscape(code) {\r\n    if (code === codes.backslash || code === codes.verticalBar) {\r\n      effects.consume(code)\r\n      return bodyRowData\r\n    }\r\n\r\n    return bodyRowData(code)\r\n  }\r\n}\r\n\r\n/** @type {Resolver} */\r\n// eslint-disable-next-line complexity\r\nfunction resolveTable(events, context) {\r\n  let index = -1\r\n  let inFirstCellAwaitingPipe = true\r\n  /** @type {RowKind} */\r\n  let rowKind = 0\r\n  /** @type {Range} */\r\n  let lastCell = [0, 0, 0, 0]\r\n  /** @type {Range} */\r\n  let cell = [0, 0, 0, 0]\r\n  let afterHeadAwaitingFirstBodyRow = false\r\n  let lastTableEnd = 0\r\n  /** @type {Token | undefined} */\r\n  let currentTable\r\n  /** @type {Token | undefined} */\r\n  let currentBody\r\n  /** @type {Token | undefined} */\r\n  let currentCell\r\n\r\n  const map = new EditMap()\r\n\r\n  while (++index < events.length) {\r\n    const event = events[index]\r\n    const token = event[1]\r\n\r\n    if (event[0] === 'enter') {\r\n      // Start of head.\r\n      if (token.type === 'tableHead') {\r\n        afterHeadAwaitingFirstBodyRow = false\r\n\r\n        // Inject previous (body end and) table end.\r\n        if (lastTableEnd !== 0) {\r\n          assert(currentTable, 'there should be a table opening')\r\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\r\n          currentBody = undefined\r\n          lastTableEnd = 0\r\n        }\r\n\r\n        // Inject table start.\r\n        currentTable = {\r\n          type: 'table',\r\n          start: Object.assign({}, token.start),\r\n          // Note: correct end is set later.\r\n          end: Object.assign({}, token.end)\r\n        }\r\n        map.add(index, 0, [['enter', currentTable, context]])\r\n      } else if (\r\n        token.type === 'tableRow' ||\r\n        token.type === 'tableDelimiterRow'\r\n      ) {\r\n        inFirstCellAwaitingPipe = true\r\n        currentCell = undefined\r\n        lastCell = [0, 0, 0, 0]\r\n        cell = [0, index + 1, 0, 0]\r\n\r\n        // Inject table body start.\r\n        if (afterHeadAwaitingFirstBodyRow) {\r\n          afterHeadAwaitingFirstBodyRow = false\r\n          currentBody = {\r\n            type: 'tableBody',\r\n            start: Object.assign({}, token.start),\r\n            // Note: correct end is set later.\r\n            end: Object.assign({}, token.end)\r\n          }\r\n          map.add(index, 0, [['enter', currentBody, context]])\r\n        }\r\n\r\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\r\n      }\r\n      // Cell data.\r\n      else if (\r\n        rowKind &&\r\n        (token.type === types.data ||\r\n          token.type === 'tableDelimiterMarker' ||\r\n          token.type === 'tableDelimiterFiller')\r\n      ) {\r\n        inFirstCellAwaitingPipe = false\r\n\r\n        // First value in cell.\r\n        if (cell[2] === 0) {\r\n          if (lastCell[1] !== 0) {\r\n            cell[0] = cell[1]\r\n            currentCell = flushCell(\r\n              map,\r\n              context,\r\n              lastCell,\r\n              rowKind,\r\n              undefined,\r\n              currentCell\r\n            )\r\n            lastCell = [0, 0, 0, 0]\r\n          }\r\n\r\n          cell[2] = index\r\n        }\r\n      } else if (token.type === 'tableCellDivider') {\r\n        if (inFirstCellAwaitingPipe) {\r\n          inFirstCellAwaitingPipe = false\r\n        } else {\r\n          if (lastCell[1] !== 0) {\r\n            cell[0] = cell[1]\r\n            currentCell = flushCell(\r\n              map,\r\n              context,\r\n              lastCell,\r\n              rowKind,\r\n              undefined,\r\n              currentCell\r\n            )\r\n          }\r\n\r\n          lastCell = cell\r\n          cell = [lastCell[1], index, 0, 0]\r\n        }\r\n      }\r\n    }\r\n    // Exit events.\r\n    else if (token.type === 'tableHead') {\r\n      afterHeadAwaitingFirstBodyRow = true\r\n      lastTableEnd = index\r\n    } else if (\r\n      token.type === 'tableRow' ||\r\n      token.type === 'tableDelimiterRow'\r\n    ) {\r\n      lastTableEnd = index\r\n\r\n      if (lastCell[1] !== 0) {\r\n        cell[0] = cell[1]\r\n        currentCell = flushCell(\r\n          map,\r\n          context,\r\n          lastCell,\r\n          rowKind,\r\n          index,\r\n          currentCell\r\n        )\r\n      } else if (cell[1] !== 0) {\r\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\r\n      }\r\n\r\n      rowKind = 0\r\n    } else if (\r\n      rowKind &&\r\n      (token.type === types.data ||\r\n        token.type === 'tableDelimiterMarker' ||\r\n        token.type === 'tableDelimiterFiller')\r\n    ) {\r\n      cell[3] = index\r\n    }\r\n  }\r\n\r\n  if (lastTableEnd !== 0) {\r\n    assert(currentTable, 'expected table opening')\r\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\r\n  }\r\n\r\n  map.consume(context.events)\r\n\r\n  // To do: move this into `html`, when events are exposed there.\r\n  // That’s what `markdown-rs` does.\r\n  // That needs updates to `mdast-util-gfm-table`.\r\n  index = -1\r\n  while (++index < context.events.length) {\r\n    const event = context.events[index]\r\n    if (event[0] === 'enter' && event[1].type === 'table') {\r\n      event[1]._align = gfmTableAlign(context.events, index)\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/// Generate a cell.\r\n/**\r\n *\r\n * @param {EditMap} map\r\n * @param {TokenizeContext} context\r\n * @param {Range} range\r\n * @param {RowKind} rowKind\r\n * @param {number | undefined} rowEnd\r\n * @param {Token | undefined} previousCell\r\n * @returns {Token | undefined}\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\r\n  // `markdown-rs` uses:\r\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\r\n  const groupName =\r\n    rowKind === 1\r\n      ? 'tableHeader'\r\n      : rowKind === 2\r\n      ? 'tableDelimiter'\r\n      : 'tableData'\r\n  // `markdown-rs` uses:\r\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\r\n  const valueName = 'tableContent'\r\n\r\n  // Insert an exit for the previous cell, if there is one.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //          ^-- exit\r\n  //           ^^^^-- this cell\r\n  // ```\r\n  if (range[0] !== 0) {\r\n    assert(previousCell, 'expected previous cell enter')\r\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\r\n    map.add(range[0], 0, [['exit', previousCell, context]])\r\n  }\r\n\r\n  // Insert enter of this cell.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //           ^-- enter\r\n  //           ^^^^-- this cell\r\n  // ```\r\n  const now = getPoint(context.events, range[1])\r\n  previousCell = {\r\n    type: groupName,\r\n    start: Object.assign({}, now),\r\n    // Note: correct end is set later.\r\n    end: Object.assign({}, now)\r\n  }\r\n  map.add(range[1], 0, [['enter', previousCell, context]])\r\n\r\n  // Insert text start at first data start and end at last data end, and\r\n  // remove events between.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //            ^-- enter\r\n  //             ^-- exit\r\n  //           ^^^^-- this cell\r\n  // ```\r\n  if (range[2] !== 0) {\r\n    const relatedStart = getPoint(context.events, range[2])\r\n    const relatedEnd = getPoint(context.events, range[3])\r\n    /** @type {Token} */\r\n    const valueToken = {\r\n      type: valueName,\r\n      start: Object.assign({}, relatedStart),\r\n      end: Object.assign({}, relatedEnd)\r\n    }\r\n    map.add(range[2], 0, [['enter', valueToken, context]])\r\n    assert(range[3] !== 0)\r\n\r\n    if (rowKind !== 2) {\r\n      // Fix positional info on remaining events\r\n      const start = context.events[range[2]]\r\n      const end = context.events[range[3]]\r\n      start[1].end = Object.assign({}, end[1].end)\r\n      start[1].type = types.chunkText\r\n      start[1].contentType = constants.contentTypeText\r\n\r\n      // Remove if needed.\r\n      if (range[3] > range[2] + 1) {\r\n        const a = range[2] + 1\r\n        const b = range[3] - range[2] - 1\r\n        map.add(a, b, [])\r\n      }\r\n    }\r\n\r\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\r\n  }\r\n\r\n  // Insert an exit for the last cell, if at the row end.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //                    ^-- exit\r\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\r\n  // ```\r\n  if (rowEnd !== undefined) {\r\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\r\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\r\n    previousCell = undefined\r\n  }\r\n\r\n  return previousCell\r\n}\r\n\r\n/**\r\n * Generate table end (and table body end).\r\n *\r\n * @param {EditMap} map\r\n * @param {TokenizeContext} context\r\n * @param {number} index\r\n * @param {Token} table\r\n * @param {Token | undefined} tableBody\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction flushTableEnd(map, context, index, table, tableBody) {\r\n  /** @type {Array<Event>} */\r\n  const exits = []\r\n  const related = getPoint(context.events, index)\r\n\r\n  if (tableBody) {\r\n    tableBody.end = Object.assign({}, related)\r\n    exits.push(['exit', tableBody, context])\r\n  }\r\n\r\n  table.end = Object.assign({}, related)\r\n  exits.push(['exit', table, context])\r\n\r\n  map.add(index + 1, 0, exits)\r\n}\r\n\r\n/**\r\n * @param {Array<Event>} events\r\n * @param {number} index\r\n * @returns {readonly Point}\r\n */\r\nfunction getPoint(events, index) {\r\n  const event = events[index]\r\n  const side = event[0] === 'enter' ? 'start' : 'end'\r\n  return event[1][side]\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n * @typedef {import('micromark-util-types').Token} Token\r\n */\r\n\r\n// An opening or closing tag start, followed by a case-insensitive specific tag name,\r\n// followed by HTML whitespace, a greater than, or a slash.\r\nconst reFlow =\r\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\r\n\r\n// As HTML (text) parses tags separately (and very strictly), we don’t need to be\r\n// global.\r\nconst reText = new RegExp('^' + reFlow.source, 'i')\r\n\r\n/**\r\n * Extension for `micromark` that can be passed in `htmlExtensions`, to\r\n * support GitHub’s weird and useless tagfilter when serializing to HTML.\r\n *\r\n * @type {HtmlExtension}\r\n */\r\nexport const gfmTagfilterHtml = {\r\n  exit: {\r\n    htmlFlowData(token) {\r\n      exitHtmlData.call(this, token, reFlow)\r\n    },\r\n    htmlTextData(token) {\r\n      exitHtmlData.call(this, token, reText)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @param {Token} token\r\n * @param {RegExp} filter\r\n */\r\nfunction exitHtmlData(token, filter) {\r\n  let value = this.sliceSerialize(token)\r\n\r\n  if (this.options.allowDangerousHtml) {\r\n    value = value.replace(filter, '&lt;$1$2')\r\n  }\r\n\r\n  this.raw(this.encode(value))\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {ok as assert} from 'uvu/assert'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {\r\n  markdownLineEndingOrSpace,\r\n  markdownLineEnding,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {types} from 'micromark-util-symbol/types.js'\r\n\r\nconst tasklistCheck = {tokenize: tokenizeTasklistCheck}\r\n\r\n// To do: next major: expose function to make extension.\r\n\r\n/**\r\n * Extension for `micromark` that can be passed in `extensions`, to\r\n * enable GFM task list items syntax.\r\n *\r\n * @type {Extension}\r\n */\r\nexport const gfmTaskListItem = {\r\n  text: {[codes.leftSquareBracket]: tasklistCheck}\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTasklistCheck(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return open\r\n\r\n  /**\r\n   * At start of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n\r\n    if (\r\n      // Exit if there’s stuff before.\r\n      self.previous !== codes.eof ||\r\n      // Exit if not in the first content that is the first child of a list\r\n      // item.\r\n      !self._gfmTasklistFirstContentOfListItem\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.enter('taskListCheck')\r\n    effects.enter('taskListCheckMarker')\r\n    effects.consume(code)\r\n    effects.exit('taskListCheckMarker')\r\n    return inside\r\n  }\r\n\r\n  /**\r\n   * In task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    // Currently we match how GH works in files.\r\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\r\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\r\n    if (markdownLineEndingOrSpace(code)) {\r\n      effects.enter('taskListCheckValueUnchecked')\r\n      effects.consume(code)\r\n      effects.exit('taskListCheckValueUnchecked')\r\n      return close\r\n    }\r\n\r\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\r\n      effects.enter('taskListCheckValueChecked')\r\n      effects.consume(code)\r\n      effects.exit('taskListCheckValueChecked')\r\n      return close\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * At close of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function close(code) {\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.enter('taskListCheckMarker')\r\n      effects.consume(code)\r\n      effects.exit('taskListCheckMarker')\r\n      effects.exit('taskListCheck')\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // EOL in paragraph means there must be something else after it.\r\n    if (markdownLineEnding(code)) {\r\n      return ok(code)\r\n    }\r\n\r\n    // Space or tab?\r\n    // Check what comes after.\r\n    if (markdownSpace(code)) {\r\n      return effects.check({tokenize: spaceThenNonSpace}, ok, nok)(code)\r\n    }\r\n\r\n    // EOF, or non-whitespace, both wrong.\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction spaceThenNonSpace(effects, ok, nok) {\r\n  return factorySpace(effects, after, types.whitespace)\r\n\r\n  /**\r\n   * After whitespace, after task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // EOF means there was nothing, so bad.\r\n    // EOL means there’s content after it, so good.\r\n    // Impossible to have more spaces.\r\n    // Anything else is good.\r\n    return code === codes.eof ? nok(code) : ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\r\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n */\r\n\r\nimport {\r\n  combineExtensions,\r\n  combineHtmlExtensions\r\n} from 'micromark-util-combine-extensions'\r\nimport {\r\n  gfmAutolinkLiteral,\r\n  gfmAutolinkLiteralHtml\r\n} from 'micromark-extension-gfm-autolink-literal'\r\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\r\nimport {\r\n  gfmStrikethrough,\r\n  gfmStrikethroughHtml\r\n} from 'micromark-extension-gfm-strikethrough'\r\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\r\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\r\nimport {\r\n  gfmTaskListItem,\r\n  gfmTaskListItemHtml\r\n} from 'micromark-extension-gfm-task-list-item'\r\n\r\n/**\r\n * Create an extension for `micromark` to enable GFM syntax.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n *\r\n *   Passed to `micromark-extens-gfm-strikethrough`.\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\r\n *   syntax.\r\n */\r\nexport function gfm(options) {\r\n  return combineExtensions([\r\n    gfmAutolinkLiteral,\r\n    gfmFootnote(),\r\n    gfmStrikethrough(options),\r\n    gfmTable,\r\n    gfmTaskListItem\r\n  ])\r\n}\r\n\r\n/**\r\n * Create an extension for `micromark` to support GFM when serializing to HTML.\r\n *\r\n * @param {HtmlOptions | null | undefined} [options]\r\n *   Configuration.\r\n *\r\n *   Passed to `micromark-extens-gfm-footnote`.\r\n * @returns {HtmlExtension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GFM when serializing to HTML.\r\n */\r\nexport function gfmHtml(options) {\r\n  return combineHtmlExtensions([\r\n    gfmAutolinkLiteralHtml,\r\n    gfmFootnoteHtml(options),\r\n    gfmStrikethroughHtml,\r\n    gfmTableHtml,\r\n    gfmTagfilterHtml,\r\n    gfmTaskListItemHtml\r\n  ])\r\n}\r\n", "export default function escapeStringRegexp(string) {\r\n\tif (typeof string !== 'string') {\r\n\t\tthrow new TypeError('Expected a string');\r\n\t}\r\n\r\n\t// Escape characters with special meaning either inside or outside character sets.\r\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\r\n\treturn string\r\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\r\n\t\t.replace(/-/g, '\\\\x2d');\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n */\r\n\r\n/**\r\n * @typedef {Record<string, unknown>} Props\r\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\r\n *   Check for an arbitrary node, unaware of TypeScript inferral.\r\n *\r\n * @callback TestFunctionAnything\r\n *   Check if a node passes a test, unaware of TypeScript inferral.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean | void}\r\n *   Whether this node passes the test.\r\n */\r\n\r\n/**\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\r\n *   Check for a node that can be inferred by TypeScript.\r\n */\r\n\r\n/**\r\n * Check if a node passes a certain test.\r\n *\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @callback TestFunctionPredicate\r\n *   Complex test function for a node that can be inferred by TypeScript.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is Kind}\r\n *   Whether this node passes the test.\r\n */\r\n\r\n/**\r\n * @callback AssertAnything\r\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is a node and passes a test.\r\n */\r\n\r\n/**\r\n * Check if a node is a node and passes a certain node test.\r\n *\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @callback AssertPredicate\r\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is Kind}\r\n *   Whether this is a node and passes a test.\r\n */\r\n\r\n/**\r\n * Check if `node` is a `Node` and whether it passes the given test.\r\n *\r\n * @param node\r\n *   Thing to check, typically `Node`.\r\n * @param test\r\n *   A check for a specific node.\r\n * @param index\r\n *   The node’s position in its parent.\r\n * @param parent\r\n *   The node’s parent.\r\n * @returns\r\n *   Whether `node` is a node and passes a test.\r\n */\r\nexport const is =\r\n  /**\r\n   * @type {(\r\n   *   (() => false) &\r\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\r\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\r\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\r\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function is(node, test, index, parent, context) {\r\n      const check = convert(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!is(parent) || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      // @ts-expect-error Looks like a node.\r\n      return node && node.type && typeof node.type === 'string'\r\n        ? Boolean(check.call(context, node, index, parent))\r\n        : false\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param test\r\n *   *   when nullish, checks if `node` is a `Node`.\r\n *   *   when `string`, works like passing `(node) => node.type === test`.\r\n *   *   when `function` checks if function passed the node is true.\r\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\r\n *   *   when `array`, checks if any one of the subtests pass.\r\n * @returns\r\n *   An assertion.\r\n */\r\nexport const convert =\r\n  /**\r\n   * @type {(\r\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\r\n   *   ((test?: Test) => AssertAnything)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test} [test]\r\n     * @returns {AssertAnything}\r\n     */\r\n    function (test) {\r\n      if (test === undefined || test === null) {\r\n        return ok\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return typeFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or object as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * @param {Array<string | Props | TestFunctionAnything>} tests\r\n * @returns {AssertAnything}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<AssertAnything>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convert(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].call(this, ...parameters)) return true\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn an object into a test for a node with a certain fields.\r\n *\r\n * @param {Props} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction propsFactory(check) {\r\n  return castFactory(all)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function all(node) {\r\n    /** @type {string} */\r\n    let key\r\n\r\n    for (key in check) {\r\n      // @ts-expect-error: hush, it sure works as an index.\r\n      if (node[key] !== check[key]) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for a node with a certain type.\r\n *\r\n * @param {string} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction typeFactory(check) {\r\n  return castFactory(type)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  function type(node) {\r\n    return node && node.type === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for a node that passes that test.\r\n *\r\n * @param {TestFunctionAnything} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction castFactory(check) {\r\n  return assertion\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {unknown} node\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function assertion(node, ...parameters) {\r\n    return Boolean(\r\n      node &&\r\n        typeof node === 'object' &&\r\n        'type' in node &&\r\n        // @ts-expect-error: fine.\r\n        Boolean(check.call(this, node, ...parameters))\r\n    )\r\n  }\r\n}\r\n\r\nfunction ok() {\r\n  return true\r\n}\r\n", "/**\r\n * @param {string} d\r\n * @returns {string}\r\n */\r\nexport function color(d) {\r\n  return d\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n * @typedef {import('unist-util-is').Test} Test\r\n */\r\n\r\n/**\r\n * @typedef {boolean | 'skip'} Action\r\n *   Union of the action types.\r\n *\r\n * @typedef {number} Index\r\n *   Move to the sibling at `index` next (after node itself is completely\r\n *   traversed).\r\n *\r\n *   Useful if mutating the tree, such as removing the node the visitor is\r\n *   currently on, or any of its previous siblings.\r\n *   Results less than 0 or greater than or equal to `children.length` stop\r\n *   traversing the parent.\r\n *\r\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\r\n *   List with one or two values, the first an action, the second an index.\r\n *\r\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\r\n *   Any value that can be returned from a visitor.\r\n */\r\n\r\n/**\r\n * @template {Node} [Visited=Node]\r\n *   Visited node type.\r\n * @template {Parent} [Ancestor=Parent]\r\n *   Ancestor type.\r\n * @callback Visitor\r\n *   Handle a node (matching `test`, if given).\r\n *\r\n *   Visitors are free to transform `node`.\r\n *   They can also transform the parent of node (the last of `ancestors`).\r\n *\r\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\r\n *   descendants to be walked (which is a bug).\r\n *\r\n *   When adding or removing previous siblings of `node` (or next siblings, in\r\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\r\n *   sibling to traverse after `node` is traversed.\r\n *   Adding or removing next siblings of `node` (or previous siblings, in case\r\n *   of reverse) is handled as expected without needing to return a new `Index`.\r\n *\r\n *   Removing the children property of an ancestor still results in them being\r\n *   traversed.\r\n * @param {Visited} node\r\n *   Found node.\r\n * @param {Array<Ancestor>} ancestors\r\n *   Ancestors of `node`.\r\n * @returns {VisitorResult}\r\n *   What to do next.\r\n *\r\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\r\n *   An `Action` is treated as a tuple of `[Action]`.\r\n *\r\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\r\n *   When the `Action` is `EXIT`, that action can be returned.\r\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\r\n */\r\n\r\n/**\r\n * @template {Node} [Tree=Node]\r\n *   Tree type.\r\n * @template {Test} [Check=string]\r\n *   Test type.\r\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\r\n *   Build a typed `Visitor` function from a tree and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parents`.\r\n */\r\n\r\nimport {convert} from 'unist-util-is'\r\nimport {color} from './color.js'\r\n\r\n/**\r\n * Continue traversing as normal.\r\n */\r\nexport const CONTINUE = true\r\n\r\n/**\r\n * Stop traversing immediately.\r\n */\r\nexport const EXIT = false\r\n\r\n/**\r\n * Do not traverse this node’s children.\r\n */\r\nexport const SKIP = 'skip'\r\n\r\n/**\r\n * Visit nodes, with ancestral information.\r\n *\r\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\r\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\r\n *\r\n * You can choose for which nodes `visitor` is called by passing a `test`.\r\n * For complex tests, you should test yourself in `visitor`, as it will be\r\n * faster and will have improved type information.\r\n *\r\n * Walking the tree is an intensive task.\r\n * Make use of the return values of the visitor when possible.\r\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\r\n * to check if a node matches, and then perform different operations.\r\n *\r\n * You can change the tree.\r\n * See `Visitor` for more info.\r\n *\r\n * @param tree\r\n *   Tree to traverse.\r\n * @param test\r\n *   `unist-util-is`-compatible test\r\n * @param visitor\r\n *   Handle each node.\r\n * @param reverse\r\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\r\n * @returns\r\n *   Nothing.\r\n */\r\nexport const visitParents =\r\n  /**\r\n   * @type {(\r\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\r\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Node} tree\r\n     * @param {Test} test\r\n     * @param {Visitor<Node>} visitor\r\n     * @param {boolean | null | undefined} [reverse]\r\n     * @returns {void}\r\n     */\r\n    function (tree, test, visitor, reverse) {\r\n      if (typeof test === 'function' && typeof visitor !== 'function') {\r\n        reverse = visitor\r\n        // @ts-expect-error no visitor given, so `visitor` is test.\r\n        visitor = test\r\n        test = null\r\n      }\r\n\r\n      const is = convert(test)\r\n      const step = reverse ? -1 : 1\r\n\r\n      factory(tree, undefined, [])()\r\n\r\n      /**\r\n       * @param {Node} node\r\n       * @param {number | undefined} index\r\n       * @param {Array<Parent>} parents\r\n       */\r\n      function factory(node, index, parents) {\r\n        /** @type {Record<string, unknown>} */\r\n        // @ts-expect-error: hush\r\n        const value = node && typeof node === 'object' ? node : {}\r\n\r\n        if (typeof value.type === 'string') {\r\n          const name =\r\n            // `hast`\r\n            typeof value.tagName === 'string'\r\n              ? value.tagName\r\n              : // `xast`\r\n              typeof value.name === 'string'\r\n              ? value.name\r\n              : undefined\r\n\r\n          Object.defineProperty(visit, 'name', {\r\n            value:\r\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\r\n          })\r\n        }\r\n\r\n        return visit\r\n\r\n        function visit() {\r\n          /** @type {ActionTuple} */\r\n          let result = []\r\n          /** @type {ActionTuple} */\r\n          let subresult\r\n          /** @type {number} */\r\n          let offset\r\n          /** @type {Array<Parent>} */\r\n          let grandparents\r\n\r\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\r\n            result = toResult(visitor(node, parents))\r\n\r\n            if (result[0] === EXIT) {\r\n              return result\r\n            }\r\n          }\r\n\r\n          // @ts-expect-error looks like a parent.\r\n          if (node.children && result[0] !== SKIP) {\r\n            // @ts-expect-error looks like a parent.\r\n            offset = (reverse ? node.children.length : -1) + step\r\n            // @ts-expect-error looks like a parent.\r\n            grandparents = parents.concat(node)\r\n\r\n            // @ts-expect-error looks like a parent.\r\n            while (offset > -1 && offset < node.children.length) {\r\n              // @ts-expect-error looks like a parent.\r\n              subresult = factory(node.children[offset], offset, grandparents)()\r\n\r\n              if (subresult[0] === EXIT) {\r\n                return subresult\r\n              }\r\n\r\n              offset =\r\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\r\n            }\r\n          }\r\n\r\n          return result\r\n        }\r\n      }\r\n    }\r\n  )\r\n\r\n/**\r\n * Turn a return value into a clean result.\r\n *\r\n * @param {VisitorResult} value\r\n *   Valid return values from visitors.\r\n * @returns {ActionTuple}\r\n *   Clean result.\r\n */\r\nfunction toResult(value) {\r\n  if (Array.isArray(value)) {\r\n    return value\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    return [CONTINUE, value]\r\n  }\r\n\r\n  return [value]\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Parent} MdastParent\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n * @typedef {import('mdast').Text} Text\r\n * @typedef {import('unist-util-visit-parents').Test} Test\r\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\r\n */\r\n\r\n/**\r\n * @typedef {Content | Root} Node\r\n * @typedef {Extract<Node, MdastParent>} Parent\r\n * @typedef {Exclude<Parent, Root>} ContentParent\r\n *\r\n * @typedef RegExpMatchObject\r\n *   Info on the match.\r\n * @property {number} index\r\n *   The index of the search at which the result was found.\r\n * @property {string} input\r\n *   A copy of the search string in the text node.\r\n * @property {[Root, ...Array<ContentParent>, Text]} stack\r\n *   All ancestors of the text node, where the last node is the text itself.\r\n *\r\n * @callback ReplaceFunction\r\n *   Callback called when a search matches.\r\n * @param {...any} parameters\r\n *   The parameters are the result of corresponding search expression:\r\n *\r\n *   * `value` (`string`) — whole match\r\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\r\n *   * `match` (`RegExpMatchObject`) — info on the match\r\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\r\n *   Thing to replace with.\r\n *\r\n *   * when `null`, `undefined`, `''`, remove the match\r\n *   * …or when `false`, do not replace at all\r\n *   * …or when `string`, replace with a text node of that value\r\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\r\n *\r\n * @typedef {string | RegExp} Find\r\n *   Pattern to find.\r\n *\r\n *   Strings are escaped and then turned into global expressions.\r\n *\r\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\r\n *   Several find and replaces, in array form.\r\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\r\n *   Several find and replaces, in object form.\r\n * @typedef {[Find, Replace]} FindAndReplaceTuple\r\n *   Find and replace in tuple form.\r\n * @typedef {string | ReplaceFunction} Replace\r\n *   Thing to replace with.\r\n * @typedef {[RegExp, ReplaceFunction]} Pair\r\n *   Normalized find and replace.\r\n * @typedef {Array<Pair>} Pairs\r\n *   All find and replaced.\r\n *\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {Test | null | undefined} [ignore]\r\n *   Test for which nodes to ignore.\r\n */\r\n\r\nimport escape from 'escape-string-regexp'\r\nimport {visitParents} from 'unist-util-visit-parents'\r\nimport {convert} from 'unist-util-is'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Find patterns in a tree and replace them.\r\n *\r\n * The algorithm searches the tree in *preorder* for complete values in `Text`\r\n * nodes.\r\n * Partial matches are not supported.\r\n *\r\n * @param tree\r\n *   Tree to change.\r\n * @param find\r\n *   Patterns to find.\r\n * @param replace\r\n *   Things to replace with (when `find` is `Find`) or configuration.\r\n * @param options\r\n *   Configuration (when `find` is not `Find`).\r\n * @returns\r\n *   Given, modified, tree.\r\n */\r\n// To do: next major: remove `find` & `replace` combo, remove schema.\r\nexport const findAndReplace =\r\n  /**\r\n   * @type {(\r\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\r\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\r\n   * )}\r\n   **/\r\n  (\r\n    /**\r\n     * @template {Node} Tree\r\n     * @param {Tree} tree\r\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\r\n     * @param {Replace | Options | null | undefined} [replace]\r\n     * @param {Options | null | undefined} [options]\r\n     * @returns {Tree}\r\n     */\r\n    function (tree, find, replace, options) {\r\n      /** @type {Options | null | undefined} */\r\n      let settings\r\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\r\n      let schema\r\n\r\n      if (typeof find === 'string' || find instanceof RegExp) {\r\n        // @ts-expect-error don’t expect options twice.\r\n        schema = [[find, replace]]\r\n        settings = options\r\n      } else {\r\n        schema = find\r\n        // @ts-expect-error don’t expect replace twice.\r\n        settings = replace\r\n      }\r\n\r\n      if (!settings) {\r\n        settings = {}\r\n      }\r\n\r\n      const ignored = convert(settings.ignore || [])\r\n      const pairs = toPairs(schema)\r\n      let pairIndex = -1\r\n\r\n      while (++pairIndex < pairs.length) {\r\n        visitParents(tree, 'text', visitor)\r\n      }\r\n\r\n      // To do next major: don’t return the given tree.\r\n      return tree\r\n\r\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\r\n      function visitor(node, parents) {\r\n        let index = -1\r\n        /** @type {Parent | undefined} */\r\n        let grandparent\r\n\r\n        while (++index < parents.length) {\r\n          const parent = parents[index]\r\n\r\n          if (\r\n            ignored(\r\n              parent,\r\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\r\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\r\n              grandparent\r\n            )\r\n          ) {\r\n            return\r\n          }\r\n\r\n          grandparent = parent\r\n        }\r\n\r\n        if (grandparent) {\r\n          return handler(node, parents)\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Handle a text node which is not in an ignored parent.\r\n       *\r\n       * @param {Text} node\r\n       *   Text node.\r\n       * @param {Array<Parent>} parents\r\n       *   Parents.\r\n       * @returns {VisitorResult}\r\n       *   Result.\r\n       */\r\n      function handler(node, parents) {\r\n        const parent = parents[parents.length - 1]\r\n        const find = pairs[pairIndex][0]\r\n        const replace = pairs[pairIndex][1]\r\n        let start = 0\r\n        // @ts-expect-error: TS is wrong, some of these children can be text.\r\n        const index = parent.children.indexOf(node)\r\n        let change = false\r\n        /** @type {Array<PhrasingContent>} */\r\n        let nodes = []\r\n\r\n        find.lastIndex = 0\r\n\r\n        let match = find.exec(node.value)\r\n\r\n        while (match) {\r\n          const position = match.index\r\n          /** @type {RegExpMatchObject} */\r\n          const matchObject = {\r\n            index: match.index,\r\n            input: match.input,\r\n            // @ts-expect-error: stack is fine.\r\n            stack: [...parents, node]\r\n          }\r\n          let value = replace(...match, matchObject)\r\n\r\n          if (typeof value === 'string') {\r\n            value = value.length > 0 ? {type: 'text', value} : undefined\r\n          }\r\n\r\n          // It wasn’t a match after all.\r\n          if (value !== false) {\r\n            if (start !== position) {\r\n              nodes.push({\r\n                type: 'text',\r\n                value: node.value.slice(start, position)\r\n              })\r\n            }\r\n\r\n            if (Array.isArray(value)) {\r\n              nodes.push(...value)\r\n            } else if (value) {\r\n              nodes.push(value)\r\n            }\r\n\r\n            start = position + match[0].length\r\n            change = true\r\n          }\r\n\r\n          if (!find.global) {\r\n            break\r\n          }\r\n\r\n          match = find.exec(node.value)\r\n        }\r\n\r\n        if (change) {\r\n          if (start < node.value.length) {\r\n            nodes.push({type: 'text', value: node.value.slice(start)})\r\n          }\r\n\r\n          parent.children.splice(index, 1, ...nodes)\r\n        } else {\r\n          nodes = [node]\r\n        }\r\n\r\n        return index + nodes.length\r\n      }\r\n    }\r\n  )\r\n\r\n/**\r\n * Turn a schema into pairs.\r\n *\r\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\r\n *   Schema.\r\n * @returns {Pairs}\r\n *   Clean pairs.\r\n */\r\nfunction toPairs(schema) {\r\n  /** @type {Pairs} */\r\n  const result = []\r\n\r\n  if (typeof schema !== 'object') {\r\n    throw new TypeError('Expected array or object as schema')\r\n  }\r\n\r\n  if (Array.isArray(schema)) {\r\n    let index = -1\r\n\r\n    while (++index < schema.length) {\r\n      result.push([\r\n        toExpression(schema[index][0]),\r\n        toFunction(schema[index][1])\r\n      ])\r\n    }\r\n  } else {\r\n    /** @type {string} */\r\n    let key\r\n\r\n    for (key in schema) {\r\n      if (own.call(schema, key)) {\r\n        result.push([toExpression(key), toFunction(schema[key])])\r\n      }\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Turn a find into an expression.\r\n *\r\n * @param {Find} find\r\n *   Find.\r\n * @returns {RegExp}\r\n *   Expression.\r\n */\r\nfunction toExpression(find) {\r\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\r\n}\r\n\r\n/**\r\n * Turn a replace into a function.\r\n *\r\n * @param {Replace} replace\r\n *   Replace.\r\n * @returns {ReplaceFunction}\r\n *   Function.\r\n */\r\nfunction toFunction(replace) {\r\n  return typeof replace === 'function' ? replace : () => replace\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n *\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\r\n *\r\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n *\r\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\r\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\r\n */\r\n\r\nimport {ccount} from 'ccount'\r\nimport {findAndReplace} from 'mdast-util-find-and-replace'\r\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\r\n\r\n/** @type {ConstructName} */\r\nconst inConstruct = 'phrasing'\r\n/** @type {Array<ConstructName>} */\r\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\r\n\r\n// To do: next major: expose functions instead of extensions.\r\n\r\n/**\r\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\r\n *\r\n * @type {FromMarkdownExtension}\r\n */\r\nexport const gfmAutolinkLiteralFromMarkdown = {\r\n  transforms: [transformGfmAutolinkLiterals],\r\n  enter: {\r\n    literalAutolink: enterLiteralAutolink,\r\n    literalAutolinkEmail: enterLiteralAutolinkValue,\r\n    literalAutolinkHttp: enterLiteralAutolinkValue,\r\n    literalAutolinkWww: enterLiteralAutolinkValue\r\n  },\r\n  exit: {\r\n    literalAutolink: exitLiteralAutolink,\r\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\r\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\r\n    literalAutolinkWww: exitLiteralAutolinkWww\r\n  }\r\n}\r\n\r\n/**\r\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\r\n *\r\n * @type {ToMarkdownExtension}\r\n */\r\nexport const gfmAutolinkLiteralToMarkdown = {\r\n  unsafe: [\r\n    {\r\n      character: '@',\r\n      before: '[+\\\\-.\\\\w]',\r\n      after: '[\\\\-.\\\\w]',\r\n      inConstruct,\r\n      notInConstruct\r\n    },\r\n    {\r\n      character: '.',\r\n      before: '[Ww]',\r\n      after: '[\\\\-.\\\\w]',\r\n      inConstruct,\r\n      notInConstruct\r\n    },\r\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\r\n  ]\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterLiteralAutolink(token) {\r\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterLiteralAutolinkValue(token) {\r\n  this.config.enter.autolinkProtocol.call(this, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitLiteralAutolinkHttp(token) {\r\n  this.config.exit.autolinkProtocol.call(this, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitLiteralAutolinkWww(token) {\r\n  this.config.exit.data.call(this, token)\r\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\r\n  node.url = 'http://' + this.sliceSerialize(token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitLiteralAutolinkEmail(token) {\r\n  this.config.exit.autolinkEmail.call(this, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitLiteralAutolink(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/** @type {FromMarkdownTransform} */\r\nfunction transformGfmAutolinkLiterals(tree) {\r\n  findAndReplace(\r\n    tree,\r\n    [\r\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\r\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\r\n    ],\r\n    {ignore: ['link', 'linkReference']}\r\n  )\r\n}\r\n\r\n/**\r\n * @type {ReplaceFunction}\r\n * @param {string} _\r\n * @param {string} protocol\r\n * @param {string} domain\r\n * @param {string} path\r\n * @param {RegExpMatchObject} match\r\n * @returns {Link | Array<PhrasingContent> | false}\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction findUrl(_, protocol, domain, path, match) {\r\n  let prefix = ''\r\n\r\n  // Not an expected previous character.\r\n  if (!previous(match)) {\r\n    return false\r\n  }\r\n\r\n  // Treat `www` as part of the domain.\r\n  if (/^w/i.test(protocol)) {\r\n    domain = protocol + domain\r\n    protocol = ''\r\n    prefix = 'http://'\r\n  }\r\n\r\n  if (!isCorrectDomain(domain)) {\r\n    return false\r\n  }\r\n\r\n  const parts = splitUrl(domain + path)\r\n\r\n  if (!parts[0]) return false\r\n\r\n  /** @type {Link} */\r\n  const result = {\r\n    type: 'link',\r\n    title: null,\r\n    url: prefix + protocol + parts[0],\r\n    children: [{type: 'text', value: protocol + parts[0]}]\r\n  }\r\n\r\n  if (parts[1]) {\r\n    return [result, {type: 'text', value: parts[1]}]\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * @type {ReplaceFunction}\r\n * @param {string} _\r\n * @param {string} atext\r\n * @param {string} label\r\n * @param {RegExpMatchObject} match\r\n * @returns {Link | false}\r\n */\r\nfunction findEmail(_, atext, label, match) {\r\n  if (\r\n    // Not an expected previous character.\r\n    !previous(match, true) ||\r\n    // Label ends in not allowed character.\r\n    /[-\\d_]$/.test(label)\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  return {\r\n    type: 'link',\r\n    title: null,\r\n    url: 'mailto:' + atext + '@' + label,\r\n    children: [{type: 'text', value: atext + '@' + label}]\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} domain\r\n * @returns {boolean}\r\n */\r\nfunction isCorrectDomain(domain) {\r\n  const parts = domain.split('.')\r\n\r\n  if (\r\n    parts.length < 2 ||\r\n    (parts[parts.length - 1] &&\r\n      (/_/.test(parts[parts.length - 1]) ||\r\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\r\n    (parts[parts.length - 2] &&\r\n      (/_/.test(parts[parts.length - 2]) ||\r\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  return true\r\n}\r\n\r\n/**\r\n * @param {string} url\r\n * @returns {[string, string | undefined]}\r\n */\r\nfunction splitUrl(url) {\r\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\r\n\r\n  if (!trailExec) {\r\n    return [url, undefined]\r\n  }\r\n\r\n  url = url.slice(0, trailExec.index)\r\n\r\n  let trail = trailExec[0]\r\n  let closingParenIndex = trail.indexOf(')')\r\n  const openingParens = ccount(url, '(')\r\n  let closingParens = ccount(url, ')')\r\n\r\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\r\n    url += trail.slice(0, closingParenIndex + 1)\r\n    trail = trail.slice(closingParenIndex + 1)\r\n    closingParenIndex = trail.indexOf(')')\r\n    closingParens++\r\n  }\r\n\r\n  return [url, trail]\r\n}\r\n\r\n/**\r\n * @param {RegExpMatchObject} match\r\n * @param {boolean | null | undefined} [email=false]\r\n * @returns {boolean}\r\n */\r\nfunction previous(match, email) {\r\n  const code = match.input.charCodeAt(match.index - 1)\r\n\r\n  return (\r\n    (match.index === 0 ||\r\n      unicodeWhitespace(code) ||\r\n      unicodePunctuation(code)) &&\r\n    (!email || code !== 47)\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\r\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Map} Map\r\n */\r\n\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\r\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\r\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\r\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\r\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\r\n\r\nfootnoteReference.peek = footnoteReferencePeek\r\n\r\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\r\n// utilities on `state`.\r\n\r\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\r\n * in markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-from-markdown`.\r\n */\r\nexport function gfmFootnoteFromMarkdown() {\r\n  return {\r\n    enter: {\r\n      gfmFootnoteDefinition: enterFootnoteDefinition,\r\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\r\n      gfmFootnoteCall: enterFootnoteCall,\r\n      gfmFootnoteCallString: enterFootnoteCallString\r\n    },\r\n    exit: {\r\n      gfmFootnoteDefinition: exitFootnoteDefinition,\r\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\r\n      gfmFootnoteCall: exitFootnoteCall,\r\n      gfmFootnoteCallString: exitFootnoteCallString\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\r\n * in markdown.\r\n *\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown`.\r\n */\r\nexport function gfmFootnoteToMarkdown() {\r\n  return {\r\n    // This is on by default already.\r\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\r\n    handlers: {footnoteDefinition, footnoteReference}\r\n  }\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteDefinition(token) {\r\n  this.enter(\r\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\r\n    token\r\n  )\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteDefinitionLabelString() {\r\n  this.buffer()\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteDefinitionLabelString(token) {\r\n  const label = this.resume()\r\n  const node = /** @type {FootnoteDefinition} */ (\r\n    this.stack[this.stack.length - 1]\r\n  )\r\n  node.label = label\r\n  node.identifier = normalizeIdentifier(\r\n    this.sliceSerialize(token)\r\n  ).toLowerCase()\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteDefinition(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteCall(token) {\r\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteCallString() {\r\n  this.buffer()\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteCallString(token) {\r\n  const label = this.resume()\r\n  const node = /** @type {FootnoteDefinition} */ (\r\n    this.stack[this.stack.length - 1]\r\n  )\r\n  node.label = label\r\n  node.identifier = normalizeIdentifier(\r\n    this.sliceSerialize(token)\r\n  ).toLowerCase()\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteCall(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {FootnoteReference} node\r\n */\r\nfunction footnoteReference(node, _, context, safeOptions) {\r\n  const tracker = track(safeOptions)\r\n  let value = tracker.move('[^')\r\n  const exit = context.enter('footnoteReference')\r\n  const subexit = context.enter('reference')\r\n  value += tracker.move(\r\n    safe(context, association(node), {\r\n      ...tracker.current(),\r\n      before: value,\r\n      after: ']'\r\n    })\r\n  )\r\n  subexit()\r\n  exit()\r\n  value += tracker.move(']')\r\n  return value\r\n}\r\n\r\n/** @type {ToMarkdownHandle} */\r\nfunction footnoteReferencePeek() {\r\n  return '['\r\n}\r\n\r\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {FootnoteDefinition} node\r\n */\r\nfunction footnoteDefinition(node, _, context, safeOptions) {\r\n  const tracker = track(safeOptions)\r\n  let value = tracker.move('[^')\r\n  const exit = context.enter('footnoteDefinition')\r\n  const subexit = context.enter('label')\r\n  value += tracker.move(\r\n    safe(context, association(node), {\r\n      ...tracker.current(),\r\n      before: value,\r\n      after: ']'\r\n    })\r\n  )\r\n  subexit()\r\n  value += tracker.move(\r\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\r\n  )\r\n  tracker.shift(4)\r\n  value += tracker.move(\r\n    indentLines(containerFlow(node, context, tracker.current()), map)\r\n  )\r\n  exit()\r\n\r\n  return value\r\n}\r\n\r\n/** @type {Map} */\r\nfunction map(line, index, blank) {\r\n  if (index === 0) {\r\n    return line\r\n  }\r\n\r\n  return (blank ? '' : '    ') + line\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Delete} Delete\r\n *\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n *\r\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n */\r\n\r\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\r\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\r\n\r\n// To do: next major: expose functions.\r\n// To do: next major: use `state`, state utilities.\r\n\r\n/**\r\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\r\n * contain strikethrough.\r\n * So they sort of cancel each other out.\r\n * Note: could use a better name.\r\n *\r\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\r\n *\r\n * @type {Array<ConstructName>}\r\n */\r\nconst constructsWithoutStrikethrough = [\r\n  'autolink',\r\n  'destinationLiteral',\r\n  'destinationRaw',\r\n  'reference',\r\n  'titleQuote',\r\n  'titleApostrophe'\r\n]\r\n\r\nhandleDelete.peek = peekDelete\r\n\r\n/**\r\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\r\n *\r\n * @type {FromMarkdownExtension}\r\n */\r\nexport const gfmStrikethroughFromMarkdown = {\r\n  canContainEols: ['delete'],\r\n  enter: {strikethrough: enterStrikethrough},\r\n  exit: {strikethrough: exitStrikethrough}\r\n}\r\n\r\n/**\r\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\r\n *\r\n * @type {ToMarkdownExtension}\r\n */\r\nexport const gfmStrikethroughToMarkdown = {\r\n  unsafe: [\r\n    {\r\n      character: '~',\r\n      inConstruct: 'phrasing',\r\n      notInConstruct: constructsWithoutStrikethrough\r\n    }\r\n  ],\r\n  handlers: {delete: handleDelete}\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterStrikethrough(token) {\r\n  this.enter({type: 'delete', children: []}, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitStrikethrough(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {Delete} node\r\n */\r\nfunction handleDelete(node, _, context, safeOptions) {\r\n  const tracker = track(safeOptions)\r\n  const exit = context.enter('strikethrough')\r\n  let value = tracker.move('~~')\r\n  value += containerPhrasing(node, context, {\r\n    ...tracker.current(),\r\n    before: value,\r\n    after: '~'\r\n  })\r\n  value += tracker.move('~~')\r\n  exit()\r\n  return value\r\n}\r\n\r\n/** @type {ToMarkdownHandle} */\r\nfunction peekDelete() {\r\n  return '~'\r\n}\r\n", "// To do: next major: remove.\r\n/**\r\n * @typedef {Options} MarkdownTableOptions\r\n *   Configuration.\r\n */\r\n\r\n/**\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {boolean | null | undefined} [alignDelimiters=true]\r\n *   Whether to align the delimiters (default: `true`);\r\n *   they are aligned by default:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B     |\r\n *   | ----- | ----- |\r\n *   | C     | Delta |\r\n *   ```\r\n *\r\n *   Pass `false` to make them staggered:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B |\r\n *   | - | - |\r\n *   | C | Delta |\r\n *   ```\r\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\r\n *   How to align columns (default: `''`);\r\n *   one style for all columns or styles for their respective columns;\r\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\r\n *   other values are treated as `''`, which doesn’t place the colon in the\r\n *   alignment row but does align left;\r\n *   *only the lowercased first character is used, so `Right` is fine.*\r\n * @property {boolean | null | undefined} [delimiterEnd=true]\r\n *   Whether to end each row with the delimiter (default: `true`).\r\n *\r\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\r\n *   > that aren’t understandable to some markdown parsers.\r\n *\r\n *   When `true`, there are ending delimiters:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B     |\r\n *   | ----- | ----- |\r\n *   | C     | Delta |\r\n *   ```\r\n *\r\n *   When `false`, there are no ending delimiters:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B\r\n *   | ----- | -----\r\n *   | C     | Delta\r\n *   ```\r\n * @property {boolean | null | undefined} [delimiterStart=true]\r\n *   Whether to begin each row with the delimiter (default: `true`).\r\n *\r\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\r\n *   > that aren’t understandable to some markdown parsers.\r\n *\r\n *   When `true`, there are starting delimiters:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B     |\r\n *   | ----- | ----- |\r\n *   | C     | Delta |\r\n *   ```\r\n *\r\n *   When `false`, there are no starting delimiters:\r\n *\r\n *   ```markdown\r\n *   Alpha | B     |\r\n *   ----- | ----- |\r\n *   C     | Delta |\r\n *   ```\r\n * @property {boolean | null | undefined} [padding=true]\r\n *   Whether to add a space of padding between delimiters and cells\r\n *   (default: `true`).\r\n *\r\n *   When `true`, there is padding:\r\n *\r\n *   ```markdown\r\n *   | Alpha | B     |\r\n *   | ----- | ----- |\r\n *   | C     | Delta |\r\n *   ```\r\n *\r\n *   When `false`, there is no padding:\r\n *\r\n *   ```markdown\r\n *   |Alpha|B    |\r\n *   |-----|-----|\r\n *   |C    |Delta|\r\n *   ```\r\n * @property {((value: string) => number) | null | undefined} [stringLength]\r\n *   Function to detect the length of table cell content (optional);\r\n *   this is used when aligning the delimiters (`|`) between table cells;\r\n *   full-width characters and emoji mess up delimiter alignment when viewing\r\n *   the markdown source;\r\n *   to fix this, you can pass this function,\r\n *   which receives the cell content and returns its “visible” size;\r\n *   note that what is and isn’t visible depends on where the text is displayed.\r\n *\r\n *   Without such a function, the following:\r\n *\r\n *   ```js\r\n *   markdownTable([\r\n *     ['Alpha', 'Bravo'],\r\n *     ['中文', 'Charlie'],\r\n *     ['👩‍❤️‍👩', 'Delta']\r\n *   ])\r\n *   ```\r\n *\r\n *   Yields:\r\n *\r\n *   ```markdown\r\n *   | Alpha | Bravo |\r\n *   | - | - |\r\n *   | 中文 | Charlie |\r\n *   | 👩‍❤️‍👩 | Delta |\r\n *   ```\r\n *\r\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\r\n *\r\n *   ```js\r\n *   import stringWidth from 'string-width'\r\n *\r\n *   markdownTable(\r\n *     [\r\n *       ['Alpha', 'Bravo'],\r\n *       ['中文', 'Charlie'],\r\n *       ['👩‍❤️‍👩', 'Delta']\r\n *     ],\r\n *     {stringLength: stringWidth}\r\n *   )\r\n *   ```\r\n *\r\n *   Yields:\r\n *\r\n *   ```markdown\r\n *   | Alpha | Bravo   |\r\n *   | ----- | ------- |\r\n *   | 中文  | Charlie |\r\n *   | 👩‍❤️‍👩    | Delta   |\r\n *   ```\r\n */\r\n\r\n/**\r\n * @param {string} value\r\n *   Cell value.\r\n * @returns {number}\r\n *   Cell size.\r\n */\r\nfunction defaultStringLength(value) {\r\n  return value.length\r\n}\r\n\r\n/**\r\n * Generate a markdown\r\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\r\n * table.\r\n *\r\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\r\n *   Table data (matrix of strings).\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {string}\r\n *   Result.\r\n */\r\nexport function markdownTable(table, options) {\r\n  const settings = options || {}\r\n  // To do: next major: change to spread.\r\n  const align = (settings.align || []).concat()\r\n  const stringLength = settings.stringLength || defaultStringLength\r\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\r\n  const alignments = []\r\n  /** @type {Array<Array<string>>} Cells per row. */\r\n  const cellMatrix = []\r\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\r\n  const sizeMatrix = []\r\n  /** @type {Array<number>} */\r\n  const longestCellByColumn = []\r\n  let mostCellsPerRow = 0\r\n  let rowIndex = -1\r\n\r\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\r\n  // do superfluous work when aligning, so optimize for aligning.\r\n  while (++rowIndex < table.length) {\r\n    /** @type {Array<string>} */\r\n    const row = []\r\n    /** @type {Array<number>} */\r\n    const sizes = []\r\n    let columnIndex = -1\r\n\r\n    if (table[rowIndex].length > mostCellsPerRow) {\r\n      mostCellsPerRow = table[rowIndex].length\r\n    }\r\n\r\n    while (++columnIndex < table[rowIndex].length) {\r\n      const cell = serialize(table[rowIndex][columnIndex])\r\n\r\n      if (settings.alignDelimiters !== false) {\r\n        const size = stringLength(cell)\r\n        sizes[columnIndex] = size\r\n\r\n        if (\r\n          longestCellByColumn[columnIndex] === undefined ||\r\n          size > longestCellByColumn[columnIndex]\r\n        ) {\r\n          longestCellByColumn[columnIndex] = size\r\n        }\r\n      }\r\n\r\n      row.push(cell)\r\n    }\r\n\r\n    cellMatrix[rowIndex] = row\r\n    sizeMatrix[rowIndex] = sizes\r\n  }\r\n\r\n  // Figure out which alignments to use.\r\n  let columnIndex = -1\r\n\r\n  if (typeof align === 'object' && 'length' in align) {\r\n    while (++columnIndex < mostCellsPerRow) {\r\n      alignments[columnIndex] = toAlignment(align[columnIndex])\r\n    }\r\n  } else {\r\n    const code = toAlignment(align)\r\n\r\n    while (++columnIndex < mostCellsPerRow) {\r\n      alignments[columnIndex] = code\r\n    }\r\n  }\r\n\r\n  // Inject the alignment row.\r\n  columnIndex = -1\r\n  /** @type {Array<string>} */\r\n  const row = []\r\n  /** @type {Array<number>} */\r\n  const sizes = []\r\n\r\n  while (++columnIndex < mostCellsPerRow) {\r\n    const code = alignments[columnIndex]\r\n    let before = ''\r\n    let after = ''\r\n\r\n    if (code === 99 /* `c` */) {\r\n      before = ':'\r\n      after = ':'\r\n    } else if (code === 108 /* `l` */) {\r\n      before = ':'\r\n    } else if (code === 114 /* `r` */) {\r\n      after = ':'\r\n    }\r\n\r\n    // There *must* be at least one hyphen-minus in each alignment cell.\r\n    let size =\r\n      settings.alignDelimiters === false\r\n        ? 1\r\n        : Math.max(\r\n            1,\r\n            longestCellByColumn[columnIndex] - before.length - after.length\r\n          )\r\n\r\n    const cell = before + '-'.repeat(size) + after\r\n\r\n    if (settings.alignDelimiters !== false) {\r\n      size = before.length + size + after.length\r\n\r\n      if (size > longestCellByColumn[columnIndex]) {\r\n        longestCellByColumn[columnIndex] = size\r\n      }\r\n\r\n      sizes[columnIndex] = size\r\n    }\r\n\r\n    row[columnIndex] = cell\r\n  }\r\n\r\n  // Inject the alignment row.\r\n  cellMatrix.splice(1, 0, row)\r\n  sizeMatrix.splice(1, 0, sizes)\r\n\r\n  rowIndex = -1\r\n  /** @type {Array<string>} */\r\n  const lines = []\r\n\r\n  while (++rowIndex < cellMatrix.length) {\r\n    const row = cellMatrix[rowIndex]\r\n    const sizes = sizeMatrix[rowIndex]\r\n    columnIndex = -1\r\n    /** @type {Array<string>} */\r\n    const line = []\r\n\r\n    while (++columnIndex < mostCellsPerRow) {\r\n      const cell = row[columnIndex] || ''\r\n      let before = ''\r\n      let after = ''\r\n\r\n      if (settings.alignDelimiters !== false) {\r\n        const size =\r\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\r\n        const code = alignments[columnIndex]\r\n\r\n        if (code === 114 /* `r` */) {\r\n          before = ' '.repeat(size)\r\n        } else if (code === 99 /* `c` */) {\r\n          if (size % 2) {\r\n            before = ' '.repeat(size / 2 + 0.5)\r\n            after = ' '.repeat(size / 2 - 0.5)\r\n          } else {\r\n            before = ' '.repeat(size / 2)\r\n            after = before\r\n          }\r\n        } else {\r\n          after = ' '.repeat(size)\r\n        }\r\n      }\r\n\r\n      if (settings.delimiterStart !== false && !columnIndex) {\r\n        line.push('|')\r\n      }\r\n\r\n      if (\r\n        settings.padding !== false &&\r\n        // Don’t add the opening space if we’re not aligning and the cell is\r\n        // empty: there will be a closing space.\r\n        !(settings.alignDelimiters === false && cell === '') &&\r\n        (settings.delimiterStart !== false || columnIndex)\r\n      ) {\r\n        line.push(' ')\r\n      }\r\n\r\n      if (settings.alignDelimiters !== false) {\r\n        line.push(before)\r\n      }\r\n\r\n      line.push(cell)\r\n\r\n      if (settings.alignDelimiters !== false) {\r\n        line.push(after)\r\n      }\r\n\r\n      if (settings.padding !== false) {\r\n        line.push(' ')\r\n      }\r\n\r\n      if (\r\n        settings.delimiterEnd !== false ||\r\n        columnIndex !== mostCellsPerRow - 1\r\n      ) {\r\n        line.push('|')\r\n      }\r\n    }\r\n\r\n    lines.push(\r\n      settings.delimiterEnd === false\r\n        ? line.join('').replace(/ +$/, '')\r\n        : line.join('')\r\n    )\r\n  }\r\n\r\n  return lines.join('\\n')\r\n}\r\n\r\n/**\r\n * @param {string | null | undefined} [value]\r\n *   Value to serialize.\r\n * @returns {string}\r\n *   Result.\r\n */\r\nfunction serialize(value) {\r\n  return value === null || value === undefined ? '' : String(value)\r\n}\r\n\r\n/**\r\n * @param {string | null | undefined} value\r\n *   Value.\r\n * @returns {number}\r\n *   Alignment.\r\n */\r\nfunction toAlignment(value) {\r\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\r\n\r\n  return code === 67 /* `C` */ || code === 99 /* `c` */\r\n    ? 99 /* `c` */\r\n    : code === 76 /* `L` */ || code === 108 /* `l` */\r\n      ? 108 /* `l` */\r\n      : code === 82 /* `R` */ || code === 114 /* `r` */\r\n        ? 114 /* `r` */\r\n        : 0\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Table} Table\r\n * @typedef {import('mdast').TableRow} TableRow\r\n * @typedef {import('mdast').TableCell} TableCell\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n *\r\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\r\n *\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n *\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\r\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\r\n */\r\n\r\n/**\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {boolean | null | undefined} [tableCellPadding=true]\r\n *   Whether to add a space of padding between delimiters and cells.\r\n * @property {boolean | null | undefined} [tablePipeAlign=true]\r\n *   Whether to align the delimiters.\r\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\r\n *   Function to detect the length of table cell content, used when aligning\r\n *   the delimiters between cells\r\n */\r\n\r\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\r\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\r\nimport {markdownTable} from 'markdown-table'\r\n\r\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\r\n// To do: next major: use `defaultHandlers.inlineCode`.\r\n// To do: next major: expose functions.\r\n\r\n/**\r\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\r\n *\r\n * @type {FromMarkdownExtension}\r\n */\r\nexport const gfmTableFromMarkdown = {\r\n  enter: {\r\n    table: enterTable,\r\n    tableData: enterCell,\r\n    tableHeader: enterCell,\r\n    tableRow: enterRow\r\n  },\r\n  exit: {\r\n    codeText: exitCodeText,\r\n    table: exitTable,\r\n    tableData: exit,\r\n    tableHeader: exit,\r\n    tableRow: exit\r\n  }\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterTable(token) {\r\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\r\n  // @ts-expect-error: `align` is custom.\r\n  const align = token._align\r\n  this.enter(\r\n    {\r\n      type: 'table',\r\n      align: align.map((d) => (d === 'none' ? null : d)),\r\n      children: []\r\n    },\r\n    token\r\n  )\r\n  this.setData('inTable', true)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitTable(token) {\r\n  this.exit(token)\r\n  this.setData('inTable')\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterRow(token) {\r\n  this.enter({type: 'tableRow', children: []}, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exit(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterCell(token) {\r\n  this.enter({type: 'tableCell', children: []}, token)\r\n}\r\n\r\n// Overwrite the default code text data handler to unescape escaped pipes when\r\n// they are in tables.\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitCodeText(token) {\r\n  let value = this.resume()\r\n\r\n  if (this.getData('inTable')) {\r\n    value = value.replace(/\\\\([\\\\|])/g, replace)\r\n  }\r\n\r\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\r\n  node.value = value\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n * @param {string} $1\r\n * @returns {string}\r\n */\r\nfunction replace($0, $1) {\r\n  // Pipes work, backslashes don’t (but can’t escape pipes).\r\n  return $1 === '|' ? $1 : $0\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\r\n * markdown.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\r\n */\r\nexport function gfmTableToMarkdown(options) {\r\n  const settings = options || {}\r\n  const padding = settings.tableCellPadding\r\n  const alignDelimiters = settings.tablePipeAlign\r\n  const stringLength = settings.stringLength\r\n  const around = padding ? ' ' : '|'\r\n\r\n  return {\r\n    unsafe: [\r\n      {character: '\\r', inConstruct: 'tableCell'},\r\n      {character: '\\n', inConstruct: 'tableCell'},\r\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\r\n      // (unpadded delimiter row), could result in a table.\r\n      {atBreak: true, character: '|', after: '[\\t :-]'},\r\n      // A pipe in a cell must be encoded.\r\n      {character: '|', inConstruct: 'tableCell'},\r\n      // A colon must be followed by a dash, in which case it could start a\r\n      // delimiter row.\r\n      {atBreak: true, character: ':', after: '-'},\r\n      // A delimiter row can also start with a dash, when followed by more\r\n      // dashes, a colon, or a pipe.\r\n      // This is a stricter version than the built in check for lists, thematic\r\n      // breaks, and setex heading underlines though:\r\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\r\n      {atBreak: true, character: '-', after: '[:|-]'}\r\n    ],\r\n    handlers: {\r\n      table: handleTable,\r\n      tableRow: handleTableRow,\r\n      tableCell: handleTableCell,\r\n      inlineCode: inlineCodeWithTable\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {Table} node\r\n   */\r\n  function handleTable(node, _, context, safeOptions) {\r\n    return serializeData(\r\n      handleTableAsData(node, context, safeOptions),\r\n      node.align\r\n    )\r\n  }\r\n\r\n  /**\r\n   * This function isn’t really used normally, because we handle rows at the\r\n   * table level.\r\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\r\n   *\r\n   * @type {ToMarkdownHandle}\r\n   * @param {TableRow} node\r\n   */\r\n  function handleTableRow(node, _, context, safeOptions) {\r\n    const row = handleTableRowAsData(node, context, safeOptions)\r\n    const value = serializeData([row])\r\n    // `markdown-table` will always add an align row\r\n    return value.slice(0, value.indexOf('\\n'))\r\n  }\r\n\r\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {TableCell} node\r\n   */\r\n  function handleTableCell(node, _, context, safeOptions) {\r\n    const exit = context.enter('tableCell')\r\n    const subexit = context.enter('phrasing')\r\n    const value = containerPhrasing(node, context, {\r\n      ...safeOptions,\r\n      before: around,\r\n      after: around\r\n    })\r\n    subexit()\r\n    exit()\r\n    return value\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Array<string>>} matrix\r\n   * @param {Array<string | null | undefined> | null | undefined} [align]\r\n   */\r\n  function serializeData(matrix, align) {\r\n    return markdownTable(matrix, {\r\n      align,\r\n      // @ts-expect-error: `markdown-table` types should support `null`.\r\n      alignDelimiters,\r\n      // @ts-expect-error: `markdown-table` types should support `null`.\r\n      padding,\r\n      // @ts-expect-error: `markdown-table` types should support `null`.\r\n      stringLength\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @param {Table} node\r\n   * @param {ToMarkdownContext} context\r\n   * @param {SafeOptions} safeOptions\r\n   */\r\n  function handleTableAsData(node, context, safeOptions) {\r\n    const children = node.children\r\n    let index = -1\r\n    /** @type {Array<Array<string>>} */\r\n    const result = []\r\n    const subexit = context.enter('table')\r\n\r\n    while (++index < children.length) {\r\n      result[index] = handleTableRowAsData(\r\n        children[index],\r\n        context,\r\n        safeOptions\r\n      )\r\n    }\r\n\r\n    subexit()\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * @param {TableRow} node\r\n   * @param {ToMarkdownContext} context\r\n   * @param {SafeOptions} safeOptions\r\n   */\r\n  function handleTableRowAsData(node, context, safeOptions) {\r\n    const children = node.children\r\n    let index = -1\r\n    /** @type {Array<string>} */\r\n    const result = []\r\n    const subexit = context.enter('tableRow')\r\n\r\n    while (++index < children.length) {\r\n      // Note: the positional info as used here is incorrect.\r\n      // Making it correct would be impossible due to aligning cells?\r\n      // And it would need copy/pasting `markdown-table` into this project.\r\n      result[index] = handleTableCell(\r\n        children[index],\r\n        node,\r\n        context,\r\n        safeOptions\r\n      )\r\n    }\r\n\r\n    subexit()\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {InlineCode} node\r\n   */\r\n  function inlineCodeWithTable(node, parent, context) {\r\n    let value = inlineCode(node, parent, context)\r\n\r\n    if (context.stack.includes('tableCell')) {\r\n      value = value.replace(/\\|/g, '\\\\$&')\r\n    }\r\n\r\n    return value\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('mdast').Parent} Parent\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n */\r\n\r\n/**\r\n * @typedef {Extract<Root | Content, Parent>} Parents\r\n */\r\n\r\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\r\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\r\n\r\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\r\n// `track` from `state`.\r\n// To do: next major: replace exports with functions.\r\n// To do: next major: use `defaulthandlers.listItem`.\r\n\r\n/**\r\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\r\n *\r\n * @type {FromMarkdownExtension}\r\n */\r\nexport const gfmTaskListItemFromMarkdown = {\r\n  exit: {\r\n    taskListCheckValueChecked: exitCheck,\r\n    taskListCheckValueUnchecked: exitCheck,\r\n    paragraph: exitParagraphWithTaskListItem\r\n  }\r\n}\r\n\r\n/**\r\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\r\n *\r\n * @type {ToMarkdownExtension}\r\n */\r\nexport const gfmTaskListItemToMarkdown = {\r\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\r\n  handlers: {listItem: listItemWithTaskListItem}\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitCheck(token) {\r\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\r\n  // We’re always in a paragraph, in a list item.\r\n  node.checked = token.type === 'taskListCheckValueChecked'\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitParagraphWithTaskListItem(token) {\r\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\r\n\r\n  if (\r\n    parent &&\r\n    parent.type === 'listItem' &&\r\n    typeof parent.checked === 'boolean'\r\n  ) {\r\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\r\n    const head = node.children[0]\r\n\r\n    if (head && head.type === 'text') {\r\n      const siblings = parent.children\r\n      let index = -1\r\n      /** @type {Paragraph | undefined} */\r\n      let firstParaghraph\r\n\r\n      while (++index < siblings.length) {\r\n        const sibling = siblings[index]\r\n        if (sibling.type === 'paragraph') {\r\n          firstParaghraph = sibling\r\n          break\r\n        }\r\n      }\r\n\r\n      if (firstParaghraph === node) {\r\n        // Must start with a space or a tab.\r\n        head.value = head.value.slice(1)\r\n\r\n        if (head.value.length === 0) {\r\n          node.children.shift()\r\n        } else if (\r\n          node.position &&\r\n          head.position &&\r\n          typeof head.position.start.offset === 'number'\r\n        ) {\r\n          head.position.start.column++\r\n          head.position.start.offset++\r\n          node.position.start = Object.assign({}, head.position.start)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {ListItem} node\r\n */\r\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\r\n  const head = node.children[0]\r\n  const checkable =\r\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\r\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\r\n  const tracker = track(safeOptions)\r\n\r\n  if (checkable) {\r\n    tracker.move(checkbox)\r\n  }\r\n\r\n  let value = listItem(node, parent, context, {\r\n    ...safeOptions,\r\n    ...tracker.current()\r\n  })\r\n\r\n  if (checkable) {\r\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\r\n  }\r\n\r\n  return value\r\n\r\n  /**\r\n   * @param {string} $0\r\n   * @returns {string}\r\n   */\r\n  function check($0) {\r\n    return $0 + checkbox\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n */\r\n\r\n/**\r\n * @typedef {import('mdast-util-gfm-table').Options} Options\r\n *   Configuration.\r\n */\r\n\r\nimport {\r\n  gfmAutolinkLiteralFromMarkdown,\r\n  gfmAutolinkLiteralToMarkdown\r\n} from 'mdast-util-gfm-autolink-literal'\r\nimport {\r\n  gfmFootnoteFromMarkdown,\r\n  gfmFootnoteToMarkdown\r\n} from 'mdast-util-gfm-footnote'\r\nimport {\r\n  gfmStrikethroughFromMarkdown,\r\n  gfmStrikethroughToMarkdown\r\n} from 'mdast-util-gfm-strikethrough'\r\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\r\nimport {\r\n  gfmTaskListItemFromMarkdown,\r\n  gfmTaskListItemToMarkdown\r\n} from 'mdast-util-gfm-task-list-item'\r\n\r\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\r\n * literals, footnotes, strikethrough, tables, tasklists).\r\n *\r\n * @returns {Array<FromMarkdownExtension>}\r\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\r\n *   footnotes, strikethrough, tables, tasklists).\r\n */\r\nexport function gfmFromMarkdown() {\r\n  return [\r\n    gfmAutolinkLiteralFromMarkdown,\r\n    gfmFootnoteFromMarkdown(),\r\n    gfmStrikethroughFromMarkdown,\r\n    gfmTableFromMarkdown,\r\n    gfmTaskListItemFromMarkdown\r\n  ]\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\r\n * literals, footnotes, strikethrough, tables, tasklists).\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\r\n *   footnotes, strikethrough, tables, tasklists).\r\n */\r\nexport function gfmToMarkdown(options) {\r\n  return {\r\n    extensions: [\r\n      gfmAutolinkLiteralToMarkdown,\r\n      gfmFootnoteToMarkdown(),\r\n      gfmStrikethroughToMarkdown,\r\n      gfmTableToMarkdown(options),\r\n      gfmTaskListItemToMarkdown\r\n    ]\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\r\n */\r\n\r\nimport {gfm} from 'micromark-extension-gfm'\r\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\r\n\r\n/**\r\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\r\n *\r\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\r\n */\r\nexport default function remarkGfm(options = {}) {\r\n  const data = this.data()\r\n\r\n  add('micromarkExtensions', gfm(options))\r\n  add('fromMarkdownExtensions', gfmFromMarkdown())\r\n  add('toMarkdownExtensions', gfmToMarkdown(options))\r\n\r\n  /**\r\n   * @param {string} field\r\n   * @param {unknown} value\r\n   */\r\n  function add(field, value) {\r\n    const list = /** @type {unknown[]} */ (\r\n      // Other extensions\r\n      /* c8 ignore next 2 */\r\n      data[field] ? data[field] : (data[field] = [])\r\n    )\r\n\r\n    list.push(value)\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ok", "code", "trail", "ok", "code", "text", "ok", "previous", "code", "ok", "code", "map", "ok", "code", "ok", "index", "is", "own", "replace", "find", "domain", "path", "trail", "code", "exit", "exit", "row", "sizes", "columnIndex", "code", "exit"]
}
