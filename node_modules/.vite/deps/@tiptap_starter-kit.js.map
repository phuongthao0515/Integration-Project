{
  "version": 3,
  "sources": ["../../@tiptap/extension-blockquote/src/blockquote.ts", "../../@tiptap/extension-bold/src/bold.ts", "../../@tiptap/extension-code/src/code.ts", "../../@tiptap/extension-document/src/document.ts", "../../prosemirror-dropcursor/dist/index.js", "../../@tiptap/extension-dropcursor/src/dropcursor.ts", "../../prosemirror-gapcursor/dist/index.js", "../../@tiptap/extension-gapcursor/src/gapcursor.ts", "../../@tiptap/extension-hard-break/src/hard-break.ts", "../../rope-sequence/dist/index.js", "../../prosemirror-history/dist/index.js", "../../@tiptap/extension-history/src/history.ts", "../../@tiptap/extension-horizontal-rule/src/horizontal-rule.ts", "../../@tiptap/extension-italic/src/italic.ts", "../../@tiptap/extension-list-item/src/list-item.ts", "../../@tiptap/extension-ordered-list/src/ordered-list.ts", "../../@tiptap/extension-paragraph/src/paragraph.ts", "../../@tiptap/extension-strike/src/strike.ts", "../../@tiptap/extension-text/src/text.ts", "../../@tiptap/starter-kit/src/starter-kit.ts"],
  "sourcesContent": ["import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nexport interface BlockquoteOptions {\n  /**\n   * HTML attributes to add to the blockquote element\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blockQuote: {\n      /**\n       * Set a blockquote node\n       */\n      setBlockquote: () => ReturnType,\n      /**\n       * Toggle a blockquote node\n       */\n      toggleBlockquote: () => ReturnType,\n      /**\n       * Unset a blockquote node\n       */\n      unsetBlockquote: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Matches a blockquote to a `>` as input.\n */\nexport const inputRegex = /^\\s*>\\s$/\n\n/**\n * This extension allows you to create blockquotes.\n * @see https://tiptap.dev/api/nodes/blockquote\n */\nexport const Blockquote = Node.create<BlockquoteOptions>({\n\n  name: 'blockquote',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'block+',\n\n  group: 'block',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      { tag: 'blockquote' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['blockquote', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBlockquote: () => ({ commands }) => {\n        return commands.wrapIn(this.name)\n      },\n      toggleBlockquote: () => ({ commands }) => {\n        return commands.toggleWrap(this.name)\n      },\n      unsetBlockquote: () => ({ commands }) => {\n        return commands.lift(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-b': () => this.editor.commands.toggleBlockquote(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n", "import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface BoldOptions {\n  /**\n   * HTML attributes to add to the bold element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bold: {\n      /**\n       * Set a bold mark\n       */\n      setBold: () => ReturnType,\n      /**\n       * Toggle a bold mark\n       */\n      toggleBold: () => ReturnType,\n      /**\n       * Unset a bold mark\n       */\n      unsetBold: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Matches bold text via `**` as input.\n */\nexport const starInputRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))$/\n\n/**\n * Matches bold text via `**` while pasting.\n */\nexport const starPasteRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))/g\n\n/**\n * Matches bold text via `__` as input.\n */\nexport const underscoreInputRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))$/\n\n/**\n * Matches bold text via `__` while pasting.\n */\nexport const underscorePasteRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))/g\n\n/**\n * This extension allows you to mark text as bold.\n * @see https://tiptap.dev/api/marks/bold\n */\nexport const Bold = Mark.create<BoldOptions>({\n  name: 'bold',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'strong',\n      },\n      {\n        tag: 'b',\n        getAttrs: node => (node as HTMLElement).style.fontWeight !== 'normal' && null,\n      },\n      {\n        style: 'font-weight=400',\n        clearMark: mark => mark.type.name === this.name,\n      },\n      {\n        style: 'font-weight',\n        getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value as string) && null,\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBold: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleBold: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetBold: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-b': () => this.editor.commands.toggleBold(),\n      'Mod-B': () => this.editor.commands.toggleBold(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n", "import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface CodeOptions {\n  /**\n   * The HTML attributes applied to the code element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    code: {\n      /**\n       * Set a code mark\n       */\n      setCode: () => ReturnType,\n      /**\n       * Toggle inline code\n       */\n      toggleCode: () => ReturnType,\n      /**\n       * Unset a code mark\n       */\n      unsetCode: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Regular expressions to match inline code blocks enclosed in backticks.\n *  It matches:\n *     - An opening backtick, followed by\n *     - Any text that doesn't include a backtick (captured for marking), followed by\n *     - A closing backtick.\n *  This ensures that any text between backticks is formatted as code,\n *  regardless of the surrounding characters (exception being another backtick).\n */\nexport const inputRegex = /(?<!`)`([^`]+)`(?!`)/\n\n/**\n * Matches inline code while pasting.\n */\nexport const pasteRegex = /(?<!`)`([^`]+)`(?!`)/g\n\n/**\n * This extension allows you to mark text as inline code.\n * @see https://tiptap.dev/api/marks/code\n */\nexport const Code = Mark.create<CodeOptions>({\n  name: 'code',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  excludes: '_',\n\n  code: true,\n\n  exitable: true,\n\n  parseHTML() {\n    return [\n      { tag: 'code' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setCode: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleCode: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetCode: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-e': () => this.editor.commands.toggleCode(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n", "import { Node } from '@tiptap/core'\n\n/**\n * The default document node which represents the top level node of the editor.\n * @see https://tiptap.dev/api/nodes/document\n */\nexport const Document = Node.create({\n  name: 'doc',\n  topNode: true,\n  content: 'block+',\n})\n", "import { Plugin } from 'prosemirror-state';\r\nimport { dropPoint } from 'prosemirror-transform';\r\n\r\n/**\r\nCreate a plugin that, when added to a ProseMirror instance,\r\ncauses a decoration to show up at the drop position when something\r\nis dragged over the editor.\r\n\r\nNodes may add a `disableDropCursor` property to their spec to\r\ncontrol the showing of a drop cursor inside them. This may be a\r\nboolean or a function, which will be called with a view and a\r\nposition, and should return a boolean.\r\n*/\r\nfunction dropCursor(options = {}) {\r\n    return new Plugin({\r\n        view(editorView) { return new DropCursorView(editorView, options); }\r\n    });\r\n}\r\nclass DropCursorView {\r\n    constructor(editorView, options) {\r\n        var _a;\r\n        this.editorView = editorView;\r\n        this.cursorPos = null;\r\n        this.element = null;\r\n        this.timeout = -1;\r\n        this.width = (_a = options.width) !== null && _a !== void 0 ? _a : 1;\r\n        this.color = options.color === false ? undefined : (options.color || \"black\");\r\n        this.class = options.class;\r\n        this.handlers = [\"dragover\", \"dragend\", \"drop\", \"dragleave\"].map(name => {\r\n            let handler = (e) => { this[name](e); };\r\n            editorView.dom.addEventListener(name, handler);\r\n            return { name, handler };\r\n        });\r\n    }\r\n    destroy() {\r\n        this.handlers.forEach(({ name, handler }) => this.editorView.dom.removeEventListener(name, handler));\r\n    }\r\n    update(editorView, prevState) {\r\n        if (this.cursorPos != null && prevState.doc != editorView.state.doc) {\r\n            if (this.cursorPos > editorView.state.doc.content.size)\r\n                this.setCursor(null);\r\n            else\r\n                this.updateOverlay();\r\n        }\r\n    }\r\n    setCursor(pos) {\r\n        if (pos == this.cursorPos)\r\n            return;\r\n        this.cursorPos = pos;\r\n        if (pos == null) {\r\n            this.element.parentNode.removeChild(this.element);\r\n            this.element = null;\r\n        }\r\n        else {\r\n            this.updateOverlay();\r\n        }\r\n    }\r\n    updateOverlay() {\r\n        let $pos = this.editorView.state.doc.resolve(this.cursorPos);\r\n        let isBlock = !$pos.parent.inlineContent, rect;\r\n        if (isBlock) {\r\n            let before = $pos.nodeBefore, after = $pos.nodeAfter;\r\n            if (before || after) {\r\n                let node = this.editorView.nodeDOM(this.cursorPos - (before ? before.nodeSize : 0));\r\n                if (node) {\r\n                    let nodeRect = node.getBoundingClientRect();\r\n                    let top = before ? nodeRect.bottom : nodeRect.top;\r\n                    if (before && after)\r\n                        top = (top + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2;\r\n                    rect = { left: nodeRect.left, right: nodeRect.right, top: top - this.width / 2, bottom: top + this.width / 2 };\r\n                }\r\n            }\r\n        }\r\n        if (!rect) {\r\n            let coords = this.editorView.coordsAtPos(this.cursorPos);\r\n            rect = { left: coords.left - this.width / 2, right: coords.left + this.width / 2, top: coords.top, bottom: coords.bottom };\r\n        }\r\n        let parent = this.editorView.dom.offsetParent;\r\n        if (!this.element) {\r\n            this.element = parent.appendChild(document.createElement(\"div\"));\r\n            if (this.class)\r\n                this.element.className = this.class;\r\n            this.element.style.cssText = \"position: absolute; z-index: 50; pointer-events: none;\";\r\n            if (this.color) {\r\n                this.element.style.backgroundColor = this.color;\r\n            }\r\n        }\r\n        this.element.classList.toggle(\"prosemirror-dropcursor-block\", isBlock);\r\n        this.element.classList.toggle(\"prosemirror-dropcursor-inline\", !isBlock);\r\n        let parentLeft, parentTop;\r\n        if (!parent || parent == document.body && getComputedStyle(parent).position == \"static\") {\r\n            parentLeft = -pageXOffset;\r\n            parentTop = -pageYOffset;\r\n        }\r\n        else {\r\n            let rect = parent.getBoundingClientRect();\r\n            parentLeft = rect.left - parent.scrollLeft;\r\n            parentTop = rect.top - parent.scrollTop;\r\n        }\r\n        this.element.style.left = (rect.left - parentLeft) + \"px\";\r\n        this.element.style.top = (rect.top - parentTop) + \"px\";\r\n        this.element.style.width = (rect.right - rect.left) + \"px\";\r\n        this.element.style.height = (rect.bottom - rect.top) + \"px\";\r\n    }\r\n    scheduleRemoval(timeout) {\r\n        clearTimeout(this.timeout);\r\n        this.timeout = setTimeout(() => this.setCursor(null), timeout);\r\n    }\r\n    dragover(event) {\r\n        if (!this.editorView.editable)\r\n            return;\r\n        let pos = this.editorView.posAtCoords({ left: event.clientX, top: event.clientY });\r\n        let node = pos && pos.inside >= 0 && this.editorView.state.doc.nodeAt(pos.inside);\r\n        let disableDropCursor = node && node.type.spec.disableDropCursor;\r\n        let disabled = typeof disableDropCursor == \"function\" ? disableDropCursor(this.editorView, pos, event) : disableDropCursor;\r\n        if (pos && !disabled) {\r\n            let target = pos.pos;\r\n            if (this.editorView.dragging && this.editorView.dragging.slice) {\r\n                let point = dropPoint(this.editorView.state.doc, target, this.editorView.dragging.slice);\r\n                if (point != null)\r\n                    target = point;\r\n            }\r\n            this.setCursor(target);\r\n            this.scheduleRemoval(5000);\r\n        }\r\n    }\r\n    dragend() {\r\n        this.scheduleRemoval(20);\r\n    }\r\n    drop() {\r\n        this.scheduleRemoval(20);\r\n    }\r\n    dragleave(event) {\r\n        if (event.target == this.editorView.dom || !this.editorView.dom.contains(event.relatedTarget))\r\n            this.setCursor(null);\r\n    }\r\n}\r\n\r\nexport { dropCursor };\r\n", "import { Extension } from '@tiptap/core'\nimport { dropCursor } from '@tiptap/pm/dropcursor'\n\nexport interface DropcursorOptions {\n  /**\n   * The color of the drop cursor\n   * @default 'currentColor'\n   * @example 'red'\n   */\n  color: string | undefined,\n\n  /**\n   * The width of the drop cursor\n   * @default 1\n   * @example 2\n  */\n  width: number | undefined,\n\n  /**\n   * The class of the drop cursor\n   * @default undefined\n   * @example 'drop-cursor'\n  */\n  class: string | undefined,\n}\n\n/**\n * This extension allows you to add a drop cursor to your editor.\n * A drop cursor is a line that appears when you drag and drop content\n * inbetween nodes.\n * @see https://tiptap.dev/api/extensions/dropcursor\n */\nexport const Dropcursor = Extension.create<DropcursorOptions>({\n  name: 'dropCursor',\n\n  addOptions() {\n    return {\n      color: 'currentColor',\n      width: 1,\n      class: undefined,\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      dropCursor(this.options),\n    ]\n  },\n})\n", "import { keydownHandler } from 'prosemirror-keymap';\r\nimport { Selection, NodeSelection, TextSelection, Plugin } from 'prosemirror-state';\r\nimport { Slice, Fragment } from 'prosemirror-model';\r\nimport { DecorationSet, Decoration } from 'prosemirror-view';\r\n\r\n/**\r\nGap cursor selections are represented using this class. Its\r\n`$anchor` and `$head` properties both point at the cursor position.\r\n*/\r\nclass GapCursor extends Selection {\r\n    /**\r\n    Create a gap cursor.\r\n    */\r\n    constructor($pos) {\r\n        super($pos, $pos);\r\n    }\r\n    map(doc, mapping) {\r\n        let $pos = doc.resolve(mapping.map(this.head));\r\n        return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);\r\n    }\r\n    content() { return Slice.empty; }\r\n    eq(other) {\r\n        return other instanceof GapCursor && other.head == this.head;\r\n    }\r\n    toJSON() {\r\n        return { type: \"gapcursor\", pos: this.head };\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static fromJSON(doc, json) {\r\n        if (typeof json.pos != \"number\")\r\n            throw new RangeError(\"Invalid input for GapCursor.fromJSON\");\r\n        return new GapCursor(doc.resolve(json.pos));\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    getBookmark() { return new GapBookmark(this.anchor); }\r\n    /**\r\n    @internal\r\n    */\r\n    static valid($pos) {\r\n        let parent = $pos.parent;\r\n        if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos))\r\n            return false;\r\n        let override = parent.type.spec.allowGapCursor;\r\n        if (override != null)\r\n            return override;\r\n        let deflt = parent.contentMatchAt($pos.index()).defaultType;\r\n        return deflt && deflt.isTextblock;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static findGapCursorFrom($pos, dir, mustMove = false) {\r\n        search: for (;;) {\r\n            if (!mustMove && GapCursor.valid($pos))\r\n                return $pos;\r\n            let pos = $pos.pos, next = null;\r\n            // Scan up from this position\r\n            for (let d = $pos.depth;; d--) {\r\n                let parent = $pos.node(d);\r\n                if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {\r\n                    next = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);\r\n                    break;\r\n                }\r\n                else if (d == 0) {\r\n                    return null;\r\n                }\r\n                pos += dir;\r\n                let $cur = $pos.doc.resolve(pos);\r\n                if (GapCursor.valid($cur))\r\n                    return $cur;\r\n            }\r\n            // And then down into the next node\r\n            for (;;) {\r\n                let inside = dir > 0 ? next.firstChild : next.lastChild;\r\n                if (!inside) {\r\n                    if (next.isAtom && !next.isText && !NodeSelection.isSelectable(next)) {\r\n                        $pos = $pos.doc.resolve(pos + next.nodeSize * dir);\r\n                        mustMove = false;\r\n                        continue search;\r\n                    }\r\n                    break;\r\n                }\r\n                next = inside;\r\n                pos += dir;\r\n                let $cur = $pos.doc.resolve(pos);\r\n                if (GapCursor.valid($cur))\r\n                    return $cur;\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n}\r\nGapCursor.prototype.visible = false;\r\nGapCursor.findFrom = GapCursor.findGapCursorFrom;\r\nSelection.jsonID(\"gapcursor\", GapCursor);\r\nclass GapBookmark {\r\n    constructor(pos) {\r\n        this.pos = pos;\r\n    }\r\n    map(mapping) {\r\n        return new GapBookmark(mapping.map(this.pos));\r\n    }\r\n    resolve(doc) {\r\n        let $pos = doc.resolve(this.pos);\r\n        return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);\r\n    }\r\n}\r\nfunction closedBefore($pos) {\r\n    for (let d = $pos.depth; d >= 0; d--) {\r\n        let index = $pos.index(d), parent = $pos.node(d);\r\n        // At the start of this parent, look at next one\r\n        if (index == 0) {\r\n            if (parent.type.spec.isolating)\r\n                return true;\r\n            continue;\r\n        }\r\n        // See if the node before (or its first ancestor) is closed\r\n        for (let before = parent.child(index - 1);; before = before.lastChild) {\r\n            if ((before.childCount == 0 && !before.inlineContent) || before.isAtom || before.type.spec.isolating)\r\n                return true;\r\n            if (before.inlineContent)\r\n                return false;\r\n        }\r\n    }\r\n    // Hit start of document\r\n    return true;\r\n}\r\nfunction closedAfter($pos) {\r\n    for (let d = $pos.depth; d >= 0; d--) {\r\n        let index = $pos.indexAfter(d), parent = $pos.node(d);\r\n        if (index == parent.childCount) {\r\n            if (parent.type.spec.isolating)\r\n                return true;\r\n            continue;\r\n        }\r\n        for (let after = parent.child(index);; after = after.firstChild) {\r\n            if ((after.childCount == 0 && !after.inlineContent) || after.isAtom || after.type.spec.isolating)\r\n                return true;\r\n            if (after.inlineContent)\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\nCreate a gap cursor plugin. When enabled, this will capture clicks\r\nnear and arrow-key-motion past places that don't have a normally\r\nselectable position nearby, and create a gap cursor selection for\r\nthem. The cursor is drawn as an element with class\r\n`ProseMirror-gapcursor`. You can either include\r\n`style/gapcursor.css` from the package's directory or add your own\r\nstyles to make it visible.\r\n*/\r\nfunction gapCursor() {\r\n    return new Plugin({\r\n        props: {\r\n            decorations: drawGapCursor,\r\n            createSelectionBetween(_view, $anchor, $head) {\r\n                return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;\r\n            },\r\n            handleClick,\r\n            handleKeyDown,\r\n            handleDOMEvents: { beforeinput: beforeinput }\r\n        }\r\n    });\r\n}\r\nconst handleKeyDown = keydownHandler({\r\n    \"ArrowLeft\": arrow(\"horiz\", -1),\r\n    \"ArrowRight\": arrow(\"horiz\", 1),\r\n    \"ArrowUp\": arrow(\"vert\", -1),\r\n    \"ArrowDown\": arrow(\"vert\", 1)\r\n});\r\nfunction arrow(axis, dir) {\r\n    const dirStr = axis == \"vert\" ? (dir > 0 ? \"down\" : \"up\") : (dir > 0 ? \"right\" : \"left\");\r\n    return function (state, dispatch, view) {\r\n        let sel = state.selection;\r\n        let $start = dir > 0 ? sel.$to : sel.$from, mustMove = sel.empty;\r\n        if (sel instanceof TextSelection) {\r\n            if (!view.endOfTextblock(dirStr) || $start.depth == 0)\r\n                return false;\r\n            mustMove = false;\r\n            $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());\r\n        }\r\n        let $found = GapCursor.findGapCursorFrom($start, dir, mustMove);\r\n        if (!$found)\r\n            return false;\r\n        if (dispatch)\r\n            dispatch(state.tr.setSelection(new GapCursor($found)));\r\n        return true;\r\n    };\r\n}\r\nfunction handleClick(view, pos, event) {\r\n    if (!view || !view.editable)\r\n        return false;\r\n    let $pos = view.state.doc.resolve(pos);\r\n    if (!GapCursor.valid($pos))\r\n        return false;\r\n    let clickPos = view.posAtCoords({ left: event.clientX, top: event.clientY });\r\n    if (clickPos && clickPos.inside > -1 && NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside)))\r\n        return false;\r\n    view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));\r\n    return true;\r\n}\r\n// This is a hack that, when a composition starts while a gap cursor\r\n// is active, quickly creates an inline context for the composition to\r\n// happen in, to avoid it being aborted by the DOM selection being\r\n// moved into a valid position.\r\nfunction beforeinput(view, event) {\r\n    if (event.inputType != \"insertCompositionText\" || !(view.state.selection instanceof GapCursor))\r\n        return false;\r\n    let { $from } = view.state.selection;\r\n    let insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);\r\n    if (!insert)\r\n        return false;\r\n    let frag = Fragment.empty;\r\n    for (let i = insert.length - 1; i >= 0; i--)\r\n        frag = Fragment.from(insert[i].createAndFill(null, frag));\r\n    let tr = view.state.tr.replace($from.pos, $from.pos, new Slice(frag, 0, 0));\r\n    tr.setSelection(TextSelection.near(tr.doc.resolve($from.pos + 1)));\r\n    view.dispatch(tr);\r\n    return false;\r\n}\r\nfunction drawGapCursor(state) {\r\n    if (!(state.selection instanceof GapCursor))\r\n        return null;\r\n    let node = document.createElement(\"div\");\r\n    node.className = \"ProseMirror-gapcursor\";\r\n    return DecorationSet.create(state.doc, [Decoration.widget(state.selection.head, node, { key: \"gapcursor\" })]);\r\n}\r\n\r\nexport { GapCursor, gapCursor };\r\n", "import {\n  callOrReturn,\n  Extension,\n  getExtensionField,\n  ParentConfig,\n} from '@tiptap/core'\nimport { gapCursor } from '@tiptap/pm/gapcursor'\n\ndeclare module '@tiptap/core' {\n  interface NodeConfig<Options, Storage> {\n    /**\n     * A function to determine whether the gap cursor is allowed at the current position. Must return `true` or `false`.\n     * @default null\n     */\n    allowGapCursor?:\n      | boolean\n      | null\n      | ((this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options>>['allowGapCursor'],\n      }) => boolean | null),\n  }\n}\n\n/**\n * This extension allows you to add a gap cursor to your editor.\n * A gap cursor is a cursor that appears when you click on a place\n * where no content is present, for example inbetween nodes.\n * @see https://tiptap.dev/api/extensions/gapcursor\n */\nexport const Gapcursor = Extension.create({\n  name: 'gapCursor',\n\n  addProseMirrorPlugins() {\n    return [\n      gapCursor(),\n    ]\n  },\n\n  extendNodeSchema(extension) {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    return {\n      allowGapCursor: callOrReturn(getExtensionField(extension, 'allowGapCursor', context)) ?? null,\n    }\n  },\n})\n", "import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface HardBreakOptions {\n  /**\n   * Controls if marks should be kept after being split by a hard break.\n   * @default true\n   * @example false\n   */\n  keepMarks: boolean,\n\n  /**\n   * HTML attributes to add to the hard break element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    hardBreak: {\n      /**\n       * Add a hard break\n       * @example editor.commands.setHardBreak()\n       */\n      setHardBreak: () => ReturnType,\n    }\n  }\n}\n\n/**\n * This extension allows you to insert hard breaks.\n * @see https://www.tiptap.dev/api/nodes/hard-break\n */\nexport const HardBreak = Node.create<HardBreakOptions>({\n  name: 'hardBreak',\n\n  addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline: true,\n\n  group: 'inline',\n\n  selectable: false,\n\n  linebreakReplacement: true,\n\n  parseHTML() {\n    return [\n      { tag: 'br' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  renderText() {\n    return '\\n'\n  },\n\n  addCommands() {\n    return {\n      setHardBreak: () => ({\n        commands,\n        chain,\n        state,\n        editor,\n      }) => {\n        return commands.first([\n          () => commands.exitCode(),\n          () => commands.command(() => {\n            const { selection, storedMarks } = state\n\n            if (selection.$from.parent.type.spec.isolating) {\n              return false\n            }\n\n            const { keepMarks } = this.options\n            const { splittableMarks } = editor.extensionManager\n            const marks = storedMarks\n              || (selection.$to.parentOffset && selection.$from.marks())\n\n            return chain()\n              .insertContent({ type: this.name })\n              .command(({ tr, dispatch }) => {\n                if (dispatch && marks && keepMarks) {\n                  const filteredMarks = marks\n                    .filter(mark => splittableMarks.includes(mark.type.name))\n\n                  tr.ensureMarks(filteredMarks)\n                }\n\n                return true\n              })\n              .run()\n          }),\n        ])\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Enter': () => this.editor.commands.setHardBreak(),\n      'Shift-Enter': () => this.editor.commands.setHardBreak(),\n    }\n  },\n})\n", "var GOOD_LEAF_SIZE = 200;\r\n\r\n// :: class<T> A rope sequence is a persistent sequence data structure\r\n// that supports appending, prepending, and slicing without doing a\r\n// full copy. It is represented as a mostly-balanced tree.\r\nvar RopeSequence = function RopeSequence () {};\r\n\r\nRopeSequence.prototype.append = function append (other) {\r\n  if (!other.length) { return this }\r\n  other = RopeSequence.from(other);\r\n\r\n  return (!this.length && other) ||\r\n    (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||\r\n    (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||\r\n    this.appendInner(other)\r\n};\r\n\r\n// :: (union<[T], RopeSequence<T>>) → RopeSequence<T>\r\n// Prepend an array or other rope to this one, returning a new rope.\r\nRopeSequence.prototype.prepend = function prepend (other) {\r\n  if (!other.length) { return this }\r\n  return RopeSequence.from(other).append(this)\r\n};\r\n\r\nRopeSequence.prototype.appendInner = function appendInner (other) {\r\n  return new Append(this, other)\r\n};\r\n\r\n// :: (?number, ?number) → RopeSequence<T>\r\n// Create a rope repesenting a sub-sequence of this rope.\r\nRopeSequence.prototype.slice = function slice (from, to) {\r\n    if ( from === void 0 ) from = 0;\r\n    if ( to === void 0 ) to = this.length;\r\n\r\n  if (from >= to) { return RopeSequence.empty }\r\n  return this.sliceInner(Math.max(0, from), Math.min(this.length, to))\r\n};\r\n\r\n// :: (number) → T\r\n// Retrieve the element at the given position from this rope.\r\nRopeSequence.prototype.get = function get (i) {\r\n  if (i < 0 || i >= this.length) { return undefined }\r\n  return this.getInner(i)\r\n};\r\n\r\n// :: ((element: T, index: number) → ?bool, ?number, ?number)\r\n// Call the given function for each element between the given\r\n// indices. This tends to be more efficient than looping over the\r\n// indices and calling `get`, because it doesn't have to descend the\r\n// tree for every element.\r\nRopeSequence.prototype.forEach = function forEach (f, from, to) {\r\n    if ( from === void 0 ) from = 0;\r\n    if ( to === void 0 ) to = this.length;\r\n\r\n  if (from <= to)\r\n    { this.forEachInner(f, from, to, 0); }\r\n  else\r\n    { this.forEachInvertedInner(f, from, to, 0); }\r\n};\r\n\r\n// :: ((element: T, index: number) → U, ?number, ?number) → [U]\r\n// Map the given functions over the elements of the rope, producing\r\n// a flat array.\r\nRopeSequence.prototype.map = function map (f, from, to) {\r\n    if ( from === void 0 ) from = 0;\r\n    if ( to === void 0 ) to = this.length;\r\n\r\n  var result = [];\r\n  this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);\r\n  return result\r\n};\r\n\r\n// :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>\r\n// Create a rope representing the given array, or return the rope\r\n// itself if a rope was given.\r\nRopeSequence.from = function from (values) {\r\n  if (values instanceof RopeSequence) { return values }\r\n  return values && values.length ? new Leaf(values) : RopeSequence.empty\r\n};\r\n\r\nvar Leaf = /*@__PURE__*/(function (RopeSequence) {\r\n  function Leaf(values) {\r\n    RopeSequence.call(this);\r\n    this.values = values;\r\n  }\r\n\r\n  if ( RopeSequence ) Leaf.__proto__ = RopeSequence;\r\n  Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );\r\n  Leaf.prototype.constructor = Leaf;\r\n\r\n  var prototypeAccessors = { length: { configurable: true },depth: { configurable: true } };\r\n\r\n  Leaf.prototype.flatten = function flatten () {\r\n    return this.values\r\n  };\r\n\r\n  Leaf.prototype.sliceInner = function sliceInner (from, to) {\r\n    if (from == 0 && to == this.length) { return this }\r\n    return new Leaf(this.values.slice(from, to))\r\n  };\r\n\r\n  Leaf.prototype.getInner = function getInner (i) {\r\n    return this.values[i]\r\n  };\r\n\r\n  Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {\r\n    for (var i = from; i < to; i++)\r\n      { if (f(this.values[i], start + i) === false) { return false } }\r\n  };\r\n\r\n  Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\r\n    for (var i = from - 1; i >= to; i--)\r\n      { if (f(this.values[i], start + i) === false) { return false } }\r\n  };\r\n\r\n  Leaf.prototype.leafAppend = function leafAppend (other) {\r\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\r\n      { return new Leaf(this.values.concat(other.flatten())) }\r\n  };\r\n\r\n  Leaf.prototype.leafPrepend = function leafPrepend (other) {\r\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\r\n      { return new Leaf(other.flatten().concat(this.values)) }\r\n  };\r\n\r\n  prototypeAccessors.length.get = function () { return this.values.length };\r\n\r\n  prototypeAccessors.depth.get = function () { return 0 };\r\n\r\n  Object.defineProperties( Leaf.prototype, prototypeAccessors );\r\n\r\n  return Leaf;\r\n}(RopeSequence));\r\n\r\n// :: RopeSequence\r\n// The empty rope sequence.\r\nRopeSequence.empty = new Leaf([]);\r\n\r\nvar Append = /*@__PURE__*/(function (RopeSequence) {\r\n  function Append(left, right) {\r\n    RopeSequence.call(this);\r\n    this.left = left;\r\n    this.right = right;\r\n    this.length = left.length + right.length;\r\n    this.depth = Math.max(left.depth, right.depth) + 1;\r\n  }\r\n\r\n  if ( RopeSequence ) Append.__proto__ = RopeSequence;\r\n  Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );\r\n  Append.prototype.constructor = Append;\r\n\r\n  Append.prototype.flatten = function flatten () {\r\n    return this.left.flatten().concat(this.right.flatten())\r\n  };\r\n\r\n  Append.prototype.getInner = function getInner (i) {\r\n    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)\r\n  };\r\n\r\n  Append.prototype.forEachInner = function forEachInner (f, from, to, start) {\r\n    var leftLen = this.left.length;\r\n    if (from < leftLen &&\r\n        this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)\r\n      { return false }\r\n    if (to > leftLen &&\r\n        this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)\r\n      { return false }\r\n  };\r\n\r\n  Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\r\n    var leftLen = this.left.length;\r\n    if (from > leftLen &&\r\n        this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)\r\n      { return false }\r\n    if (to < leftLen &&\r\n        this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)\r\n      { return false }\r\n  };\r\n\r\n  Append.prototype.sliceInner = function sliceInner (from, to) {\r\n    if (from == 0 && to == this.length) { return this }\r\n    var leftLen = this.left.length;\r\n    if (to <= leftLen) { return this.left.slice(from, to) }\r\n    if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }\r\n    return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))\r\n  };\r\n\r\n  Append.prototype.leafAppend = function leafAppend (other) {\r\n    var inner = this.right.leafAppend(other);\r\n    if (inner) { return new Append(this.left, inner) }\r\n  };\r\n\r\n  Append.prototype.leafPrepend = function leafPrepend (other) {\r\n    var inner = this.left.leafPrepend(other);\r\n    if (inner) { return new Append(inner, this.right) }\r\n  };\r\n\r\n  Append.prototype.appendInner = function appendInner (other) {\r\n    if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)\r\n      { return new Append(this.left, new Append(this.right, other)) }\r\n    return new Append(this, other)\r\n  };\r\n\r\n  return Append;\r\n}(RopeSequence));\r\n\r\nexport default RopeSequence;\r\n", "import RopeSequence from 'rope-sequence';\r\nimport { Mapping } from 'prosemirror-transform';\r\nimport { PluginKey, Plugin } from 'prosemirror-state';\r\n\r\n// ProseMirror's history isn't simply a way to roll back to a previous\r\n// state, because ProseMirror supports applying changes without adding\r\n// them to the history (for example during collaboration).\r\n//\r\n// To this end, each 'Branch' (one for the undo history and one for\r\n// the redo history) keeps an array of 'Items', which can optionally\r\n// hold a step (an actual undoable change), and always hold a position\r\n// map (which is needed to move changes below them to apply to the\r\n// current document).\r\n//\r\n// An item that has both a step and a selection bookmark is the start\r\n// of an 'event' — a group of changes that will be undone or redone at\r\n// once. (It stores only the bookmark, since that way we don't have to\r\n// provide a document until the selection is actually applied, which\r\n// is useful when compressing.)\r\n// Used to schedule history compression\r\nconst max_empty_items = 500;\r\nclass Branch {\r\n    constructor(items, eventCount) {\r\n        this.items = items;\r\n        this.eventCount = eventCount;\r\n    }\r\n    // Pop the latest event off the branch's history and apply it\r\n    // to a document transform.\r\n    popEvent(state, preserveItems) {\r\n        if (this.eventCount == 0)\r\n            return null;\r\n        let end = this.items.length;\r\n        for (;; end--) {\r\n            let next = this.items.get(end - 1);\r\n            if (next.selection) {\r\n                --end;\r\n                break;\r\n            }\r\n        }\r\n        let remap, mapFrom;\r\n        if (preserveItems) {\r\n            remap = this.remapping(end, this.items.length);\r\n            mapFrom = remap.maps.length;\r\n        }\r\n        let transform = state.tr;\r\n        let selection, remaining;\r\n        let addAfter = [], addBefore = [];\r\n        this.items.forEach((item, i) => {\r\n            if (!item.step) {\r\n                if (!remap) {\r\n                    remap = this.remapping(end, i + 1);\r\n                    mapFrom = remap.maps.length;\r\n                }\r\n                mapFrom--;\r\n                addBefore.push(item);\r\n                return;\r\n            }\r\n            if (remap) {\r\n                addBefore.push(new Item(item.map));\r\n                let step = item.step.map(remap.slice(mapFrom)), map;\r\n                if (step && transform.maybeStep(step).doc) {\r\n                    map = transform.mapping.maps[transform.mapping.maps.length - 1];\r\n                    addAfter.push(new Item(map, undefined, undefined, addAfter.length + addBefore.length));\r\n                }\r\n                mapFrom--;\r\n                if (map)\r\n                    remap.appendMap(map, mapFrom);\r\n            }\r\n            else {\r\n                transform.maybeStep(item.step);\r\n            }\r\n            if (item.selection) {\r\n                selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;\r\n                remaining = new Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);\r\n                return false;\r\n            }\r\n        }, this.items.length, 0);\r\n        return { remaining: remaining, transform, selection: selection };\r\n    }\r\n    // Create a new branch with the given transform added.\r\n    addTransform(transform, selection, histOptions, preserveItems) {\r\n        let newItems = [], eventCount = this.eventCount;\r\n        let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;\r\n        for (let i = 0; i < transform.steps.length; i++) {\r\n            let step = transform.steps[i].invert(transform.docs[i]);\r\n            let item = new Item(transform.mapping.maps[i], step, selection), merged;\r\n            if (merged = lastItem && lastItem.merge(item)) {\r\n                item = merged;\r\n                if (i)\r\n                    newItems.pop();\r\n                else\r\n                    oldItems = oldItems.slice(0, oldItems.length - 1);\r\n            }\r\n            newItems.push(item);\r\n            if (selection) {\r\n                eventCount++;\r\n                selection = undefined;\r\n            }\r\n            if (!preserveItems)\r\n                lastItem = item;\r\n        }\r\n        let overflow = eventCount - histOptions.depth;\r\n        if (overflow > DEPTH_OVERFLOW) {\r\n            oldItems = cutOffEvents(oldItems, overflow);\r\n            eventCount -= overflow;\r\n        }\r\n        return new Branch(oldItems.append(newItems), eventCount);\r\n    }\r\n    remapping(from, to) {\r\n        let maps = new Mapping;\r\n        this.items.forEach((item, i) => {\r\n            let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from\r\n                ? maps.maps.length - item.mirrorOffset : undefined;\r\n            maps.appendMap(item.map, mirrorPos);\r\n        }, from, to);\r\n        return maps;\r\n    }\r\n    addMaps(array) {\r\n        if (this.eventCount == 0)\r\n            return this;\r\n        return new Branch(this.items.append(array.map(map => new Item(map))), this.eventCount);\r\n    }\r\n    // When the collab module receives remote changes, the history has\r\n    // to know about those, so that it can adjust the steps that were\r\n    // rebased on top of the remote changes, and include the position\r\n    // maps for the remote changes in its array of items.\r\n    rebased(rebasedTransform, rebasedCount) {\r\n        if (!this.eventCount)\r\n            return this;\r\n        let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);\r\n        let mapping = rebasedTransform.mapping;\r\n        let newUntil = rebasedTransform.steps.length;\r\n        let eventCount = this.eventCount;\r\n        this.items.forEach(item => { if (item.selection)\r\n            eventCount--; }, start);\r\n        let iRebased = rebasedCount;\r\n        this.items.forEach(item => {\r\n            let pos = mapping.getMirror(--iRebased);\r\n            if (pos == null)\r\n                return;\r\n            newUntil = Math.min(newUntil, pos);\r\n            let map = mapping.maps[pos];\r\n            if (item.step) {\r\n                let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);\r\n                let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));\r\n                if (selection)\r\n                    eventCount++;\r\n                rebasedItems.push(new Item(map, step, selection));\r\n            }\r\n            else {\r\n                rebasedItems.push(new Item(map));\r\n            }\r\n        }, start);\r\n        let newMaps = [];\r\n        for (let i = rebasedCount; i < newUntil; i++)\r\n            newMaps.push(new Item(mapping.maps[i]));\r\n        let items = this.items.slice(0, start).append(newMaps).append(rebasedItems);\r\n        let branch = new Branch(items, eventCount);\r\n        if (branch.emptyItemCount() > max_empty_items)\r\n            branch = branch.compress(this.items.length - rebasedItems.length);\r\n        return branch;\r\n    }\r\n    emptyItemCount() {\r\n        let count = 0;\r\n        this.items.forEach(item => { if (!item.step)\r\n            count++; });\r\n        return count;\r\n    }\r\n    // Compressing a branch means rewriting it to push the air (map-only\r\n    // items) out. During collaboration, these naturally accumulate\r\n    // because each remote change adds one. The `upto` argument is used\r\n    // to ensure that only the items below a given level are compressed,\r\n    // because `rebased` relies on a clean, untouched set of items in\r\n    // order to associate old items with rebased steps.\r\n    compress(upto = this.items.length) {\r\n        let remap = this.remapping(0, upto), mapFrom = remap.maps.length;\r\n        let items = [], events = 0;\r\n        this.items.forEach((item, i) => {\r\n            if (i >= upto) {\r\n                items.push(item);\r\n                if (item.selection)\r\n                    events++;\r\n            }\r\n            else if (item.step) {\r\n                let step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap();\r\n                mapFrom--;\r\n                if (map)\r\n                    remap.appendMap(map, mapFrom);\r\n                if (step) {\r\n                    let selection = item.selection && item.selection.map(remap.slice(mapFrom));\r\n                    if (selection)\r\n                        events++;\r\n                    let newItem = new Item(map.invert(), step, selection), merged, last = items.length - 1;\r\n                    if (merged = items.length && items[last].merge(newItem))\r\n                        items[last] = merged;\r\n                    else\r\n                        items.push(newItem);\r\n                }\r\n            }\r\n            else if (item.map) {\r\n                mapFrom--;\r\n            }\r\n        }, this.items.length, 0);\r\n        return new Branch(RopeSequence.from(items.reverse()), events);\r\n    }\r\n}\r\nBranch.empty = new Branch(RopeSequence.empty, 0);\r\nfunction cutOffEvents(items, n) {\r\n    let cutPoint;\r\n    items.forEach((item, i) => {\r\n        if (item.selection && (n-- == 0)) {\r\n            cutPoint = i;\r\n            return false;\r\n        }\r\n    });\r\n    return items.slice(cutPoint);\r\n}\r\nclass Item {\r\n    constructor(\r\n    // The (forward) step map for this item.\r\n    map, \r\n    // The inverted step\r\n    step, \r\n    // If this is non-null, this item is the start of a group, and\r\n    // this selection is the starting selection for the group (the one\r\n    // that was active before the first step was applied)\r\n    selection, \r\n    // If this item is the inverse of a previous mapping on the stack,\r\n    // this points at the inverse's offset\r\n    mirrorOffset) {\r\n        this.map = map;\r\n        this.step = step;\r\n        this.selection = selection;\r\n        this.mirrorOffset = mirrorOffset;\r\n    }\r\n    merge(other) {\r\n        if (this.step && other.step && !other.selection) {\r\n            let step = other.step.merge(this.step);\r\n            if (step)\r\n                return new Item(step.getMap().invert(), step, this.selection);\r\n        }\r\n    }\r\n}\r\n// The value of the state field that tracks undo/redo history for that\r\n// state. Will be stored in the plugin state when the history plugin\r\n// is active.\r\nclass HistoryState {\r\n    constructor(done, undone, prevRanges, prevTime, prevComposition) {\r\n        this.done = done;\r\n        this.undone = undone;\r\n        this.prevRanges = prevRanges;\r\n        this.prevTime = prevTime;\r\n        this.prevComposition = prevComposition;\r\n    }\r\n}\r\nconst DEPTH_OVERFLOW = 20;\r\n// Record a transformation in undo history.\r\nfunction applyTransaction(history, state, tr, options) {\r\n    let historyTr = tr.getMeta(historyKey), rebased;\r\n    if (historyTr)\r\n        return historyTr.historyState;\r\n    if (tr.getMeta(closeHistoryKey))\r\n        history = new HistoryState(history.done, history.undone, null, 0, -1);\r\n    let appended = tr.getMeta(\"appendedTransaction\");\r\n    if (tr.steps.length == 0) {\r\n        return history;\r\n    }\r\n    else if (appended && appended.getMeta(historyKey)) {\r\n        if (appended.getMeta(historyKey).redo)\r\n            return new HistoryState(history.done.addTransform(tr, undefined, options, mustPreserveItems(state)), history.undone, rangesFor(tr.mapping.maps), history.prevTime, history.prevComposition);\r\n        else\r\n            return new HistoryState(history.done, history.undone.addTransform(tr, undefined, options, mustPreserveItems(state)), null, history.prevTime, history.prevComposition);\r\n    }\r\n    else if (tr.getMeta(\"addToHistory\") !== false && !(appended && appended.getMeta(\"addToHistory\") === false)) {\r\n        // Group transforms that occur in quick succession into one event.\r\n        let composition = tr.getMeta(\"composition\");\r\n        let newGroup = history.prevTime == 0 ||\r\n            (!appended && history.prevComposition != composition &&\r\n                (history.prevTime < (tr.time || 0) - options.newGroupDelay || !isAdjacentTo(tr, history.prevRanges)));\r\n        let prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps);\r\n        return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : undefined, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time, composition == null ? history.prevComposition : composition);\r\n    }\r\n    else if (rebased = tr.getMeta(\"rebased\")) {\r\n        // Used by the collab module to tell the history that some of its\r\n        // content has been rebased.\r\n        return new HistoryState(history.done.rebased(tr, rebased), history.undone.rebased(tr, rebased), mapRanges(history.prevRanges, tr.mapping), history.prevTime, history.prevComposition);\r\n    }\r\n    else {\r\n        return new HistoryState(history.done.addMaps(tr.mapping.maps), history.undone.addMaps(tr.mapping.maps), mapRanges(history.prevRanges, tr.mapping), history.prevTime, history.prevComposition);\r\n    }\r\n}\r\nfunction isAdjacentTo(transform, prevRanges) {\r\n    if (!prevRanges)\r\n        return false;\r\n    if (!transform.docChanged)\r\n        return true;\r\n    let adjacent = false;\r\n    transform.mapping.maps[0].forEach((start, end) => {\r\n        for (let i = 0; i < prevRanges.length; i += 2)\r\n            if (start <= prevRanges[i + 1] && end >= prevRanges[i])\r\n                adjacent = true;\r\n    });\r\n    return adjacent;\r\n}\r\nfunction rangesFor(maps) {\r\n    let result = [];\r\n    for (let i = maps.length - 1; i >= 0 && result.length == 0; i--)\r\n        maps[i].forEach((_from, _to, from, to) => result.push(from, to));\r\n    return result;\r\n}\r\nfunction mapRanges(ranges, mapping) {\r\n    if (!ranges)\r\n        return null;\r\n    let result = [];\r\n    for (let i = 0; i < ranges.length; i += 2) {\r\n        let from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1);\r\n        if (from <= to)\r\n            result.push(from, to);\r\n    }\r\n    return result;\r\n}\r\n// Apply the latest event from one branch to the document and shift the event\r\n// onto the other branch.\r\nfunction histTransaction(history, state, redo) {\r\n    let preserveItems = mustPreserveItems(state);\r\n    let histOptions = historyKey.get(state).spec.config;\r\n    let pop = (redo ? history.undone : history.done).popEvent(state, preserveItems);\r\n    if (!pop)\r\n        return null;\r\n    let selection = pop.selection.resolve(pop.transform.doc);\r\n    let added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);\r\n    let newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0, -1);\r\n    return pop.transform.setSelection(selection).setMeta(historyKey, { redo, historyState: newHist });\r\n}\r\nlet cachedPreserveItems = false, cachedPreserveItemsPlugins = null;\r\n// Check whether any plugin in the given state has a\r\n// `historyPreserveItems` property in its spec, in which case we must\r\n// preserve steps exactly as they came in, so that they can be\r\n// rebased.\r\nfunction mustPreserveItems(state) {\r\n    let plugins = state.plugins;\r\n    if (cachedPreserveItemsPlugins != plugins) {\r\n        cachedPreserveItems = false;\r\n        cachedPreserveItemsPlugins = plugins;\r\n        for (let i = 0; i < plugins.length; i++)\r\n            if (plugins[i].spec.historyPreserveItems) {\r\n                cachedPreserveItems = true;\r\n                break;\r\n            }\r\n    }\r\n    return cachedPreserveItems;\r\n}\r\n/**\r\nSet a flag on the given transaction that will prevent further steps\r\nfrom being appended to an existing history event (so that they\r\nrequire a separate undo command to undo).\r\n*/\r\nfunction closeHistory(tr) {\r\n    return tr.setMeta(closeHistoryKey, true);\r\n}\r\nconst historyKey = new PluginKey(\"history\");\r\nconst closeHistoryKey = new PluginKey(\"closeHistory\");\r\n/**\r\nReturns a plugin that enables the undo history for an editor. The\r\nplugin will track undo and redo stacks, which can be used with the\r\n[`undo`](https://prosemirror.net/docs/ref/#history.undo) and [`redo`](https://prosemirror.net/docs/ref/#history.redo) commands.\r\n\r\nYou can set an `\"addToHistory\"` [metadata\r\nproperty](https://prosemirror.net/docs/ref/#state.Transaction.setMeta) of `false` on a transaction\r\nto prevent it from being rolled back by undo.\r\n*/\r\nfunction history(config = {}) {\r\n    config = { depth: config.depth || 100,\r\n        newGroupDelay: config.newGroupDelay || 500 };\r\n    return new Plugin({\r\n        key: historyKey,\r\n        state: {\r\n            init() {\r\n                return new HistoryState(Branch.empty, Branch.empty, null, 0, -1);\r\n            },\r\n            apply(tr, hist, state) {\r\n                return applyTransaction(hist, state, tr, config);\r\n            }\r\n        },\r\n        config,\r\n        props: {\r\n            handleDOMEvents: {\r\n                beforeinput(view, e) {\r\n                    let inputType = e.inputType;\r\n                    let command = inputType == \"historyUndo\" ? undo : inputType == \"historyRedo\" ? redo : null;\r\n                    if (!command)\r\n                        return false;\r\n                    e.preventDefault();\r\n                    return command(view.state, view.dispatch);\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction buildCommand(redo, scroll) {\r\n    return (state, dispatch) => {\r\n        let hist = historyKey.getState(state);\r\n        if (!hist || (redo ? hist.undone : hist.done).eventCount == 0)\r\n            return false;\r\n        if (dispatch) {\r\n            let tr = histTransaction(hist, state, redo);\r\n            if (tr)\r\n                dispatch(scroll ? tr.scrollIntoView() : tr);\r\n        }\r\n        return true;\r\n    };\r\n}\r\n/**\r\nA command function that undoes the last change, if any.\r\n*/\r\nconst undo = buildCommand(false, true);\r\n/**\r\nA command function that redoes the last undone change, if any.\r\n*/\r\nconst redo = buildCommand(true, true);\r\n/**\r\nA command function that undoes the last change. Don't scroll the\r\nselection into view.\r\n*/\r\nconst undoNoScroll = buildCommand(false, false);\r\n/**\r\nA command function that redoes the last undone change. Don't\r\nscroll the selection into view.\r\n*/\r\nconst redoNoScroll = buildCommand(true, false);\r\n/**\r\nThe amount of undoable events available in a given state.\r\n*/\r\nfunction undoDepth(state) {\r\n    let hist = historyKey.getState(state);\r\n    return hist ? hist.done.eventCount : 0;\r\n}\r\n/**\r\nThe amount of redoable events available in a given editor state.\r\n*/\r\nfunction redoDepth(state) {\r\n    let hist = historyKey.getState(state);\r\n    return hist ? hist.undone.eventCount : 0;\r\n}\r\n\r\nexport { closeHistory, history, redo, redoDepth, redoNoScroll, undo, undoDepth, undoNoScroll };\r\n", "import { Extension } from '@tiptap/core'\nimport { history, redo, undo } from '@tiptap/pm/history'\n\nexport interface HistoryOptions {\n  /**\n   * The amount of history events that are collected before the oldest events are discarded.\n   * @default 100\n   * @example 50\n   */\n  depth: number,\n\n  /**\n   * The delay (in milliseconds) between changes after which a new group should be started.\n   * @default 500\n   * @example 1000\n   */\n  newGroupDelay: number,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    history: {\n      /**\n       * Undo recent changes\n       * @example editor.commands.undo()\n       */\n      undo: () => ReturnType,\n      /**\n       * Reapply reverted changes\n       * @example editor.commands.redo()\n       */\n      redo: () => ReturnType,\n    }\n  }\n}\n\n/**\n * This extension allows you to undo and redo recent changes.\n * @see https://www.tiptap.dev/api/extensions/history\n *\n * **Important**: If the `@tiptap/extension-collaboration` package is used, make sure to remove\n * the `history` extension, as it is not compatible with the `collaboration` extension.\n *\n * `@tiptap/extension-collaboration` uses its own history implementation.\n */\nexport const History = Extension.create<HistoryOptions>({\n  name: 'history',\n\n  addOptions() {\n    return {\n      depth: 100,\n      newGroupDelay: 500,\n    }\n  },\n\n  addCommands() {\n    return {\n      undo: () => ({ state, dispatch }) => {\n        return undo(state, dispatch)\n      },\n      redo: () => ({ state, dispatch }) => {\n        return redo(state, dispatch)\n      },\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      history(this.options),\n    ]\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-z': () => this.editor.commands.undo(),\n      'Shift-Mod-z': () => this.editor.commands.redo(),\n      'Mod-y': () => this.editor.commands.redo(),\n\n      // Russian keyboard layouts\n      'Mod-я': () => this.editor.commands.undo(),\n      'Shift-Mod-я': () => this.editor.commands.redo(),\n    }\n  },\n})\n", "import {\n  isNodeSelection, mergeAttributes, Node, nodeInputRule,\n} from '@tiptap/core'\nimport { NodeSelection, TextSelection } from '@tiptap/pm/state'\n\nexport interface HorizontalRuleOptions {\n  /**\n   * The HTML attributes for a horizontal rule node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    horizontalRule: {\n      /**\n       * Add a horizontal rule\n       * @example editor.commands.setHorizontalRule()\n       */\n      setHorizontalRule: () => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to insert horizontal rules.\n * @see https://www.tiptap.dev/api/nodes/horizontal-rule\n */\nexport const HorizontalRule = Node.create<HorizontalRuleOptions>({\n  name: 'horizontalRule',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block',\n\n  parseHTML() {\n    return [{ tag: 'hr' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  addCommands() {\n    return {\n      setHorizontalRule:\n        () => ({ chain, state }) => {\n          const { selection } = state\n          const { $from: $originFrom, $to: $originTo } = selection\n\n          const currentChain = chain()\n\n          if ($originFrom.parentOffset === 0) {\n            currentChain.insertContentAt(\n              {\n                from: Math.max($originFrom.pos - 1, 0),\n                to: $originTo.pos,\n              },\n              {\n                type: this.name,\n              },\n            )\n          } else if (isNodeSelection(selection)) {\n            currentChain.insertContentAt($originTo.pos, {\n              type: this.name,\n            })\n          } else {\n            currentChain.insertContent({ type: this.name })\n          }\n\n          return (\n            currentChain\n              // set cursor after horizontal rule\n              .command(({ tr, dispatch }) => {\n                if (dispatch) {\n                  const { $to } = tr.selection\n                  const posAfter = $to.end()\n\n                  if ($to.nodeAfter) {\n                    if ($to.nodeAfter.isTextblock) {\n                      tr.setSelection(TextSelection.create(tr.doc, $to.pos + 1))\n                    } else if ($to.nodeAfter.isBlock) {\n                      tr.setSelection(NodeSelection.create(tr.doc, $to.pos))\n                    } else {\n                      tr.setSelection(TextSelection.create(tr.doc, $to.pos))\n                    }\n                  } else {\n                    // add node after horizontal rule if it’s the end of the document\n                    const node = $to.parent.type.contentMatch.defaultType?.create()\n\n                    if (node) {\n                      tr.insert(posAfter, node)\n                      tr.setSelection(TextSelection.create(tr.doc, posAfter + 1))\n                    }\n                  }\n\n                  tr.scrollIntoView()\n                }\n\n                return true\n              })\n              .run()\n          )\n        },\n    }\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: /^(?:---|—-|___\\s|\\*\\*\\*\\s)$/,\n        type: this.type,\n      }),\n    ]\n  },\n})\n", "import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface ItalicOptions {\n  /**\n   * HTML attributes to add to the italic element.\n   * @default {}\n   * @example { class: 'foo' }\n  */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    italic: {\n      /**\n       * Set an italic mark\n       * @example editor.commands.setItalic()\n       */\n      setItalic: () => ReturnType,\n      /**\n       * Toggle an italic mark\n       * @example editor.commands.toggleItalic()\n       */\n      toggleItalic: () => ReturnType,\n      /**\n       * Unset an italic mark\n       * @example editor.commands.unsetItalic()\n       */\n      unsetItalic: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Matches an italic to a *italic* on input.\n */\nexport const starInputRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))$/\n\n/**\n * Matches an italic to a *italic* on paste.\n */\nexport const starPasteRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))/g\n\n/**\n * Matches an italic to a _italic_ on input.\n */\nexport const underscoreInputRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))$/\n\n/**\n * Matches an italic to a _italic_ on paste.\n */\nexport const underscorePasteRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))/g\n\n/**\n * This extension allows you to create italic text.\n * @see https://www.tiptap.dev/api/marks/italic\n */\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=normal',\n        clearMark: mark => mark.type.name === this.name,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleItalic: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetItalic: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n      'Mod-I': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n", "import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ListItemOptions {\n  /**\n   * The HTML attributes for a list item node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n\n  /**\n   * The node type for bulletList nodes\n   * @default 'bulletList'\n   * @example 'myCustomBulletList'\n   */\n  bulletListTypeName: string\n\n  /**\n   * The node type for orderedList nodes\n   * @default 'orderedList'\n   * @example 'myCustomOrderedList'\n   */\n  orderedListTypeName: string\n}\n\n/**\n * This extension allows you to create list items.\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nexport const ListItem = Node.create<ListItemOptions>({\n  name: 'listItem',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      bulletListTypeName: 'bulletList',\n      orderedListTypeName: 'orderedList',\n    }\n  },\n\n  content: 'paragraph block*',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      {\n        tag: 'li',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\n    }\n  },\n})\n", "import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nconst ListItemName = 'listItem'\nconst TextStyleName = 'textStyle'\n\nexport interface OrderedListOptions {\n  /**\n   * The node type name for list items.\n   * @default 'listItem'\n   * @example 'myListItem'\n   */\n  itemTypeName: string,\n\n  /**\n   * The HTML attributes for an ordered list node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n\n  /**\n   * Keep the marks when splitting a list item.\n   * @default false\n   * @example true\n   */\n  keepMarks: boolean,\n\n  /**\n   * Keep the attributes when splitting a list item.\n   * @default false\n   * @example true\n   */\n  keepAttributes: boolean,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    orderedList: {\n      /**\n       * Toggle an ordered list\n       * @example editor.commands.toggleOrderedList()\n       */\n      toggleOrderedList: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Matches an ordered list to a 1. on input (or any number followed by a dot).\n */\nexport const inputRegex = /^(\\d+)\\.\\s$/\n\n/**\n * This extension allows you to create ordered lists.\n * This requires the ListItem extension\n * @see https://www.tiptap.dev/api/nodes/ordered-list\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nexport const OrderedList = Node.create<OrderedListOptions>({\n  name: 'orderedList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false,\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start')\n            ? parseInt(element.getAttribute('start') || '', 10)\n            : 1\n        },\n      },\n      type: {\n        default: undefined,\n        parseHTML: element => element.getAttribute('type'),\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'ol',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    return start === 1\n      ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n      : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({ commands, chain }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItemName, this.editor.getAttributes(TextStyleName)).run()\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n    }\n  },\n\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => ({ start: +match[1] }),\n      joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n    })\n\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: match => ({ start: +match[1], ...this.editor.getAttributes(TextStyleName) }),\n        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n        editor: this.editor,\n      })\n    }\n    return [\n      inputRule,\n    ]\n  },\n})\n", "import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ParagraphOptions {\n  /**\n   * The HTML attributes for a paragraph node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    paragraph: {\n      /**\n       * Toggle a paragraph\n       * @example editor.commands.toggleParagraph()\n       */\n      setParagraph: () => ReturnType,\n    }\n  }\n}\n\n/**\n * This extension allows you to create paragraphs.\n * @see https://www.tiptap.dev/api/nodes/paragraph\n */\nexport const Paragraph = Node.create<ParagraphOptions>({\n  name: 'paragraph',\n\n  priority: 1000,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block',\n\n  content: 'inline*',\n\n  parseHTML() {\n    return [\n      { tag: 'p' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setParagraph: () => ({ commands }) => {\n        return commands.setNode(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-0': () => this.editor.commands.setParagraph(),\n    }\n  },\n})\n", "import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface StrikeOptions {\n  /**\n   * HTML attributes to add to the strike element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    strike: {\n      /**\n       * Set a strike mark\n       * @example editor.commands.setStrike()\n       */\n      setStrike: () => ReturnType,\n      /**\n       * Toggle a strike mark\n       * @example editor.commands.toggleStrike()\n       */\n      toggleStrike: () => ReturnType,\n      /**\n       * Unset a strike mark\n       * @example editor.commands.unsetStrike()\n       */\n      unsetStrike: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Matches a strike to a ~~strike~~ on input.\n */\nexport const inputRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))$/\n\n/**\n * Matches a strike to a ~~strike~~ on paste.\n */\nexport const pasteRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))/g\n\n/**\n * This extension allows you to create strike text.\n * @see https://www.tiptap.dev/api/marks/strike\n */\nexport const Strike = Mark.create<StrikeOptions>({\n  name: 'strike',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 's',\n      },\n      {\n        tag: 'del',\n      },\n      {\n        tag: 'strike',\n      },\n      {\n        style: 'text-decoration',\n        consuming: false,\n        getAttrs: style => ((style as string).includes('line-through') ? {} : false),\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setStrike: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleStrike: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetStrike: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-s': () => this.editor.commands.toggleStrike(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n", "import { Node } from '@tiptap/core'\n\n/**\n * This extension allows you to create text nodes.\n * @see https://www.tiptap.dev/api/nodes/text\n */\nexport const Text = Node.create({\n  name: 'text',\n  group: 'inline',\n})\n", "import { Extension } from '@tiptap/core'\nimport { Blockquote, BlockquoteOptions } from '@tiptap/extension-blockquote'\nimport { Bold, BoldOptions } from '@tiptap/extension-bold'\nimport { BulletList, BulletListOptions } from '@tiptap/extension-bullet-list'\nimport { Code, CodeOptions } from '@tiptap/extension-code'\nimport { CodeBlock, CodeBlockOptions } from '@tiptap/extension-code-block'\nimport { Document } from '@tiptap/extension-document'\nimport { Dropcursor, DropcursorOptions } from '@tiptap/extension-dropcursor'\nimport { Gapcursor } from '@tiptap/extension-gapcursor'\nimport { HardBreak, HardBreakOptions } from '@tiptap/extension-hard-break'\nimport { Heading, HeadingOptions } from '@tiptap/extension-heading'\nimport { History, HistoryOptions } from '@tiptap/extension-history'\nimport { HorizontalRule, HorizontalRuleOptions } from '@tiptap/extension-horizontal-rule'\nimport { Italic, ItalicOptions } from '@tiptap/extension-italic'\nimport { ListItem, ListItemOptions } from '@tiptap/extension-list-item'\nimport { OrderedList, OrderedListOptions } from '@tiptap/extension-ordered-list'\nimport { Paragraph, ParagraphOptions } from '@tiptap/extension-paragraph'\nimport { Strike, StrikeOptions } from '@tiptap/extension-strike'\nimport { Text } from '@tiptap/extension-text'\n\nexport interface StarterKitOptions {\n  /**\n   * If set to false, the blockquote extension will not be registered\n   * @example blockquote: false\n   */\n  blockquote: Partial<BlockquoteOptions> | false,\n\n  /**\n   * If set to false, the bold extension will not be registered\n   * @example bold: false\n   */\n  bold: Partial<BoldOptions> | false,\n\n  /**\n   * If set to false, the bulletList extension will not be registered\n   * @example bulletList: false\n   */\n  bulletList: Partial<BulletListOptions> | false,\n\n  /**\n   * If set to false, the code extension will not be registered\n   * @example code: false\n   */\n  code: Partial<CodeOptions> | false,\n\n  /**\n   * If set to false, the codeBlock extension will not be registered\n   * @example codeBlock: false\n   */\n  codeBlock: Partial<CodeBlockOptions> | false,\n\n  /**\n   * If set to false, the document extension will not be registered\n   * @example document: false\n   */\n  document: false,\n\n  /**\n   * If set to false, the dropcursor extension will not be registered\n   * @example dropcursor: false\n   */\n  dropcursor: Partial<DropcursorOptions> | false,\n\n  /**\n   * If set to false, the gapcursor extension will not be registered\n   * @example gapcursor: false\n   */\n  gapcursor: false,\n\n  /**\n   * If set to false, the hardBreak extension will not be registered\n   * @example hardBreak: false\n   */\n  hardBreak: Partial<HardBreakOptions> | false,\n\n  /**\n   * If set to false, the heading extension will not be registered\n   * @example heading: false\n   */\n  heading: Partial<HeadingOptions> | false,\n\n  /**\n   * If set to false, the history extension will not be registered\n   * @example history: false\n   */\n  history: Partial<HistoryOptions> | false,\n\n  /**\n   * If set to false, the horizontalRule extension will not be registered\n   * @example horizontalRule: false\n   */\n  horizontalRule: Partial<HorizontalRuleOptions> | false,\n\n  /**\n   * If set to false, the italic extension will not be registered\n   * @example italic: false\n   */\n  italic: Partial<ItalicOptions> | false,\n\n  /**\n   * If set to false, the listItem extension will not be registered\n   * @example listItem: false\n   */\n  listItem: Partial<ListItemOptions> | false,\n\n  /**\n   * If set to false, the orderedList extension will not be registered\n   * @example orderedList: false\n   */\n  orderedList: Partial<OrderedListOptions> | false,\n\n  /**\n   * If set to false, the paragraph extension will not be registered\n   * @example paragraph: false\n   */\n  paragraph: Partial<ParagraphOptions> | false,\n\n  /**\n   * If set to false, the strike extension will not be registered\n   * @example strike: false\n   */\n  strike: Partial<StrikeOptions> | false,\n\n  /**\n   * If set to false, the text extension will not be registered\n   * @example text: false\n   */\n  text: false,\n}\n\n/**\n * The starter kit is a collection of essential editor extensions.\n *\n * It’s a good starting point for building your own editor.\n */\nexport const StarterKit = Extension.create<StarterKitOptions>({\n  name: 'starterKit',\n\n  addExtensions() {\n    const extensions = []\n\n    if (this.options.bold !== false) {\n      extensions.push(Bold.configure(this.options?.bold))\n    }\n\n    if (this.options.blockquote !== false) {\n      extensions.push(Blockquote.configure(this.options?.blockquote))\n    }\n\n    if (this.options.bulletList !== false) {\n      extensions.push(BulletList.configure(this.options?.bulletList))\n    }\n\n    if (this.options.code !== false) {\n      extensions.push(Code.configure(this.options?.code))\n    }\n\n    if (this.options.codeBlock !== false) {\n      extensions.push(CodeBlock.configure(this.options?.codeBlock))\n    }\n\n    if (this.options.document !== false) {\n      extensions.push(Document.configure(this.options?.document))\n    }\n\n    if (this.options.dropcursor !== false) {\n      extensions.push(Dropcursor.configure(this.options?.dropcursor))\n    }\n\n    if (this.options.gapcursor !== false) {\n      extensions.push(Gapcursor.configure(this.options?.gapcursor))\n    }\n\n    if (this.options.hardBreak !== false) {\n      extensions.push(HardBreak.configure(this.options?.hardBreak))\n    }\n\n    if (this.options.heading !== false) {\n      extensions.push(Heading.configure(this.options?.heading))\n    }\n\n    if (this.options.history !== false) {\n      extensions.push(History.configure(this.options?.history))\n    }\n\n    if (this.options.horizontalRule !== false) {\n      extensions.push(HorizontalRule.configure(this.options?.horizontalRule))\n    }\n\n    if (this.options.italic !== false) {\n      extensions.push(Italic.configure(this.options?.italic))\n    }\n\n    if (this.options.listItem !== false) {\n      extensions.push(ListItem.configure(this.options?.listItem))\n    }\n\n    if (this.options.orderedList !== false) {\n      extensions.push(OrderedList.configure(this.options?.orderedList))\n    }\n\n    if (this.options.paragraph !== false) {\n      extensions.push(Paragraph.configure(this.options?.paragraph))\n    }\n\n    if (this.options.strike !== false) {\n      extensions.push(Strike.configure(this.options?.strike))\n    }\n\n    if (this.options.text !== false) {\n      extensions.push(Text.configure(this.options?.text))\n    }\n\n    return extensions\n  },\n})\n"],
  "mappings": "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",
  "names": ["inputRegex", "rect", "RopeSequence", "from", "Leaf", "Append", "appendInner", "map", "from", "history", "redo", "redo", "starInputRegex", "starPasteRegex", "underscoreInputRegex", "underscorePasteRegex", "inputRegex", "inputRegex", "pasteRegex"]
}
