{
  "version": 3,
  "sources": ["../../rehype-minify-whitespace/node_modules/hast-util-is-element/index.js", "../../rehype-minify-whitespace/node_modules/hast-util-embedded/lib/index.js", "../../rehype-minify-whitespace/node_modules/unist-util-is/lib/index.js", "../../rehype-minify-whitespace/node_modules/hast-util-whitespace/index.js", "../../rehype-minify-whitespace/block.js", "../../rehype-minify-whitespace/content.js", "../../rehype-minify-whitespace/skippable.js", "../../rehype-minify-whitespace/index.js", "../../hast-util-to-mdast/node_modules/unist-util-is/lib/index.js", "../../hast-util-to-mdast/lib/all.js", "../../hast-util-to-mdast/lib/util/own.js", "../../hast-util-to-mdast/lib/util/wrap-text.js", "../../hast-util-to-mdast/lib/one.js", "../../hast-util-to-mdast/lib/util/wrap.js", "../../hast-util-to-mdast/node_modules/hast-util-is-element/index.js", "../../hast-util-to-mdast/node_modules/hast-util-has-property/lib/index.js", "../../hast-util-to-mdast/node_modules/hast-util-embedded/lib/index.js", "../../hast-util-to-mdast/node_modules/hast-util-is-body-ok-link/index.js", "../../hast-util-to-mdast/node_modules/hast-util-phrasing/lib/index.js", "../../hast-util-to-mdast/lib/util/wrap-children.js", "../../hast-util-to-mdast/lib/util/resolve.js", "../../hast-util-to-mdast/lib/handlers/a.js", "../../hast-util-to-mdast/lib/handlers/base.js", "../../hast-util-to-mdast/lib/handlers/blockquote.js", "../../hast-util-to-mdast/lib/handlers/br.js", "../../hast-util-to-text/node_modules/hast-util-is-element/index.js", "../../unist-util-find-after/node_modules/unist-util-is/lib/index.js", "../../unist-util-find-after/lib/index.js", "../../hast-util-to-text/lib/index.js", "../../trim-trailing-lines/index.js", "../../hast-util-to-mdast/lib/handlers/code.js", "../../hast-util-to-mdast/lib/handlers/comment.js", "../../hast-util-to-mdast/lib/handlers/del.js", "../../hast-util-to-mdast/lib/util/list-items-spread.js", "../../hast-util-to-mdast/lib/util/wrap-list-items.js", "../../hast-util-to-mdast/lib/handlers/dl.js", "../../hast-util-to-mdast/lib/handlers/em.js", "../../hast-util-to-mdast/lib/handlers/heading.js", "../../hast-util-to-mdast/lib/handlers/hr.js", "../../hast-util-to-mdast/lib/handlers/iframe.js", "../../hast-util-to-mdast/lib/handlers/img.js", "../../hast-util-to-mdast/lib/handlers/inline-code.js", "../../hast-util-to-mdast/lib/util/find-selected-options.js", "../../hast-util-to-mdast/lib/handlers/input.js", "../../hast-util-to-mdast/lib/handlers/li.js", "../../hast-util-to-mdast/lib/handlers/list.js", "../../hast-util-to-mdast/lib/handlers/media.js", "../../hast-util-to-mdast/lib/handlers/p.js", "../../hast-util-to-mdast/lib/handlers/q.js", "../../hast-util-to-mdast/lib/handlers/root.js", "../../hast-util-to-mdast/lib/handlers/select.js", "../../hast-util-to-mdast/lib/handlers/strong.js", "../../hast-util-to-mdast/lib/handlers/table-cell.js", "../../hast-util-to-mdast/lib/handlers/table-row.js", "../../hast-util-to-mdast/lib/handlers/table.js", "../../hast-util-to-mdast/lib/handlers/text.js", "../../hast-util-to-mdast/lib/handlers/textarea.js", "../../hast-util-to-mdast/lib/handlers/wbr.js", "../../hast-util-to-mdast/lib/handlers/index.js", "../../hast-util-to-mdast/lib/index.js", "../../rehype-remark/lib/index.js"],
  "sourcesContent": ["/**\r\n * @typedef {import('unist').Parent} Parent\r\n * @typedef {import('hast').Element} Element\r\n */\r\n\r\n/**\r\n * @typedef {null | undefined | string | TestFunctionAnything | Array<string | TestFunctionAnything>} Test\r\n *   Check for an arbitrary element, unaware of TypeScript inferral.\r\n *\r\n * @callback TestFunctionAnything\r\n *   Check if an element passes a test, unaware of TypeScript inferral.\r\n * @param {Element} element\r\n *   An element.\r\n * @param {number | null | undefined} [index]\r\n *   The element’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The element’s parent.\r\n * @returns {boolean | void}\r\n *   Whether this element passes the test.\r\n */\r\n\r\n/**\r\n * @template {Element} T\r\n *   Element type.\r\n * @typedef {T['tagName'] | TestFunctionPredicate<T> | Array<T['tagName'] | TestFunctionPredicate<T>>} PredicateTest\r\n *   Check for an element that can be inferred by TypeScript.\r\n */\r\n\r\n/**\r\n * Check if an element passes a certain node test.\r\n *\r\n * @template {Element} T\r\n *   Element type.\r\n * @callback TestFunctionPredicate\r\n *   Complex test function for an element that can be inferred by TypeScript.\r\n * @param {Element} element\r\n *   An element.\r\n * @param {number | null | undefined} [index]\r\n *   The element’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The element’s parent.\r\n * @returns {element is T}\r\n *   Whether this element passes the test.\r\n */\r\n\r\n/**\r\n * @callback AssertAnything\r\n *   Check that an arbitrary value is an element, unaware of TypeScript inferral.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is an element and passes a test.\r\n */\r\n\r\n/**\r\n * Check if a node is an element and passes a certain node test\r\n *\r\n * @template {Element} T\r\n *   Element type.\r\n * @callback AssertPredicate\r\n *   Check that an arbitrary value is a specific element, aware of TypeScript.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is T}\r\n *   Whether this is an element and passes a test.\r\n */\r\n\r\n/**\r\n * Check if `node` is an `Element` and whether it passes the given test.\r\n *\r\n * @param node\r\n *   Thing to check, typically `Node`.\r\n * @param test\r\n *   A check for a specific element.\r\n * @param index\r\n *   The node’s position in its parent.\r\n * @param parent\r\n *   The node’s parent.\r\n * @returns\r\n *   Whether `node` is an element and passes a test.\r\n */\r\nexport const isElement =\r\n  /**\r\n   * @type {(\r\n   *   (() => false) &\r\n   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &\r\n   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test | undefined} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function (node, test, index, parent, context) {\r\n      const check = convertElement(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index for child node')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!parent.type || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      // @ts-expect-error Looks like a node.\r\n      if (!node || !node.type || typeof node.type !== 'string') {\r\n        return false\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      return check.call(context, node, index, parent)\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param test\r\n *   *  When nullish, checks if `node` is an `Element`.\r\n *   *  When `string`, works like passing `(element) => element.tagName === test`.\r\n *   *  When `function` checks if function passed the element is true.\r\n *   *  When `array`, checks any one of the subtests pass.\r\n * @returns\r\n *   An assertion.\r\n */\r\nexport const convertElement =\r\n  /**\r\n   * @type {(\r\n   *   (<T extends Element>(test: T['tagName'] | TestFunctionPredicate<T>) => AssertPredicate<T>) &\r\n   *   ((test?: Test) => AssertAnything)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test | null | undefined} [test]\r\n     * @returns {AssertAnything}\r\n     */\r\n    function (test) {\r\n      if (test === undefined || test === null) {\r\n        return element\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return tagNameFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return anyFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or array as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * Handle multiple tests.\r\n *\r\n * @param {Array<string | TestFunctionAnything>} tests\r\n * @returns {AssertAnything}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<AssertAnything>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convertElement(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].call(this, ...parameters)) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for an element with a certain tag name.\r\n *\r\n * @param {string} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction tagNameFactory(check) {\r\n  return tagName\r\n\r\n  /**\r\n   * @param {unknown} node\r\n   * @returns {boolean}\r\n   */\r\n  function tagName(node) {\r\n    return element(node) && node.tagName === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for an element that passes that test.\r\n *\r\n * @param {TestFunctionAnything} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction castFactory(check) {\r\n  return assertion\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {unknown} node\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function assertion(node, ...parameters) {\r\n    // @ts-expect-error: fine.\r\n    return element(node) && Boolean(check.call(this, node, ...parameters))\r\n  }\r\n}\r\n\r\n/**\r\n * Make sure something is an element.\r\n *\r\n * @param {unknown} node\r\n * @returns {node is Element}\r\n */\r\nfunction element(node) {\r\n  return Boolean(\r\n    node &&\r\n      typeof node === 'object' &&\r\n      // @ts-expect-error Looks like a node.\r\n      node.type === 'element' &&\r\n      // @ts-expect-error Looks like an element.\r\n      typeof node.tagName === 'string'\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n */\r\n\r\nimport {convertElement} from 'hast-util-is-element'\r\n\r\n/**\r\n * Check if a node is a *embedded content*.\r\n *\r\n * @type {import('hast-util-is-element').AssertPredicate<Element & {tagName: 'audio' | 'canvas' | 'embed' | 'iframe' | 'img' | 'math' | 'object' | 'picture' | 'svg' | 'video'}>}\r\n * @param value\r\n *   Thing to check (typically `Node`).\r\n * @returns\r\n *   Whether `value` is an element considered embedded content.\r\n *\r\n *   The elements `audio`, `canvas`, `embed`, `iframe`, `img`, `math`,\r\n *   `object`, `picture`, `svg`, and `video` are embedded content.\r\n */\r\n// @ts-expect-error Sure, the assertion matches.\r\nexport const embedded = convertElement([\r\n  'audio',\r\n  'canvas',\r\n  'embed',\r\n  'iframe',\r\n  'img',\r\n  'math',\r\n  'object',\r\n  'picture',\r\n  'svg',\r\n  'video'\r\n])\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n */\r\n\r\n/**\r\n * @typedef {Record<string, unknown>} Props\r\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\r\n *   Check for an arbitrary node, unaware of TypeScript inferral.\r\n *\r\n * @callback TestFunctionAnything\r\n *   Check if a node passes a test, unaware of TypeScript inferral.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean | void}\r\n *   Whether this node passes the test.\r\n */\r\n\r\n/**\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\r\n *   Check for a node that can be inferred by TypeScript.\r\n */\r\n\r\n/**\r\n * Check if a node passes a certain test.\r\n *\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @callback TestFunctionPredicate\r\n *   Complex test function for a node that can be inferred by TypeScript.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is Kind}\r\n *   Whether this node passes the test.\r\n */\r\n\r\n/**\r\n * @callback AssertAnything\r\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is a node and passes a test.\r\n */\r\n\r\n/**\r\n * Check if a node is a node and passes a certain node test.\r\n *\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @callback AssertPredicate\r\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is Kind}\r\n *   Whether this is a node and passes a test.\r\n */\r\n\r\n/**\r\n * Check if `node` is a `Node` and whether it passes the given test.\r\n *\r\n * @param node\r\n *   Thing to check, typically `Node`.\r\n * @param test\r\n *   A check for a specific node.\r\n * @param index\r\n *   The node’s position in its parent.\r\n * @param parent\r\n *   The node’s parent.\r\n * @returns\r\n *   Whether `node` is a node and passes a test.\r\n */\r\nexport const is =\r\n  /**\r\n   * @type {(\r\n   *   (() => false) &\r\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\r\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\r\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\r\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function is(node, test, index, parent, context) {\r\n      const check = convert(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!is(parent) || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      // @ts-expect-error Looks like a node.\r\n      return node && node.type && typeof node.type === 'string'\r\n        ? Boolean(check.call(context, node, index, parent))\r\n        : false\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param test\r\n *   *   when nullish, checks if `node` is a `Node`.\r\n *   *   when `string`, works like passing `(node) => node.type === test`.\r\n *   *   when `function` checks if function passed the node is true.\r\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\r\n *   *   when `array`, checks if any one of the subtests pass.\r\n * @returns\r\n *   An assertion.\r\n */\r\nexport const convert =\r\n  /**\r\n   * @type {(\r\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\r\n   *   ((test?: Test) => AssertAnything)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test} [test]\r\n     * @returns {AssertAnything}\r\n     */\r\n    function (test) {\r\n      if (test === undefined || test === null) {\r\n        return ok\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return typeFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or object as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * @param {Array<string | Props | TestFunctionAnything>} tests\r\n * @returns {AssertAnything}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<AssertAnything>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convert(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].call(this, ...parameters)) return true\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn an object into a test for a node with a certain fields.\r\n *\r\n * @param {Props} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction propsFactory(check) {\r\n  return castFactory(all)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function all(node) {\r\n    /** @type {string} */\r\n    let key\r\n\r\n    for (key in check) {\r\n      // @ts-expect-error: hush, it sure works as an index.\r\n      if (node[key] !== check[key]) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for a node with a certain type.\r\n *\r\n * @param {string} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction typeFactory(check) {\r\n  return castFactory(type)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  function type(node) {\r\n    return node && node.type === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for a node that passes that test.\r\n *\r\n * @param {TestFunctionAnything} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction castFactory(check) {\r\n  return assertion\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {unknown} node\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function assertion(node, ...parameters) {\r\n    return Boolean(\r\n      node &&\r\n        typeof node === 'object' &&\r\n        'type' in node &&\r\n        // @ts-expect-error: fine.\r\n        Boolean(check.call(this, node, ...parameters))\r\n    )\r\n  }\r\n}\r\n\r\nfunction ok() {\r\n  return true\r\n}\r\n", "/**\r\n * Check if the given value is *inter-element whitespace*.\r\n *\r\n * @param {unknown} thing\r\n *   Thing to check (typically `Node` or `string`).\r\n * @returns {boolean}\r\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\r\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\r\n *   (`\\r`), or form feed (`\\f`).\r\n *   If a node is passed it must be a `Text` node, whose `value` field is\r\n *   checked.\r\n */\r\nexport function whitespace(thing) {\r\n  /** @type {string} */\r\n  const value =\r\n    // @ts-expect-error looks like a node.\r\n    thing && typeof thing === 'object' && thing.type === 'text'\r\n      ? // @ts-expect-error looks like a text.\r\n        thing.value || ''\r\n      : thing\r\n\r\n  // HTML whitespace expression.\r\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\r\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\r\n}\r\n", "// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\r\nexport const blocks = [\r\n  'address', // Flow content.\r\n  'article', // Sections and headings.\r\n  'aside', // Sections and headings.\r\n  'blockquote', // Flow content.\r\n  'body', // Page.\r\n  'br', // Contribute whitespace intrinsically.\r\n  'caption', // Similar to block.\r\n  'center', // Flow content, legacy.\r\n  'col', // Similar to block.\r\n  'colgroup', // Similar to block.\r\n  'dd', // Lists.\r\n  'dialog', // Flow content.\r\n  'dir', // Lists, legacy.\r\n  'div', // Flow content.\r\n  'dl', // Lists.\r\n  'dt', // Lists.\r\n  'figcaption', // Flow content.\r\n  'figure', // Flow content.\r\n  'footer', // Flow content.\r\n  'form', // Flow content.\r\n  'h1', // Sections and headings.\r\n  'h2', // Sections and headings.\r\n  'h3', // Sections and headings.\r\n  'h4', // Sections and headings.\r\n  'h5', // Sections and headings.\r\n  'h6', // Sections and headings.\r\n  'head', // Page.\r\n  'header', // Flow content.\r\n  'hgroup', // Sections and headings.\r\n  'hr', // Flow content.\r\n  'html', // Page.\r\n  'legend', // Flow content.\r\n  'li', // Block-like.\r\n  'li', // Similar to block.\r\n  'listing', // Flow content, legacy\r\n  'main', // Flow content.\r\n  'menu', // Lists.\r\n  'nav', // Sections and headings.\r\n  'ol', // Lists.\r\n  'optgroup', // Similar to block.\r\n  'option', // Similar to block.\r\n  'p', // Flow content.\r\n  'plaintext', // Flow content, legacy\r\n  'pre', // Flow content.\r\n  'section', // Sections and headings.\r\n  'summary', // Similar to block.\r\n  'table', // Similar to block.\r\n  'tbody', // Similar to block.\r\n  'td', // Block-like.\r\n  'td', // Similar to block.\r\n  'tfoot', // Similar to block.\r\n  'th', // Block-like.\r\n  'th', // Similar to block.\r\n  'thead', // Similar to block.\r\n  'tr', // Similar to block.\r\n  'ul', // Lists.\r\n  'wbr', // Contribute whitespace intrinsically.\r\n  'xmp' // Flow content, legacy\r\n]\r\n", "export const content = [\r\n  // Form.\r\n  'button',\r\n  'input',\r\n  'select',\r\n  'textarea'\r\n]\r\n", "export const skippable = [\r\n  'area',\r\n  'base',\r\n  'basefont',\r\n  'dialog',\r\n  'datalist',\r\n  'head',\r\n  'link',\r\n  'meta',\r\n  'noembed',\r\n  'noframes',\r\n  'param',\r\n  'rp',\r\n  'script',\r\n  'source',\r\n  'style',\r\n  'template',\r\n  'track',\r\n  'title'\r\n]\r\n", "/**\r\n * rehype plugin to minify whitespace between elements.\r\n *\r\n * ## What is this?\r\n *\r\n * This package is a plugin that can minify the whitespace between elements.\r\n *\r\n * ## When should I use this?\r\n *\r\n * You can use this plugin when you want to improve the size of HTML documents.\r\n *\r\n * ## API\r\n *\r\n * ### `unified().use(rehypeMinifyWhitespace[, options])`\r\n *\r\n * Minify whitespace.\r\n *\r\n * ##### `options`\r\n *\r\n * Configuration (optional).\r\n *\r\n * ##### `options.newlines`\r\n *\r\n * Whether to collapse runs of whitespace that include line endings to one\r\n * line ending (`boolean`, default: `false`).\r\n * The default is to collapse everything to one space.\r\n *\r\n * @example\r\n *   <h1>Heading</h1>\r\n *   <p><strong>This</strong> and <em>that</em></p>\r\n */\r\n\r\n/**\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {Root|Root['children'][number]} Node\r\n *\r\n * @typedef Options\r\n * @property {boolean} [newlines=false]\r\n *   If `newlines: true`, collapses whitespace containing newlines to `'\\n'`\r\n *   instead of `' '`.\r\n *   The default is to collapse to a single space.\r\n *\r\n * @typedef {'pre'|'nowrap'|'pre-wrap'|'normal'} Whitespace\r\n *\r\n * @typedef Context\r\n * @property {ReturnType<collapseFactory>} collapse\r\n * @property {Whitespace} whitespace\r\n * @property {boolean} [before]\r\n * @property {boolean} [after]\r\n *\r\n * @typedef Result\r\n * @property {boolean} remove\r\n * @property {boolean} ignore\r\n * @property {boolean} stripAtStart\r\n */\r\n\r\nimport {isElement} from 'hast-util-is-element'\r\nimport {embedded} from 'hast-util-embedded'\r\nimport {convert} from 'unist-util-is'\r\nimport {whitespace} from 'hast-util-whitespace'\r\nimport {blocks} from './block.js'\r\nimport {content as contents} from './content.js'\r\nimport {skippable as skippables} from './skippable.js'\r\n\r\nconst ignorableNode = convert(['doctype', 'comment'])\r\n\r\n/**\r\n * Minify whitespace.\r\n *\r\n * @type {import('unified').Plugin<[Options?]|Array<void>, Root>}\r\n */\r\nexport default function rehypeMinifyWhitespace(options = {}) {\r\n  const collapse = collapseFactory(\r\n    options.newlines ? replaceNewlines : replaceWhitespace\r\n  )\r\n\r\n  return (tree) => {\r\n    minify(tree, {collapse, whitespace: 'normal'})\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node\r\n * @param {Context} context\r\n * @returns {Result}\r\n */\r\nfunction minify(node, context) {\r\n  if ('children' in node) {\r\n    const settings = Object.assign({}, context)\r\n\r\n    if (node.type === 'root' || blocklike(node)) {\r\n      settings.before = true\r\n      settings.after = true\r\n    }\r\n\r\n    settings.whitespace = inferWhiteSpace(node, context)\r\n\r\n    return all(node, settings)\r\n  }\r\n\r\n  if (node.type === 'text') {\r\n    if (context.whitespace === 'normal') {\r\n      return minifyText(node, context)\r\n    }\r\n\r\n    // Naïve collapse, but no trimming:\r\n    if (context.whitespace === 'nowrap') {\r\n      node.value = context.collapse(node.value)\r\n    }\r\n\r\n    // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor\r\n    // trimmed.\r\n  }\r\n\r\n  return {remove: false, ignore: ignorableNode(node), stripAtStart: false}\r\n}\r\n\r\n/**\r\n * @param {Text} node\r\n * @param {Context} context\r\n * @returns {Result}\r\n */\r\nfunction minifyText(node, context) {\r\n  const value = context.collapse(node.value)\r\n  const result = {remove: false, ignore: false, stripAtStart: false}\r\n  let start = 0\r\n  let end = value.length\r\n\r\n  if (context.before && removable(value.charAt(0))) {\r\n    start++\r\n  }\r\n\r\n  if (start !== end && removable(value.charAt(end - 1))) {\r\n    if (context.after) {\r\n      end--\r\n    } else {\r\n      result.stripAtStart = true\r\n    }\r\n  }\r\n\r\n  if (start === end) {\r\n    result.remove = true\r\n  } else {\r\n    node.value = value.slice(start, end)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * @param {Root|Element} parent\r\n * @param {Context} context\r\n * @returns {Result}\r\n */\r\nfunction all(parent, context) {\r\n  let before = context.before\r\n  const after = context.after\r\n  const children = parent.children\r\n  let length = children.length\r\n  let index = -1\r\n\r\n  while (++index < length) {\r\n    const result = minify(\r\n      children[index],\r\n      Object.assign({}, context, {\r\n        before,\r\n        after: collapsableAfter(children, index, after)\r\n      })\r\n    )\r\n\r\n    if (result.remove) {\r\n      children.splice(index, 1)\r\n      index--\r\n      length--\r\n    } else if (!result.ignore) {\r\n      before = result.stripAtStart\r\n    }\r\n\r\n    // If this element, such as a `<select>` or `<img>`, contributes content\r\n    // somehow, allow whitespace again.\r\n    if (content(children[index])) {\r\n      before = false\r\n    }\r\n  }\r\n\r\n  return {remove: false, ignore: false, stripAtStart: Boolean(before || after)}\r\n}\r\n\r\n/**\r\n * @param {Array<Node>} nodes\r\n * @param {number} index\r\n * @param {boolean|undefined} [after]\r\n * @returns {boolean|undefined}\r\n */\r\nfunction collapsableAfter(nodes, index, after) {\r\n  while (++index < nodes.length) {\r\n    const node = nodes[index]\r\n    let result = inferBoundary(node)\r\n\r\n    if (result === undefined && 'children' in node && !skippable(node)) {\r\n      result = collapsableAfter(node.children, -1)\r\n    }\r\n\r\n    if (typeof result === 'boolean') {\r\n      return result\r\n    }\r\n  }\r\n\r\n  return after\r\n}\r\n\r\n/**\r\n * Infer two types of boundaries:\r\n *\r\n * 1. `true` — boundary for which whitespace around it does not contribute\r\n *    anything\r\n * 2. `false` — boundary for which whitespace around it *does* contribute\r\n *\r\n * No result (`undefined`) is returned if it is unknown.\r\n *\r\n * @param {Node} node\r\n * @returns {boolean|undefined}\r\n */\r\nfunction inferBoundary(node) {\r\n  if (node.type === 'element') {\r\n    if (content(node)) {\r\n      return false\r\n    }\r\n\r\n    if (blocklike(node)) {\r\n      return true\r\n    }\r\n\r\n    // Unknown: either depends on siblings if embedded or metadata, or on\r\n    // children.\r\n  } else if (node.type === 'text') {\r\n    if (!whitespace(node)) {\r\n      return false\r\n    }\r\n  } else if (!ignorableNode(node)) {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Infer whether a node is skippable.\r\n *\r\n * @param {Node} node\r\n * @returns {boolean}\r\n */\r\nfunction content(node) {\r\n  return embedded(node) || isElement(node, contents)\r\n}\r\n\r\n/**\r\n * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\r\n *\r\n * @param {Element} node\r\n * @returns {boolean}\r\n */\r\nfunction blocklike(node) {\r\n  return isElement(node, blocks)\r\n}\r\n\r\n/**\r\n * @param {Element|Root} node\r\n * @returns {boolean}\r\n */\r\nfunction skippable(node) {\r\n  return (\r\n    Boolean(\r\n      'properties' in node && node.properties && node.properties.hidden\r\n    ) ||\r\n    ignorableNode(node) ||\r\n    isElement(node, skippables)\r\n  )\r\n}\r\n\r\n/**\r\n * @param {string} character\r\n * @returns {boolean}\r\n */\r\nfunction removable(character) {\r\n  return character === ' ' || character === '\\n'\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {string}\r\n */\r\nfunction replaceNewlines(value) {\r\n  const match = /\\r?\\n|\\r/.exec(value)\r\n  return match ? match[0] : ' '\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction replaceWhitespace() {\r\n  return ' '\r\n}\r\n\r\n/**\r\n * @param {(value: string) => string} replace\r\n */\r\nfunction collapseFactory(replace) {\r\n  return collapse\r\n\r\n  /**\r\n   * @param {string} value\r\n   * @returns {string}\r\n   */\r\n  function collapse(value) {\r\n    return String(value).replace(/[\\t\\n\\v\\f\\r ]+/g, replace)\r\n  }\r\n}\r\n\r\n/**\r\n * We don’t need to support void elements here (so `nobr wbr` -> `normal` is\r\n * ignored).\r\n *\r\n * @param {Root|Element} node\r\n * @param {Context} context\r\n * @returns {Whitespace}\r\n */\r\nfunction inferWhiteSpace(node, context) {\r\n  if ('tagName' in node && node.properties) {\r\n    switch (node.tagName) {\r\n      // Whitespace in script/style, while not displayed by CSS as significant,\r\n      // could have some meaning in JS/CSS, so we can’t touch them.\r\n      case 'listing':\r\n      case 'plaintext':\r\n      case 'script':\r\n      case 'style':\r\n      case 'xmp':\r\n        return 'pre'\r\n      case 'nobr':\r\n        return 'nowrap'\r\n      case 'pre':\r\n        return node.properties.wrap ? 'pre-wrap' : 'pre'\r\n      case 'td':\r\n      case 'th':\r\n        return node.properties.noWrap ? 'nowrap' : context.whitespace\r\n      case 'textarea':\r\n        return 'pre-wrap'\r\n      default:\r\n    }\r\n  }\r\n\r\n  return context.whitespace\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n */\r\n\r\n/**\r\n * @typedef {Record<string, unknown>} Props\r\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\r\n *   Check for an arbitrary node, unaware of TypeScript inferral.\r\n *\r\n * @callback TestFunctionAnything\r\n *   Check if a node passes a test, unaware of TypeScript inferral.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean | void}\r\n *   Whether this node passes the test.\r\n */\r\n\r\n/**\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\r\n *   Check for a node that can be inferred by TypeScript.\r\n */\r\n\r\n/**\r\n * Check if a node passes a certain test.\r\n *\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @callback TestFunctionPredicate\r\n *   Complex test function for a node that can be inferred by TypeScript.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is Kind}\r\n *   Whether this node passes the test.\r\n */\r\n\r\n/**\r\n * @callback AssertAnything\r\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is a node and passes a test.\r\n */\r\n\r\n/**\r\n * Check if a node is a node and passes a certain node test.\r\n *\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @callback AssertPredicate\r\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is Kind}\r\n *   Whether this is a node and passes a test.\r\n */\r\n\r\n/**\r\n * Check if `node` is a `Node` and whether it passes the given test.\r\n *\r\n * @param node\r\n *   Thing to check, typically `Node`.\r\n * @param test\r\n *   A check for a specific node.\r\n * @param index\r\n *   The node’s position in its parent.\r\n * @param parent\r\n *   The node’s parent.\r\n * @returns\r\n *   Whether `node` is a node and passes a test.\r\n */\r\nexport const is =\r\n  /**\r\n   * @type {(\r\n   *   (() => false) &\r\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\r\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\r\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\r\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function is(node, test, index, parent, context) {\r\n      const check = convert(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!is(parent) || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      // @ts-expect-error Looks like a node.\r\n      return node && node.type && typeof node.type === 'string'\r\n        ? Boolean(check.call(context, node, index, parent))\r\n        : false\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param test\r\n *   *   when nullish, checks if `node` is a `Node`.\r\n *   *   when `string`, works like passing `(node) => node.type === test`.\r\n *   *   when `function` checks if function passed the node is true.\r\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\r\n *   *   when `array`, checks if any one of the subtests pass.\r\n * @returns\r\n *   An assertion.\r\n */\r\nexport const convert =\r\n  /**\r\n   * @type {(\r\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\r\n   *   ((test?: Test) => AssertAnything)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test} [test]\r\n     * @returns {AssertAnything}\r\n     */\r\n    function (test) {\r\n      if (test === undefined || test === null) {\r\n        return ok\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return typeFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or object as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * @param {Array<string | Props | TestFunctionAnything>} tests\r\n * @returns {AssertAnything}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<AssertAnything>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convert(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].call(this, ...parameters)) return true\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn an object into a test for a node with a certain fields.\r\n *\r\n * @param {Props} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction propsFactory(check) {\r\n  return castFactory(all)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function all(node) {\r\n    /** @type {string} */\r\n    let key\r\n\r\n    for (key in check) {\r\n      // @ts-expect-error: hush, it sure works as an index.\r\n      if (node[key] !== check[key]) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for a node with a certain type.\r\n *\r\n * @param {string} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction typeFactory(check) {\r\n  return castFactory(type)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  function type(node) {\r\n    return node && node.type === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for a node that passes that test.\r\n *\r\n * @param {TestFunctionAnything} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction castFactory(check) {\r\n  return assertion\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {unknown} node\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function assertion(node, ...parameters) {\r\n    return Boolean(\r\n      node &&\r\n        typeof node === 'object' &&\r\n        'type' in node &&\r\n        // @ts-expect-error: fine.\r\n        Boolean(check.call(this, node, ...parameters))\r\n    )\r\n  }\r\n}\r\n\r\nfunction ok() {\r\n  return true\r\n}\r\n", "/**\r\n * @typedef {import('./types.js').H} H\r\n * @typedef {import('./types.js').Node} Node\r\n * @typedef {import('./types.js').MdastNode} MdastNode\r\n */\r\n\r\nimport {one} from './one.js'\r\n\r\n/**\r\n * @param {H} h\r\n * @param {Node} parent\r\n * @returns {Array<MdastNode>}\r\n */\r\nexport function all(h, parent) {\r\n  /** @type {Array<Node>} */\r\n  // @ts-expect-error Assume `parent` is a parent.\r\n  const nodes = parent.children || []\r\n  /** @type {Array<MdastNode>} */\r\n  const values = []\r\n  let index = -1\r\n\r\n  while (++index < nodes.length) {\r\n    // @ts-expect-error assume `parent` is a parent.\r\n    const result = one(h, nodes[index], parent)\r\n\r\n    if (Array.isArray(result)) {\r\n      values.push(...result)\r\n    } else if (result) {\r\n      values.push(result)\r\n    }\r\n  }\r\n\r\n  let start = 0\r\n  let end = values.length\r\n\r\n  while (start < end && values[start].type === 'break') {\r\n    start++\r\n  }\r\n\r\n  while (end > start && values[end - 1].type === 'break') {\r\n    end--\r\n  }\r\n\r\n  return start === 0 && end === values.length\r\n    ? values\r\n    : values.slice(start, end)\r\n}\r\n", "export const own = {}.hasOwnProperty\r\n", "/**\r\n * @typedef {import('../types.js').H} H\r\n */\r\n\r\n/**\r\n * @param {H} h\r\n * @param {string} value\r\n * @returns {string}\r\n */\r\nexport function wrapText(h, value) {\r\n  return h.wrapText ? value : value.replace(/\\r?\\n|\\r/g, ' ')\r\n}\r\n", "/**\r\n * @typedef {import('./types.js').H} H\r\n * @typedef {import('./types.js').Node} Node\r\n * @typedef {import('./types.js').Parent} Parent\r\n * @typedef {import('./types.js').Handle} Handle\r\n * @typedef {import('./types.js').MdastNode} MdastNode\r\n */\r\n\r\nimport {all} from './all.js'\r\nimport {own} from './util/own.js'\r\nimport {wrapText} from './util/wrap-text.js'\r\n\r\n/**\r\n * @param {H} h\r\n * @param {Node} node\r\n * @param {Parent|undefined} parent\r\n * @returns {MdastNode|Array<MdastNode>|void}\r\n */\r\nexport function one(h, node, parent) {\r\n  /** @type {Handle|undefined} */\r\n  let fn\r\n\r\n  if (node.type === 'element') {\r\n    if (node.properties && node.properties.dataMdast === 'ignore') {\r\n      return\r\n    }\r\n\r\n    if (own.call(h.handlers, node.tagName)) {\r\n      fn = h.handlers[node.tagName]\r\n    }\r\n  } else if (own.call(h.handlers, node.type)) {\r\n    fn = h.handlers[node.type]\r\n  }\r\n\r\n  if (typeof fn === 'function') {\r\n    return fn(h, node, parent)\r\n  }\r\n\r\n  return unknown(h, node)\r\n}\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Node} node\r\n */\r\nfunction unknown(h, node) {\r\n  // @ts-expect-error: Looks like a literal.\r\n  if (typeof node.value === 'string') {\r\n    // @ts-expect-error: Looks like a literal.\r\n    return h(node, 'text', wrapText(h, node.value))\r\n  }\r\n\r\n  return all(h, node)\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').MdastNode} MdastNode\r\n * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent\r\n */\r\n\r\nimport extend from 'extend'\r\nimport {phrasing as hastPhrasing} from 'hast-util-phrasing'\r\nimport {phrasing as mdastPhrasing} from 'mdast-util-phrasing'\r\n\r\n/**\r\n * @param {Array<MdastNode>} nodes\r\n */\r\nexport function wrap(nodes) {\r\n  return runs(nodes, onphrasing)\r\n\r\n  /**\r\n   * @param {Array<MdastPhrasingContent>} nodes\r\n   * @returns {MdastNode|Array<MdastNode>}\r\n   */\r\n  function onphrasing(nodes) {\r\n    const head = nodes[0]\r\n\r\n    if (\r\n      nodes.length === 1 &&\r\n      head.type === 'text' &&\r\n      (head.value === ' ' || head.value === '\\n')\r\n    ) {\r\n      return []\r\n    }\r\n\r\n    return {type: 'paragraph', children: nodes}\r\n  }\r\n}\r\n\r\n/**\r\n * Check if there are non-phrasing mdast nodes returned.\r\n * This is needed if a fragment is given, which could just be a sentence, and\r\n * doesn’t need a wrapper paragraph.\r\n *\r\n * @param {Array<MdastNode>} nodes\r\n * @returns {boolean}\r\n */\r\nexport function wrapNeeded(nodes) {\r\n  let index = -1\r\n  /** @type {MdastNode} */\r\n  let node\r\n\r\n  while (++index < nodes.length) {\r\n    node = nodes[index]\r\n\r\n    if (!phrasing(node) || ('children' in node && wrapNeeded(node.children))) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Wrap all runs of mdast phrasing content in `paragraph` nodes.\r\n *\r\n * @param {Array<MdastNode>} nodes\r\n * @param {(nodes: Array<MdastPhrasingContent>) => MdastNode|Array<MdastNode>} onphrasing\r\n * @param {(node: MdastNode) => MdastNode} [onnonphrasing]\r\n */\r\nfunction runs(nodes, onphrasing, onnonphrasing) {\r\n  const nonphrasing = onnonphrasing || identity\r\n  /** @type {Array<MdastNode>} */\r\n  const flattened = flatten(nodes)\r\n  /** @type {Array<MdastNode>} */\r\n  let result = []\r\n  let index = -1\r\n  /** @type {Array<MdastPhrasingContent>|undefined} */\r\n  let queue\r\n  /** @type {MdastNode} */\r\n  let node\r\n\r\n  while (++index < flattened.length) {\r\n    node = flattened[index]\r\n\r\n    if (phrasing(node)) {\r\n      if (!queue) queue = []\r\n      queue.push(node)\r\n    } else {\r\n      if (queue) {\r\n        result = result.concat(onphrasing(queue))\r\n        queue = undefined\r\n      }\r\n\r\n      result = result.concat(nonphrasing(node))\r\n    }\r\n  }\r\n\r\n  if (queue) {\r\n    result = result.concat(onphrasing(queue))\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Flatten a list of nodes.\r\n *\r\n * @param {Array<MdastNode>} nodes\r\n * @returns {Array<MdastNode>}\r\n */\r\nfunction flatten(nodes) {\r\n  /** @type {Array<MdastNode>} */\r\n  let flattened = []\r\n  let index = -1\r\n  /** @type {MdastNode} */\r\n  let node\r\n\r\n  while (++index < nodes.length) {\r\n    node = nodes[index]\r\n\r\n    // Straddling: some elements are *weird*.\r\n    // Namely: `map`, `ins`, `del`, and `a`, as they are hybrid elements.\r\n    // See: <https://html.spec.whatwg.org/#paragraphs>.\r\n    // Paragraphs are the weirdest of them all.\r\n    // See the straddling fixture for more info!\r\n    // `ins` is ignored in mdast, so we don’t need to worry about that.\r\n    // `map` maps to its content, so we don’t need to worry about that either.\r\n    // `del` maps to `delete` and `a` to `link`, so we do handle those.\r\n    // What we’ll do is split `node` over each of its children.\r\n    if (\r\n      (node.type === 'delete' || node.type === 'link') &&\r\n      wrapNeeded(node.children)\r\n    ) {\r\n      flattened = flattened.concat(split(node))\r\n    } else {\r\n      flattened.push(node)\r\n    }\r\n  }\r\n\r\n  return flattened\r\n}\r\n\r\n/**\r\n * @param {MdastNode} node\r\n * @returns {Array<MdastNode>}\r\n */\r\nfunction split(node) {\r\n  // @ts-expect-error Assume parent.\r\n  return runs(node.children, onphrasing, onnonphrasing)\r\n\r\n  /**\r\n   * Use `child`, add `parent` as its first child, put the original children\r\n   * into `parent`.\r\n   * If `child` is not a parent, `parent` will not be added.\r\n   *\r\n   * @param {MdastNode} child\r\n   * @returns {MdastNode}\r\n   */\r\n  function onnonphrasing(child) {\r\n    if ('children' in child && 'children' in node) {\r\n      const {children, ...rest} = node\r\n      return {\r\n        ...child,\r\n        // @ts-expect-error: assume matching parent & child.\r\n        children: [{...extend(true, {}, rest), children: child.children}]\r\n      }\r\n    }\r\n\r\n    return {...child}\r\n  }\r\n\r\n  /**\r\n   * Use `parent`, put the phrasing run inside it.\r\n   *\r\n   * @param {Array<MdastPhrasingContent>} nodes\r\n   * @returns {MdastNode}\r\n   */\r\n  function onphrasing(nodes) {\r\n    // @ts-expect-error: assume parent.\r\n    const {children, ...rest} = node\r\n    // @ts-expect-error: assume matching parent & child.\r\n    return {...extend(true, {}, rest), children: nodes}\r\n  }\r\n}\r\n\r\n/**\r\n * Check if an mdast node is phrasing.\r\n *\r\n * Also supports checking embedded hast fields.\r\n *\r\n * @param {MdastNode} node\r\n * @returns {node is MdastPhrasingContent}\r\n */\r\nfunction phrasing(node) {\r\n  return node.data && node.data.hName\r\n    ? hastPhrasing({\r\n        type: 'element',\r\n        tagName: node.data.hName,\r\n        properties: {},\r\n        children: []\r\n      })\r\n    : mdastPhrasing(node)\r\n}\r\n\r\n/**\r\n * @template {unknown} T\r\n * @param {T} n\r\n * @returns {T}\r\n */\r\nfunction identity(n) {\r\n  return n\r\n}\r\n", "/**\r\n * @typedef {import('unist').Parent} Parent\r\n * @typedef {import('hast').Element} Element\r\n */\r\n\r\n/**\r\n * @typedef {null | undefined | string | TestFunctionAnything | Array<string | TestFunctionAnything>} Test\r\n *   Check for an arbitrary element, unaware of TypeScript inferral.\r\n *\r\n * @callback TestFunctionAnything\r\n *   Check if an element passes a test, unaware of TypeScript inferral.\r\n * @param {Element} element\r\n *   An element.\r\n * @param {number | null | undefined} [index]\r\n *   The element’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The element’s parent.\r\n * @returns {boolean | void}\r\n *   Whether this element passes the test.\r\n */\r\n\r\n/**\r\n * @template {Element} T\r\n *   Element type.\r\n * @typedef {T['tagName'] | TestFunctionPredicate<T> | Array<T['tagName'] | TestFunctionPredicate<T>>} PredicateTest\r\n *   Check for an element that can be inferred by TypeScript.\r\n */\r\n\r\n/**\r\n * Check if an element passes a certain node test.\r\n *\r\n * @template {Element} T\r\n *   Element type.\r\n * @callback TestFunctionPredicate\r\n *   Complex test function for an element that can be inferred by TypeScript.\r\n * @param {Element} element\r\n *   An element.\r\n * @param {number | null | undefined} [index]\r\n *   The element’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The element’s parent.\r\n * @returns {element is T}\r\n *   Whether this element passes the test.\r\n */\r\n\r\n/**\r\n * @callback AssertAnything\r\n *   Check that an arbitrary value is an element, unaware of TypeScript inferral.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is an element and passes a test.\r\n */\r\n\r\n/**\r\n * Check if a node is an element and passes a certain node test\r\n *\r\n * @template {Element} T\r\n *   Element type.\r\n * @callback AssertPredicate\r\n *   Check that an arbitrary value is a specific element, aware of TypeScript.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is T}\r\n *   Whether this is an element and passes a test.\r\n */\r\n\r\n/**\r\n * Check if `node` is an `Element` and whether it passes the given test.\r\n *\r\n * @param node\r\n *   Thing to check, typically `Node`.\r\n * @param test\r\n *   A check for a specific element.\r\n * @param index\r\n *   The node’s position in its parent.\r\n * @param parent\r\n *   The node’s parent.\r\n * @returns\r\n *   Whether `node` is an element and passes a test.\r\n */\r\nexport const isElement =\r\n  /**\r\n   * @type {(\r\n   *   (() => false) &\r\n   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &\r\n   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test | undefined} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function (node, test, index, parent, context) {\r\n      const check = convertElement(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index for child node')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!parent.type || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      // @ts-expect-error Looks like a node.\r\n      if (!node || !node.type || typeof node.type !== 'string') {\r\n        return false\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      return check.call(context, node, index, parent)\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param test\r\n *   *  When nullish, checks if `node` is an `Element`.\r\n *   *  When `string`, works like passing `(element) => element.tagName === test`.\r\n *   *  When `function` checks if function passed the element is true.\r\n *   *  When `array`, checks any one of the subtests pass.\r\n * @returns\r\n *   An assertion.\r\n */\r\nexport const convertElement =\r\n  /**\r\n   * @type {(\r\n   *   (<T extends Element>(test: T['tagName'] | TestFunctionPredicate<T>) => AssertPredicate<T>) &\r\n   *   ((test?: Test) => AssertAnything)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test | null | undefined} [test]\r\n     * @returns {AssertAnything}\r\n     */\r\n    function (test) {\r\n      if (test === undefined || test === null) {\r\n        return element\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return tagNameFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return anyFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or array as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * Handle multiple tests.\r\n *\r\n * @param {Array<string | TestFunctionAnything>} tests\r\n * @returns {AssertAnything}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<AssertAnything>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convertElement(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].call(this, ...parameters)) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for an element with a certain tag name.\r\n *\r\n * @param {string} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction tagNameFactory(check) {\r\n  return tagName\r\n\r\n  /**\r\n   * @param {unknown} node\r\n   * @returns {boolean}\r\n   */\r\n  function tagName(node) {\r\n    return element(node) && node.tagName === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for an element that passes that test.\r\n *\r\n * @param {TestFunctionAnything} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction castFactory(check) {\r\n  return assertion\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {unknown} node\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function assertion(node, ...parameters) {\r\n    // @ts-expect-error: fine.\r\n    return element(node) && Boolean(check.call(this, node, ...parameters))\r\n  }\r\n}\r\n\r\n/**\r\n * Make sure something is an element.\r\n *\r\n * @param {unknown} node\r\n * @returns {node is Element}\r\n */\r\nfunction element(node) {\r\n  return Boolean(\r\n    node &&\r\n      typeof node === 'object' &&\r\n      // @ts-expect-error Looks like a node.\r\n      node.type === 'element' &&\r\n      // @ts-expect-error Looks like an element.\r\n      typeof node.tagName === 'string'\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('hast').Content} Content\r\n */\r\n\r\n/**\r\n * @typedef {Root | Content} Node\r\n */\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Check if `node`is an element and has a `field` property.\r\n *\r\n * @param {unknown} node\r\n *   Thing to check (typically `Element`).\r\n * @param {unknown} field\r\n *   Field name to check (typically `string`).\r\n * @returns {boolean}\r\n *   Whether `node` is an element that has a `field` property.\r\n */\r\nexport function hasProperty(node, field) {\r\n  const value =\r\n    typeof field === 'string' &&\r\n    isNode(node) &&\r\n    node.type === 'element' &&\r\n    node.properties &&\r\n    own.call(node.properties, field) &&\r\n    node.properties[field]\r\n\r\n  return value !== null && value !== undefined && value !== false\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is Node}\r\n */\r\nfunction isNode(value) {\r\n  return Boolean(value && typeof value === 'object' && 'type' in value)\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n */\r\n\r\nimport {convertElement} from 'hast-util-is-element'\r\n\r\n/**\r\n * Check if a node is a *embedded content*.\r\n *\r\n * @type {import('hast-util-is-element').AssertPredicate<Element & {tagName: 'audio' | 'canvas' | 'embed' | 'iframe' | 'img' | 'math' | 'object' | 'picture' | 'svg' | 'video'}>}\r\n * @param value\r\n *   Thing to check (typically `Node`).\r\n * @returns\r\n *   Whether `value` is an element considered embedded content.\r\n *\r\n *   The elements `audio`, `canvas`, `embed`, `iframe`, `img`, `math`,\r\n *   `object`, `picture`, `svg`, and `video` are embedded content.\r\n */\r\n// @ts-expect-error Sure, the assertion matches.\r\nexport const embedded = convertElement([\r\n  'audio',\r\n  'canvas',\r\n  'embed',\r\n  'iframe',\r\n  'img',\r\n  'math',\r\n  'object',\r\n  'picture',\r\n  'svg',\r\n  'video'\r\n])\r\n", "/**\r\n * @fileoverview\r\n *   Check if a `link` element is “Body OK”.\r\n * @longdescription\r\n *   ## Use\r\n *\r\n *   ```js\r\n *   import {h} from 'hastscript'\r\n *   import {isBodyOkLink} from 'hast-util-is-body-ok-link'\r\n *\r\n *   isBodyOkLink(h('link', {itemProp: 'foo'})) //=> true\r\n *   isBodyOkLink(h('link', {rel: ['stylesheet'], href: 'index.css'})) //=> true\r\n *   isBodyOkLink(h('link', {rel: ['author'], href: 'index.css'})) //=> false\r\n *   ```\r\n *\r\n *   ## API\r\n *\r\n *   ### `isBodyOkLink(node)`\r\n *\r\n *   * Return `true` for `link` elements with an `itemProp`\r\n *   * Return `true` for `link` elements with a `rel` list where one or more\r\n *     entries are `pingback`, `prefetch`, or `stylesheet`.\r\n */\r\n\r\nimport {isElement} from 'hast-util-is-element'\r\nimport {hasProperty} from 'hast-util-has-property'\r\n\r\nconst list = new Set(['pingback', 'prefetch', 'stylesheet'])\r\n\r\n/**\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {Root|Root['children'][number]} Node\r\n */\r\n\r\n/**\r\n * Check if a `link` element is “Body OK”.\r\n *\r\n * @param {Node} node\r\n * @returns {boolean}\r\n */\r\nexport function isBodyOkLink(node) {\r\n  if (!isElement(node, 'link')) {\r\n    return false\r\n  }\r\n\r\n  if (hasProperty(node, 'itemProp')) {\r\n    return true\r\n  }\r\n\r\n  const props = node.properties || {}\r\n  const rel = props.rel || []\r\n  let index = -1\r\n\r\n  if (!Array.isArray(rel) || rel.length === 0) {\r\n    return false\r\n  }\r\n\r\n  while (++index < rel.length) {\r\n    if (!list.has(String(rel[index]))) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n", "/**\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('hast').Content} Content\r\n */\r\n\r\n/**\r\n * @typedef {Root | Content} Node\r\n */\r\n\r\nimport {convertElement} from 'hast-util-is-element'\r\nimport {hasProperty} from 'hast-util-has-property'\r\nimport {embedded} from 'hast-util-embedded'\r\nimport {isBodyOkLink} from 'hast-util-is-body-ok-link'\r\n\r\nconst basic = convertElement([\r\n  'a',\r\n  'abbr',\r\n  // `area` is in fact only phrasing if it is inside a `map` element.\r\n  // However, since `area`s are required to be inside a `map` element, and it’s\r\n  // a rather involved check, it’s ignored here for now.\r\n  'area',\r\n  'b',\r\n  'bdi',\r\n  'bdo',\r\n  'br',\r\n  'button',\r\n  'cite',\r\n  'code',\r\n  'data',\r\n  'datalist',\r\n  'del',\r\n  'dfn',\r\n  'em',\r\n  'i',\r\n  'input',\r\n  'ins',\r\n  'kbd',\r\n  'keygen',\r\n  'label',\r\n  'map',\r\n  'mark',\r\n  'meter',\r\n  'noscript',\r\n  'output',\r\n  'progress',\r\n  'q',\r\n  'ruby',\r\n  's',\r\n  'samp',\r\n  'script',\r\n  'select',\r\n  'small',\r\n  'span',\r\n  'strong',\r\n  'sub',\r\n  'sup',\r\n  'template',\r\n  'textarea',\r\n  'time',\r\n  'u',\r\n  'var',\r\n  'wbr'\r\n])\r\n\r\nconst meta = convertElement('meta')\r\n\r\n/**\r\n * Check if the given value is *phrasing* content.\r\n *\r\n * @param {unknown} value\r\n *   Thing to check, typically `Node`.\r\n * @returns {boolean}\r\n *   Whether `value` is phrasing content.\r\n */\r\nexport function phrasing(value) {\r\n  return Boolean(\r\n    node(value) &&\r\n      (value.type === 'text' ||\r\n        basic(value) ||\r\n        embedded(value) ||\r\n        isBodyOkLink(value) ||\r\n        (meta(value) && hasProperty(value, 'itemProp')))\r\n  )\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is Node}\r\n */\r\nfunction node(value) {\r\n  // @ts-expect-error: looks like an object.\r\n  return value && typeof value === 'object' && 'type' in value\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').H} H\r\n * @typedef {import('../types.js').Node} Node\r\n * @typedef {import('../types.js').MdastNode} MdastNode\r\n */\r\n\r\nimport {all} from '../all.js'\r\nimport {wrap} from './wrap.js'\r\n\r\n/**\r\n * @param {H} h\r\n * @param {Node} node\r\n * @returns {Array<MdastNode>}\r\n */\r\nexport function wrapChildren(h, node) {\r\n  return wrap(all(h, node))\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').H} H\r\n */\r\n\r\n/**\r\n * @param {H} h\r\n * @param {string|null|undefined} url\r\n * @returns {string}\r\n */\r\nexport function resolve(h, url) {\r\n  if (url === null || url === undefined) {\r\n    return ''\r\n  }\r\n\r\n  if (h.frozenBaseUrl) {\r\n    return String(new URL(url, h.frozenBaseUrl))\r\n  }\r\n\r\n  return url\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').Properties} Properties\r\n */\r\n\r\nimport {all} from '../all.js'\r\nimport {resolve} from '../util/resolve.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function a(h, node) {\r\n  /** @type {Properties} */\r\n  // @ts-expect-error: `props` are defined.\r\n  const props = node.properties\r\n  return h(\r\n    node,\r\n    'link',\r\n    {\r\n      title: props.title || null,\r\n      url: resolve(h, String(props.href || '') || null)\r\n    },\r\n    all(h, node)\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function base(h, node) {\r\n  if (!h.baseFound) {\r\n    h.frozenBaseUrl =\r\n      String((node.properties && node.properties.href) || '') || null\r\n    h.baseFound = true\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\nimport {wrapChildren} from '../util/wrap-children.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function blockquote(h, node) {\r\n  return h(node, 'blockquote', wrapChildren(h, node))\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function br(h, node) {\r\n  return h.wrapText ? h(node, 'break') : h(node, 'text', ' ')\r\n}\r\n", "/**\r\n * @typedef {import('unist').Parent} Parent\r\n * @typedef {import('hast').Element} Element\r\n */\r\n\r\n/**\r\n * @typedef {null | undefined | string | TestFunctionAnything | Array<string | TestFunctionAnything>} Test\r\n *   Check for an arbitrary element, unaware of TypeScript inferral.\r\n *\r\n * @callback TestFunctionAnything\r\n *   Check if an element passes a test, unaware of TypeScript inferral.\r\n * @param {Element} element\r\n *   An element.\r\n * @param {number | null | undefined} [index]\r\n *   The element’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The element’s parent.\r\n * @returns {boolean | void}\r\n *   Whether this element passes the test.\r\n */\r\n\r\n/**\r\n * @template {Element} T\r\n *   Element type.\r\n * @typedef {T['tagName'] | TestFunctionPredicate<T> | Array<T['tagName'] | TestFunctionPredicate<T>>} PredicateTest\r\n *   Check for an element that can be inferred by TypeScript.\r\n */\r\n\r\n/**\r\n * Check if an element passes a certain node test.\r\n *\r\n * @template {Element} T\r\n *   Element type.\r\n * @callback TestFunctionPredicate\r\n *   Complex test function for an element that can be inferred by TypeScript.\r\n * @param {Element} element\r\n *   An element.\r\n * @param {number | null | undefined} [index]\r\n *   The element’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The element’s parent.\r\n * @returns {element is T}\r\n *   Whether this element passes the test.\r\n */\r\n\r\n/**\r\n * @callback AssertAnything\r\n *   Check that an arbitrary value is an element, unaware of TypeScript inferral.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is an element and passes a test.\r\n */\r\n\r\n/**\r\n * Check if a node is an element and passes a certain node test\r\n *\r\n * @template {Element} T\r\n *   Element type.\r\n * @callback AssertPredicate\r\n *   Check that an arbitrary value is a specific element, aware of TypeScript.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is T}\r\n *   Whether this is an element and passes a test.\r\n */\r\n\r\n/**\r\n * Check if `node` is an `Element` and whether it passes the given test.\r\n *\r\n * @param node\r\n *   Thing to check, typically `Node`.\r\n * @param test\r\n *   A check for a specific element.\r\n * @param index\r\n *   The node’s position in its parent.\r\n * @param parent\r\n *   The node’s parent.\r\n * @returns\r\n *   Whether `node` is an element and passes a test.\r\n */\r\nexport const isElement =\r\n  /**\r\n   * @type {(\r\n   *   (() => false) &\r\n   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &\r\n   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test | undefined} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function (node, test, index, parent, context) {\r\n      const check = convertElement(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index for child node')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!parent.type || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      // @ts-expect-error Looks like a node.\r\n      if (!node || !node.type || typeof node.type !== 'string') {\r\n        return false\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      return check.call(context, node, index, parent)\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param test\r\n *   *  When nullish, checks if `node` is an `Element`.\r\n *   *  When `string`, works like passing `(element) => element.tagName === test`.\r\n *   *  When `function` checks if function passed the element is true.\r\n *   *  When `array`, checks any one of the subtests pass.\r\n * @returns\r\n *   An assertion.\r\n */\r\nexport const convertElement =\r\n  /**\r\n   * @type {(\r\n   *   (<T extends Element>(test: T['tagName'] | TestFunctionPredicate<T>) => AssertPredicate<T>) &\r\n   *   ((test?: Test) => AssertAnything)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test | null | undefined} [test]\r\n     * @returns {AssertAnything}\r\n     */\r\n    function (test) {\r\n      if (test === undefined || test === null) {\r\n        return element\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return tagNameFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return anyFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or array as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * Handle multiple tests.\r\n *\r\n * @param {Array<string | TestFunctionAnything>} tests\r\n * @returns {AssertAnything}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<AssertAnything>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convertElement(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].call(this, ...parameters)) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for an element with a certain tag name.\r\n *\r\n * @param {string} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction tagNameFactory(check) {\r\n  return tagName\r\n\r\n  /**\r\n   * @param {unknown} node\r\n   * @returns {boolean}\r\n   */\r\n  function tagName(node) {\r\n    return element(node) && node.tagName === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for an element that passes that test.\r\n *\r\n * @param {TestFunctionAnything} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction castFactory(check) {\r\n  return assertion\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {unknown} node\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function assertion(node, ...parameters) {\r\n    // @ts-expect-error: fine.\r\n    return element(node) && Boolean(check.call(this, node, ...parameters))\r\n  }\r\n}\r\n\r\n/**\r\n * Make sure something is an element.\r\n *\r\n * @param {unknown} node\r\n * @returns {node is Element}\r\n */\r\nfunction element(node) {\r\n  return Boolean(\r\n    node &&\r\n      typeof node === 'object' &&\r\n      // @ts-expect-error Looks like a node.\r\n      node.type === 'element' &&\r\n      // @ts-expect-error Looks like an element.\r\n      typeof node.tagName === 'string'\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n */\r\n\r\n/**\r\n * @typedef {Record<string, unknown>} Props\r\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\r\n *   Check for an arbitrary node, unaware of TypeScript inferral.\r\n *\r\n * @callback TestFunctionAnything\r\n *   Check if a node passes a test, unaware of TypeScript inferral.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean | void}\r\n *   Whether this node passes the test.\r\n */\r\n\r\n/**\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\r\n *   Check for a node that can be inferred by TypeScript.\r\n */\r\n\r\n/**\r\n * Check if a node passes a certain test.\r\n *\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @callback TestFunctionPredicate\r\n *   Complex test function for a node that can be inferred by TypeScript.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is Kind}\r\n *   Whether this node passes the test.\r\n */\r\n\r\n/**\r\n * @callback AssertAnything\r\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is a node and passes a test.\r\n */\r\n\r\n/**\r\n * Check if a node is a node and passes a certain node test.\r\n *\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @callback AssertPredicate\r\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is Kind}\r\n *   Whether this is a node and passes a test.\r\n */\r\n\r\n/**\r\n * Check if `node` is a `Node` and whether it passes the given test.\r\n *\r\n * @param node\r\n *   Thing to check, typically `Node`.\r\n * @param test\r\n *   A check for a specific node.\r\n * @param index\r\n *   The node’s position in its parent.\r\n * @param parent\r\n *   The node’s parent.\r\n * @returns\r\n *   Whether `node` is a node and passes a test.\r\n */\r\nexport const is =\r\n  /**\r\n   * @type {(\r\n   *   (() => false) &\r\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\r\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\r\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\r\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function is(node, test, index, parent, context) {\r\n      const check = convert(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!is(parent) || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      // @ts-expect-error Looks like a node.\r\n      return node && node.type && typeof node.type === 'string'\r\n        ? Boolean(check.call(context, node, index, parent))\r\n        : false\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param test\r\n *   *   when nullish, checks if `node` is a `Node`.\r\n *   *   when `string`, works like passing `(node) => node.type === test`.\r\n *   *   when `function` checks if function passed the node is true.\r\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\r\n *   *   when `array`, checks if any one of the subtests pass.\r\n * @returns\r\n *   An assertion.\r\n */\r\nexport const convert =\r\n  /**\r\n   * @type {(\r\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\r\n   *   ((test?: Test) => AssertAnything)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test} [test]\r\n     * @returns {AssertAnything}\r\n     */\r\n    function (test) {\r\n      if (test === undefined || test === null) {\r\n        return ok\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return typeFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or object as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * @param {Array<string | Props | TestFunctionAnything>} tests\r\n * @returns {AssertAnything}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<AssertAnything>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convert(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].call(this, ...parameters)) return true\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn an object into a test for a node with a certain fields.\r\n *\r\n * @param {Props} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction propsFactory(check) {\r\n  return castFactory(all)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function all(node) {\r\n    /** @type {string} */\r\n    let key\r\n\r\n    for (key in check) {\r\n      // @ts-expect-error: hush, it sure works as an index.\r\n      if (node[key] !== check[key]) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for a node with a certain type.\r\n *\r\n * @param {string} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction typeFactory(check) {\r\n  return castFactory(type)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  function type(node) {\r\n    return node && node.type === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for a node that passes that test.\r\n *\r\n * @param {TestFunctionAnything} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction castFactory(check) {\r\n  return assertion\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {unknown} node\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function assertion(node, ...parameters) {\r\n    return Boolean(\r\n      node &&\r\n        typeof node === 'object' &&\r\n        'type' in node &&\r\n        // @ts-expect-error: fine.\r\n        Boolean(check.call(this, node, ...parameters))\r\n    )\r\n  }\r\n}\r\n\r\nfunction ok() {\r\n  return true\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n * @typedef {import('unist-util-is').Test} Test\r\n */\r\n\r\nimport {convert} from 'unist-util-is'\r\n\r\n/**\r\n * Find the first node in `parent` after another `node` or after an index,\r\n * that passes `test`.\r\n\r\n * @param parent\r\n *   Parent node.\r\n * @param index\r\n *   Child of `parent` or it’s index.\r\n * @param test\r\n *   `unist-util-is`-compatible test.\r\n * @returns\r\n *   Child of `parent` or `null`.\r\n */\r\nexport const findAfter =\r\n  /**\r\n   * @type {(\r\n   *  (<T extends Node>(node: Parent, index: Node | number, test: import('unist-util-is').PredicateTest<T>) => T | null) &\r\n   *  ((node: Parent, index: Node | number, test?: Test) => Node | null)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Parent} parent\r\n     * @param {Node | number} index\r\n     * @param {Test} [test]\r\n     * @returns {Node | null}\r\n     */\r\n    function (parent, index, test) {\r\n      const is = convert(test)\r\n\r\n      if (!parent || !parent.type || !parent.children) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      if (typeof index === 'number') {\r\n        if (index < 0 || index === Number.POSITIVE_INFINITY) {\r\n          throw new Error('Expected positive finite number as index')\r\n        }\r\n      } else {\r\n        index = parent.children.indexOf(index)\r\n\r\n        if (index < 0) {\r\n          throw new Error('Expected child node or index')\r\n        }\r\n      }\r\n\r\n      while (++index < parent.children.length) {\r\n        if (is(parent.children[index], index, parent)) {\r\n          return parent.children[index]\r\n        }\r\n      }\r\n\r\n      return null\r\n    }\r\n  )\r\n", "/**\r\n * @typedef {import('hast-util-is-element').TestFunctionAnything} TestFunctionAnything\r\n * @typedef {import('hast').Content} Content\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('hast').Comment} Comment\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('hast').Element} Element\r\n */\r\n\r\n/**\r\n * @typedef {Content | Root} Node\r\n *   Any node.\r\n * @typedef {Extract<Node, import('unist').Parent>} Parent\r\n *   Any parent.\r\n * @typedef {'normal' | 'pre' | 'nowrap' | 'pre-wrap'} Whitespace\r\n *   Valid and useful whitespace values (from CSS).\r\n * @typedef {0 | 1 | 2} BreakNumber\r\n *   Specific break:\r\n *\r\n *   *   `0` — space\r\n *   *   `1` — line ending\r\n *   *   `2` — blank line\r\n * @typedef {'\\n'} BreakForce\r\n *   Forced break.\r\n * @typedef {boolean} BreakValue\r\n *   Whether there was a break.\r\n * @typedef {BreakValue | BreakNumber | undefined} BreakBefore\r\n *   Any value for a break before.\r\n * @typedef {BreakValue | BreakNumber | BreakForce | undefined} BreakAfter\r\n *   Any value for a break after.\r\n *\r\n * @typedef CollectionInfo\r\n *   Info on current collection.\r\n * @property {Whitespace} whitespace\r\n *   Current whitespace setting.\r\n * @property {BreakBefore} breakBefore\r\n *   Whether there was a break before.\r\n * @property {BreakAfter} breakAfter\r\n *   Whether there was a break after.\r\n *\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {Whitespace | null | undefined} [whitespace='normal']\r\n *   Initial CSS whitespace setting to use.\r\n */\r\n\r\nimport {convertElement} from 'hast-util-is-element'\r\nimport {findAfter} from 'unist-util-find-after'\r\n\r\nconst searchLineFeeds = /\\n/g\r\nconst searchTabOrSpaces = /[\\t ]+/g\r\n\r\nconst br = convertElement('br')\r\nconst p = convertElement('p')\r\nconst cell = convertElement(['th', 'td'])\r\nconst row = convertElement('tr')\r\n\r\n// Note that we don’t need to include void elements here as they don’t have text.\r\n// See: <https://github.com/wooorm/html-void-elements>\r\nconst notRendered = convertElement([\r\n  // List from: <https://html.spec.whatwg.org/#hidden-elements>\r\n  'datalist',\r\n  'head',\r\n  'noembed',\r\n  'noframes',\r\n  'noscript', // Act as if we support scripting.\r\n  'rp',\r\n  'script',\r\n  'style',\r\n  'template',\r\n  'title',\r\n  // Hidden attribute.\r\n  hidden,\r\n  // From: <https://html.spec.whatwg.org/#flow-content-3>\r\n  closedDialog\r\n])\r\n\r\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\r\nconst blockOrCaption = convertElement([\r\n  'address', // Flow content\r\n  'article', // Sections and headings\r\n  'aside', // Sections and headings\r\n  'blockquote', // Flow content\r\n  'body', // Page\r\n  'caption', // `table-caption`\r\n  'center', // Flow content (legacy)\r\n  'dd', // Lists\r\n  'dialog', // Flow content\r\n  'dir', // Lists (legacy)\r\n  'dl', // Lists\r\n  'dt', // Lists\r\n  'div', // Flow content\r\n  'figure', // Flow content\r\n  'figcaption', // Flow content\r\n  'footer', // Flow content\r\n  'form,', // Flow content\r\n  'h1', // Sections and headings\r\n  'h2', // Sections and headings\r\n  'h3', // Sections and headings\r\n  'h4', // Sections and headings\r\n  'h5', // Sections and headings\r\n  'h6', // Sections and headings\r\n  'header', // Flow content\r\n  'hgroup', // Sections and headings\r\n  'hr', // Flow content\r\n  'html', // Page\r\n  'legend', // Flow content\r\n  'listing', // Flow content (legacy)\r\n  'main', // Flow content\r\n  'menu', // Lists\r\n  'nav', // Sections and headings\r\n  'ol', // Lists\r\n  'p', // Flow content\r\n  'plaintext', // Flow content (legacy)\r\n  'pre', // Flow content\r\n  'section', // Sections and headings\r\n  'ul', // Lists\r\n  'xmp' // Flow content (legacy)\r\n])\r\n\r\n/**\r\n * Get the plain-text value of a node.\r\n *\r\n * ###### Algorithm\r\n *\r\n * *   if `tree` is a comment, returns its `value`\r\n * *   if `tree` is a text, applies normal whitespace collapsing to its\r\n *     `value`, as defined by the CSS Text spec\r\n * *   if `tree` is a root or element, applies an algorithm similar to the\r\n *     `innerText` getter as defined by HTML\r\n *\r\n * ###### Notes\r\n *\r\n * > 👉 **Note**: the algorithm acts as if `tree` is being rendered, and as if\r\n * > we’re a CSS-supporting user agent, with scripting enabled.\r\n *\r\n * *   if `tree` is an element that is not displayed (such as a `head`), we’ll\r\n *     still use the `innerText` algorithm instead of switching to `textContent`\r\n * *   if descendants of `tree` are elements that are not displayed, they are\r\n *     ignored\r\n * *   CSS is not considered, except for the default user agent style sheet\r\n * *   a line feed is collapsed instead of ignored in cases where Fullwidth, Wide,\r\n *     or Halfwidth East Asian Width characters are used, the same goes for a case\r\n *     with Chinese, Japanese, or Yi writing systems\r\n * *   replaced elements (such as `audio`) are treated like non-replaced elements\r\n *\r\n * @param {Node} tree\r\n *   Tree to turn into text.\r\n * @param {Options} [options]\r\n *   Configuration (optional).\r\n * @returns {string}\r\n *   Serialized `tree`.\r\n */\r\nexport function toText(tree, options = {}) {\r\n  const children = 'children' in tree ? tree.children : []\r\n  const block = blockOrCaption(tree)\r\n  const whitespace = inferWhitespace(tree, {\r\n    whitespace: options.whitespace || 'normal',\r\n    breakBefore: false,\r\n    breakAfter: false\r\n  })\r\n\r\n  /** @type {Array<string | BreakNumber>} */\r\n  const results = []\r\n\r\n  // Treat `text` and `comment` as having normal white-space.\r\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\r\n  // returned.\r\n  // If you want that behavior use `hast-util-to-string`.\r\n  // All other nodes are later handled as if they are `element`s (so the\r\n  // algorithm also works on a `root`).\r\n  // Nodes without children are treated as a void element, so `doctype` is thus\r\n  // ignored.\r\n  if (tree.type === 'text' || tree.type === 'comment') {\r\n    results.push(\r\n      ...collectText(tree, {\r\n        whitespace,\r\n        breakBefore: true,\r\n        breakAfter: true\r\n      })\r\n    )\r\n  }\r\n\r\n  // 1.  If this element is not being rendered, or if the user agent is a\r\n  //     non-CSS user agent, then return the same value as the textContent IDL\r\n  //     attribute on this element.\r\n  //\r\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\r\n  //     is rendered.\r\n  //\r\n  //     If you want that behavior use `hast-util-to-string`.\r\n  //     Important: we’ll have to account for this later though.\r\n\r\n  // 2.  Let results be a new empty list.\r\n  let index = -1\r\n\r\n  // 3.  For each child node node of this element:\r\n  while (++index < children.length) {\r\n    // 3.1. Let current be the list resulting in running the inner text\r\n    //      collection steps with node.\r\n    //      Each item in results will either be a JavaScript string or a\r\n    //      positive integer (a required line break count).\r\n    // 3.2. For each item item in current, append item to results.\r\n    results.push(\r\n      // @ts-expect-error Looks like a parent.\r\n      ...innerTextCollection(children[index], tree, {\r\n        whitespace,\r\n        breakBefore: index ? undefined : block,\r\n        breakAfter:\r\n          index < children.length - 1 ? br(children[index + 1]) : block\r\n      })\r\n    )\r\n  }\r\n\r\n  // 4.  Remove any items from results that are the empty string.\r\n  // 5.  Remove any runs of consecutive required line break count items at the\r\n  //     start or end of results.\r\n  // 6.  Replace each remaining run of consecutive required line break count\r\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\r\n  //     characters as the maximum of the values in the required line break\r\n  //     count items.\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  /** @type {number | undefined} */\r\n  let count\r\n\r\n  index = -1\r\n\r\n  while (++index < results.length) {\r\n    const value = results[index]\r\n\r\n    if (typeof value === 'number') {\r\n      if (count !== undefined && value > count) count = value\r\n    } else if (value) {\r\n      if (count !== undefined && count > -1) {\r\n        result.push('\\n'.repeat(count) || ' ')\r\n      }\r\n\r\n      count = -1\r\n      result.push(value)\r\n    }\r\n  }\r\n\r\n  // 7.  Return the concatenation of the string items in results.\r\n  return result.join('')\r\n}\r\n\r\n/**\r\n * <https://html.spec.whatwg.org/#inner-text-collection-steps>\r\n *\r\n * @param {Node} node\r\n * @param {Parent} parent\r\n * @param {CollectionInfo} info\r\n * @returns {Array<string | BreakNumber>}\r\n */\r\nfunction innerTextCollection(node, parent, info) {\r\n  if (node.type === 'element') {\r\n    return collectElement(node, parent, info)\r\n  }\r\n\r\n  if (node.type === 'text') {\r\n    return info.whitespace === 'normal'\r\n      ? collectText(node, info)\r\n      : collectPreText(node)\r\n  }\r\n\r\n  return []\r\n}\r\n\r\n/**\r\n * Collect an element.\r\n *\r\n * @param {Element} node\r\n *   Element node.\r\n * @param {Parent} parent\r\n * @param {CollectionInfo} info\r\n *   Info on current collection.\r\n * @returns {Array<string | BreakNumber>}\r\n */\r\nfunction collectElement(node, parent, info) {\r\n  // First we infer the `white-space` property.\r\n  const whitespace = inferWhitespace(node, info)\r\n  const children = node.children || []\r\n  let index = -1\r\n  /** @type {Array<string | BreakNumber>} */\r\n  let items = []\r\n\r\n  // We’re ignoring point 3, and exiting without any content here, because we\r\n  // deviated from the spec in `toText` at step 3.\r\n  if (notRendered(node)) {\r\n    return items\r\n  }\r\n\r\n  /** @type {BreakNumber | undefined} */\r\n  let prefix\r\n  /** @type {BreakNumber | BreakForce | undefined} */\r\n  let suffix\r\n  // Note: we first detect if there is going to be a break before or after the\r\n  // contents, as that changes the white-space handling.\r\n\r\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\r\n  //     items.\r\n  //\r\n  //     Note: Ignored, as everything is visible by default user agent styles.\r\n\r\n  // 3.  If node is not being rendered, then return items. [...]\r\n  //\r\n  //     Note: We already did this above.\r\n\r\n  // See `collectText` for step 4.\r\n\r\n  // 5.  If node is a `<br>` element, then append a string containing a single\r\n  //     U+000A LINE FEED (LF) character to items.\r\n  if (br(node)) {\r\n    suffix = '\\n'\r\n  }\r\n\r\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\r\n  //     box is not the last `table-row` box of the nearest ancestor `table`\r\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\r\n  //     character to items.\r\n  //\r\n  //     See: <https://html.spec.whatwg.org/#tables-2>\r\n  //     Note: needs further investigation as this does not account for implicit\r\n  //     rows.\r\n  else if (row(node) && findAfter(parent, node, row)) {\r\n    suffix = '\\n'\r\n  }\r\n\r\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\r\n  //     at the beginning and end of items.\r\n  else if (p(node)) {\r\n    prefix = 2\r\n    suffix = 2\r\n  }\r\n\r\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\r\n  //     then append 1 (a required line break count) at the beginning and end of\r\n  //     items.\r\n  else if (blockOrCaption(node)) {\r\n    prefix = 1\r\n    suffix = 1\r\n  }\r\n\r\n  // 1.  Let items be the result of running the inner text collection steps with\r\n  //     each child node of node in tree order, and then concatenating the\r\n  //     results to a single list.\r\n  while (++index < children.length) {\r\n    items = items.concat(\r\n      innerTextCollection(children[index], node, {\r\n        whitespace,\r\n        breakBefore: index ? undefined : prefix,\r\n        breakAfter:\r\n          index < children.length - 1 ? br(children[index + 1]) : suffix\r\n      })\r\n    )\r\n  }\r\n\r\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\r\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\r\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\r\n  //     (tab) character to items.\r\n  //\r\n  //     See: <https://html.spec.whatwg.org/#tables-2>\r\n  if (cell(node) && findAfter(parent, node, cell)) {\r\n    items.push('\\t')\r\n  }\r\n\r\n  // Add the pre- and suffix.\r\n  if (prefix) items.unshift(prefix)\r\n  if (suffix) items.push(suffix)\r\n\r\n  return items\r\n}\r\n\r\n/**\r\n * 4.  If node is a Text node, then for each CSS text box produced by node,\r\n *     in content order, compute the text of the box after application of the\r\n *     CSS `white-space` processing rules and `text-transform` rules, set\r\n *     items to the list of the resulting strings, and return items.\r\n *     The CSS `white-space` processing rules are slightly modified:\r\n *     collapsible spaces at the end of lines are always collapsed, but they\r\n *     are only removed if the line is the last line of the block, or it ends\r\n *     with a br element.\r\n *     Soft hyphens should be preserved.\r\n *\r\n *     Note: See `collectText` and `collectPreText`.\r\n *     Note: we don’t deal with `text-transform`, no element has that by\r\n *     default.\r\n *\r\n * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\r\n *\r\n * @param {Text | Comment} node\r\n *   Text node.\r\n * @param {CollectionInfo} info\r\n *   Info on current collection.\r\n * @returns {Array<string | BreakNumber>}\r\n *   Result.\r\n */\r\nfunction collectText(node, info) {\r\n  const value = String(node.value)\r\n  /** @type {Array<string>} */\r\n  const lines = []\r\n  /** @type {Array<string | BreakNumber>} */\r\n  const result = []\r\n  let start = 0\r\n\r\n  while (start <= value.length) {\r\n    searchLineFeeds.lastIndex = start\r\n\r\n    const match = searchLineFeeds.exec(value)\r\n    const end = match && 'index' in match ? match.index : value.length\r\n\r\n    lines.push(\r\n      // Any sequence of collapsible spaces and tabs immediately preceding or\r\n      // following a segment break is removed.\r\n      trimAndCollapseSpacesAndTabs(\r\n        // […] ignoring bidi formatting characters (characters with the\r\n        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\r\n        // they were not there.\r\n        value\r\n          .slice(start, end)\r\n          .replace(/[\\u061C\\u200E\\u200F\\u202A-\\u202E\\u2066-\\u2069]/g, ''),\r\n        start === 0 ? info.breakBefore : true,\r\n        end === value.length ? info.breakAfter : true\r\n      )\r\n    )\r\n\r\n    start = end + 1\r\n  }\r\n\r\n  // Collapsible segment breaks are transformed for rendering according to the\r\n  // segment break transformation rules.\r\n  // So here we jump to 4.1.2 of [CSSTEXT]:\r\n  // Any collapsible segment break immediately following another collapsible\r\n  // segment break is removed\r\n  let index = -1\r\n  /** @type {BreakNumber | undefined} */\r\n  let join\r\n\r\n  while (++index < lines.length) {\r\n    // *   If the character immediately before or immediately after the segment\r\n    //     break is the zero-width space character (U+200B), then the break is\r\n    //     removed, leaving behind the zero-width space.\r\n    if (\r\n      lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ ||\r\n      (index < lines.length - 1 &&\r\n        lines[index + 1].charCodeAt(0) === 0x200b) /* ZWSP */\r\n    ) {\r\n      result.push(lines[index])\r\n      join = undefined\r\n    }\r\n\r\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\r\n    //     character before and after the segment break is Fullwidth, Wide, or\r\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\r\n    //     segment break is removed.\r\n    //\r\n    //     Note: ignored.\r\n    // *   Otherwise, if the writing system of the segment break is Chinese,\r\n    //     Japanese, or Yi, and the character before or after the segment break\r\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\r\n    //     has an East Asian Width property of Ambiguous, and the character on\r\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\r\n    //     and not Hangul, then the segment break is removed.\r\n    //\r\n    //     Note: ignored.\r\n\r\n    // *   Otherwise, the segment break is converted to a space (U+0020).\r\n    else if (lines[index]) {\r\n      if (typeof join === 'number') result.push(join)\r\n      result.push(lines[index])\r\n      join = 0\r\n    } else if (index === 0 || index === lines.length - 1) {\r\n      // If this line is empty, and it’s the first or last, add a space.\r\n      // Note that this function is only called in normal whitespace, so we\r\n      // don’t worry about `pre`.\r\n      result.push(0)\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Collect a text node as “pre” whitespace.\r\n *\r\n * @param {Text} node\r\n *   Text node.\r\n * @returns {Array<string | BreakNumber>}\r\n *   Result.\r\n */\r\nfunction collectPreText(node) {\r\n  return [String(node.value)]\r\n}\r\n\r\n/**\r\n * 3.  Every collapsible tab is converted to a collapsible space (U+0020).\r\n * 4.  Any collapsible space immediately following another collapsible\r\n *     space—even one outside the boundary of the inline containing that\r\n *     space, provided both spaces are within the same inline formatting\r\n *     context—is collapsed to have zero advance width. (It is invisible,\r\n *     but retains its soft wrap opportunity, if any.)\r\n *\r\n * @param {string} value\r\n *   Value to collapse.\r\n * @param {BreakBefore} breakBefore\r\n *   Whether there was a break before.\r\n * @param {BreakAfter} breakAfter\r\n *   Whether there was a break after.\r\n * @returns {string}\r\n *   Result.\r\n */\r\nfunction trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  let start = 0\r\n  /** @type {number | undefined} */\r\n  let end\r\n\r\n  while (start < value.length) {\r\n    searchTabOrSpaces.lastIndex = start\r\n    const match = searchTabOrSpaces.exec(value)\r\n    end = match ? match.index : value.length\r\n\r\n    // If we’re not directly after a segment break, but there was white space,\r\n    // add an empty value that will be turned into a space.\r\n    if (!start && !end && match && !breakBefore) {\r\n      result.push('')\r\n    }\r\n\r\n    if (start !== end) {\r\n      result.push(value.slice(start, end))\r\n    }\r\n\r\n    start = match ? end + match[0].length : end\r\n  }\r\n\r\n  // If we reached the end, there was trailing white space, and there’s no\r\n  // segment break after this node, add an empty value that will be turned\r\n  // into a space.\r\n  if (start !== end && !breakAfter) {\r\n    result.push('')\r\n  }\r\n\r\n  return result.join(' ')\r\n}\r\n\r\n/**\r\n * Figure out the whitespace of a node.\r\n *\r\n * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\r\n *\r\n * @param {Node} node\r\n *   Node (typically `Element`).\r\n * @param {CollectionInfo} info\r\n *   Info on current collection.\r\n * @returns {Whitespace}\r\n *   Applied whitespace.\r\n */\r\nfunction inferWhitespace(node, info) {\r\n  if (node.type === 'element') {\r\n    const props = node.properties || {}\r\n    switch (node.tagName) {\r\n      case 'listing':\r\n      case 'plaintext':\r\n      case 'xmp': {\r\n        return 'pre'\r\n      }\r\n\r\n      case 'nobr': {\r\n        return 'nowrap'\r\n      }\r\n\r\n      case 'pre': {\r\n        return props.wrap ? 'pre-wrap' : 'pre'\r\n      }\r\n\r\n      case 'td':\r\n      case 'th': {\r\n        return props.noWrap ? 'nowrap' : info.whitespace\r\n      }\r\n\r\n      case 'textarea': {\r\n        return 'pre-wrap'\r\n      }\r\n\r\n      default:\r\n    }\r\n  }\r\n\r\n  return info.whitespace\r\n}\r\n\r\n/** @type {TestFunctionAnything} */\r\nfunction hidden(node) {\r\n  return Boolean((node.properties || {}).hidden)\r\n}\r\n\r\n/** @type {TestFunctionAnything} */\r\nfunction closedDialog(node) {\r\n  return node.tagName === 'dialog' && !(node.properties || {}).open\r\n}\r\n", "/**\r\n * Remove final line endings from `value`\r\n *\r\n * @param {unknown} value\r\n *   Value with trailing line endings, coerced to string.\r\n * @return {string}\r\n *   Value without trailing line endings.\r\n */\r\nexport function trimTrailingLines(value) {\r\n  const input = String(value)\r\n  let end = input.length\r\n\r\n  while (end > 0) {\r\n    const code = input.codePointAt(end - 1)\r\n    if (code !== undefined && (code === 10 || code === 13)) {\r\n      end--\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n\r\n  return input.slice(0, end)\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').ElementChild} ElementChild\r\n */\r\n\r\nimport {convertElement} from 'hast-util-is-element'\r\nimport {toText} from 'hast-util-to-text'\r\nimport {trimTrailingLines} from 'trim-trailing-lines'\r\nimport {wrapText} from '../util/wrap-text.js'\r\n\r\nconst prefix = 'language-'\r\n\r\nconst pre = convertElement('pre')\r\nconst isCode = convertElement('code')\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function code(h, node) {\r\n  const children = node.children\r\n  let index = -1\r\n  /** @type {Array<string|number>|undefined} */\r\n  let classList\r\n  /** @type {string|undefined} */\r\n  let lang\r\n\r\n  if (pre(node)) {\r\n    while (++index < children.length) {\r\n      const child = children[index]\r\n\r\n      if (\r\n        isCode(child) &&\r\n        child.properties &&\r\n        child.properties.className &&\r\n        Array.isArray(child.properties.className)\r\n      ) {\r\n        classList = child.properties.className\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  if (classList) {\r\n    index = -1\r\n\r\n    while (++index < classList.length) {\r\n      if (String(classList[index]).slice(0, prefix.length) === prefix) {\r\n        lang = String(classList[index]).slice(prefix.length)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  return h(\r\n    node,\r\n    'code',\r\n    {lang: lang || null, meta: null},\r\n    trimTrailingLines(wrapText(h, toText(node)))\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Comment} Comment\r\n */\r\nimport {wrapText} from '../util/wrap-text.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Comment} node\r\n */\r\nexport function comment(h, node) {\r\n  return h(node, 'html', '<!--' + wrapText(h, node.value) + '-->')\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\nimport {all} from '../all.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function del(h, node) {\r\n  return h(node, 'delete', all(h, node))\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').MdastListContent} MdastListContent\r\n */\r\n\r\n/**\r\n * @param {Array<MdastListContent>} children\r\n * @returns {boolean}\r\n */\r\nexport function listItemsSpread(children) {\r\n  let index = -1\r\n\r\n  if (children.length > 1) {\r\n    while (++index < children.length) {\r\n      if (children[index].spread) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').H} H\r\n * @typedef {import('../types.js').Child} Child\r\n * @typedef {import('../types.js').MdastListContent} MdastListContent\r\n */\r\n\r\nimport {all} from '../all.js'\r\n\r\n/**\r\n * @param {H} h\r\n * @param {Child} node\r\n * @returns {Array<MdastListContent>}\r\n */\r\nexport function wrapListItems(h, node) {\r\n  const children = all(h, node)\r\n  let index = -1\r\n\r\n  while (++index < children.length) {\r\n    const child = children[index]\r\n    if (child.type !== 'listItem') {\r\n      children[index] = {\r\n        type: 'listItem',\r\n        spread: false,\r\n        checked: null,\r\n        // @ts-expect-error Assume `children[index]` is block content.\r\n        children: [child]\r\n      }\r\n    }\r\n  }\r\n\r\n  // @ts-expect-error Assume all `listItem`s\r\n  return children\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').H} H\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').ElementChild} ElementChild\r\n * @typedef {import('../types.js').MdastNode} MdastNode\r\n * @typedef {import('../types.js').MdastListContent} MdastListContent\r\n * @typedef {import('../types.js').MdastBlockContent} MdastBlockContent\r\n * @typedef {import('../types.js').MdastDefinitionContent} MdastDefinitionContent\r\n *\r\n * @typedef Group\r\n * @property {Array<Element>} titles\r\n * @property {Array<ElementChild>} definitions\r\n */\r\n\r\nimport {convertElement} from 'hast-util-is-element'\r\nimport {listItemsSpread} from '../util/list-items-spread.js'\r\nimport {wrapListItems} from '../util/wrap-list-items.js'\r\n\r\nconst div = convertElement('div')\r\nconst dt = convertElement('dt')\r\nconst dd = convertElement('dd')\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function dl(h, node) {\r\n  const children = node.children\r\n  let index = -1\r\n  /** @type {Array<ElementChild>} */\r\n  let clean = []\r\n  /** @type {Array<Group>} */\r\n  const groups = []\r\n  /** @type {Group} */\r\n  let group = {titles: [], definitions: []}\r\n  /** @type {ElementChild} */\r\n  let child\r\n  /** @type {Array<MdastBlockContent|MdastDefinitionContent>} */\r\n  let result\r\n\r\n  // Unwrap `<div>`s\r\n  while (++index < children.length) {\r\n    child = children[index]\r\n    clean = clean.concat(div(child) ? child.children : child)\r\n  }\r\n\r\n  index = -1\r\n\r\n  // Group titles and definitions.\r\n  while (++index < clean.length) {\r\n    child = clean[index]\r\n\r\n    if (dt(child)) {\r\n      if (dd(clean[index - 1])) {\r\n        groups.push(group)\r\n        group = {titles: [], definitions: []}\r\n      }\r\n\r\n      group.titles.push(child)\r\n    } else {\r\n      group.definitions.push(child)\r\n    }\r\n  }\r\n\r\n  groups.push(group)\r\n\r\n  // Create items.\r\n  index = -1\r\n  /** @type {Array<MdastListContent>} */\r\n  const content = []\r\n\r\n  while (++index < groups.length) {\r\n    result = [\r\n      ...handle(h, groups[index].titles),\r\n      ...handle(h, groups[index].definitions)\r\n    ]\r\n\r\n    if (result.length > 0) {\r\n      content.push({\r\n        type: 'listItem',\r\n        spread: result.length > 1,\r\n        checked: null,\r\n        children: result\r\n      })\r\n    }\r\n  }\r\n\r\n  // Create a list if there are items.\r\n  if (content.length > 0) {\r\n    return h(\r\n      node,\r\n      'list',\r\n      {ordered: false, start: null, spread: listItemsSpread(content)},\r\n      content\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * @param {H} h\r\n * @param {Array<ElementChild>} children\r\n * @returns {Array<MdastBlockContent|MdastDefinitionContent>}\r\n */\r\nfunction handle(h, children) {\r\n  const nodes = wrapListItems(h, {type: 'element', tagName: 'x', children})\r\n\r\n  if (nodes.length === 0) {\r\n    return []\r\n  }\r\n\r\n  if (nodes.length === 1) {\r\n    return nodes[0].children\r\n  }\r\n\r\n  return [\r\n    {\r\n      type: 'list',\r\n      ordered: false,\r\n      start: null,\r\n      spread: listItemsSpread(nodes),\r\n      children: nodes\r\n    }\r\n  ]\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\nimport {all} from '../all.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function em(h, node) {\r\n  return h(node, 'emphasis', all(h, node))\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').MdastNode} MdastNode\r\n */\r\n\r\nimport {all} from '../all.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function heading(h, node) {\r\n  // `else` shouldn’t happen, of course…\r\n  /* c8 ignore next */\r\n  const depth = Number(node.tagName.charAt(1)) || 1\r\n  const wrap = h.wrapText\r\n\r\n  h.wrapText = false\r\n  const result = h(node, 'heading', {depth}, all(h, node))\r\n  h.wrapText = wrap\r\n\r\n  return result\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function hr(h, node) {\r\n  return h(node, 'thematicBreak')\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').Properties} Properties\r\n */\r\n\r\nimport {resolve} from '../util/resolve.js'\r\nimport {wrapText} from '../util/wrap-text.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function iframe(h, node) {\r\n  /** @type {Properties} */\r\n  // @ts-expect-error: `props` are defined.\r\n  const props = node.properties\r\n  const src = String(props.src || '')\r\n  const title = String(props.title || '')\r\n\r\n  // Only create a link if there is a title.\r\n  // We can’t use the content of the frame because conforming HTML parsers treat\r\n  // it as text, whereas legacy parsers treat it as HTML, so it will likely\r\n  // contain tags that will show up in text.\r\n  if (src && title) {\r\n    return {\r\n      type: 'link',\r\n      title: null,\r\n      url: resolve(h, src),\r\n      children: [{type: 'text', value: wrapText(h, title)}]\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').Properties} Properties\r\n */\r\n\r\nimport {resolve} from '../util/resolve.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function img(h, node) {\r\n  /** @type {Properties} */\r\n  // @ts-expect-error: `props` are defined.\r\n  const props = node.properties\r\n  return h(node, 'image', {\r\n    url: resolve(h, String(props.src || '') || null),\r\n    title: props.title || null,\r\n    alt: props.alt || ''\r\n  })\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\nimport {toText} from 'hast-util-to-text'\r\nimport {wrapText} from '../util/wrap-text.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function inlineCode(h, node) {\r\n  return h(node, 'inlineCode', wrapText(h, toText(node)))\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').H} H\r\n * @typedef {import('../types.js').Parent} Parent\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').Child} Child\r\n * @typedef {import('../types.js').Properties} Properties\r\n */\r\n\r\nimport {hasProperty} from 'hast-util-has-property'\r\nimport {convertElement} from 'hast-util-is-element'\r\nimport {toText} from 'hast-util-to-text'\r\nimport {wrapText} from './wrap-text.js'\r\n\r\nconst option = convertElement('option')\r\n\r\n/**\r\n * @param {H} h\r\n * @param {Element} node\r\n * @param {Properties} [properties]\r\n * @returns {Array<[string, string|null]>}\r\n */\r\nexport function findSelectedOptions(h, node, properties) {\r\n  /** @type {Properties} */\r\n  // @ts-expect-error: `props` exist.\r\n  const props = properties || node.properties\r\n  let options = findOptions(node)\r\n  const size =\r\n    Math.min(Number.parseInt(String(props.size), 10), 0) ||\r\n    (props.multiple ? 4 : 1)\r\n  let index = -1\r\n  /** @type {Array<Element>} */\r\n  const selectedOptions = []\r\n  /** @type {Array<[string, string|null]>} */\r\n  const values = []\r\n\r\n  while (++index < options.length) {\r\n    if (hasProperty(options[index], 'selected')) {\r\n      selectedOptions.push(options[index])\r\n    }\r\n  }\r\n\r\n  const list = selectedOptions.length > 0 ? selectedOptions : options\r\n  options = list.slice(0, size)\r\n  index = -1\r\n\r\n  while (++index < options.length) {\r\n    const option = options[index]\r\n    const content = wrapText(h, toText(option))\r\n    /** @type {Properties} */\r\n    // @ts-expect-error: `props` exist.\r\n    const props = option.properties\r\n    const label = content || String(props.label || '')\r\n    const value = String(props.value || '') || content\r\n    values.push([value, label === value ? null : label])\r\n  }\r\n\r\n  return values\r\n}\r\n\r\n/**\r\n * @param {Parent} node\r\n */\r\nfunction findOptions(node) {\r\n  const children = node.children\r\n  let index = -1\r\n  /** @type {Array<Element>} */\r\n  let results = []\r\n  /** @type {Child} */\r\n  let child\r\n\r\n  while (++index < children.length) {\r\n    child = children[index]\r\n\r\n    // @ts-expect-error Looks like a parent.\r\n    if (Array.isArray(child.children)) {\r\n      // @ts-expect-error Looks like a parent.\r\n      results = results.concat(findOptions(child))\r\n    }\r\n\r\n    if (option(child) && !hasProperty(child, 'disabled')) {\r\n      results.push(child)\r\n    }\r\n  }\r\n\r\n  return results\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').Properties} Properties\r\n * @typedef {import('../types.js').MdastNode} MdastNode\r\n */\r\n\r\nimport {convertElement} from 'hast-util-is-element'\r\nimport {findSelectedOptions} from '../util/find-selected-options.js'\r\nimport {own} from '../util/own.js'\r\nimport {resolve} from '../util/resolve.js'\r\nimport {wrapText} from '../util/wrap-text.js'\r\n\r\nconst datalist = convertElement('datalist')\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\n// eslint-disable-next-line complexity\r\nexport function input(h, node) {\r\n  /** @type {Properties} */\r\n  // @ts-expect-error: `props` are defined.\r\n  const props = node.properties\r\n  let value = String(props.value || props.placeholder || '')\r\n  /** @type {Array<MdastNode>} */\r\n  const results = []\r\n  /** @type {Array<string>} */\r\n  const texts = []\r\n  /** @type {Array<[string, string|null]>} */\r\n  let values = []\r\n  let index = -1\r\n  /** @type {string} */\r\n  let list\r\n\r\n  if (props.disabled || props.type === 'hidden' || props.type === 'file') {\r\n    return\r\n  }\r\n\r\n  if (props.type === 'checkbox' || props.type === 'radio') {\r\n    return h(\r\n      node,\r\n      'text',\r\n      wrapText(h, h[props.checked ? 'checked' : 'unchecked'])\r\n    )\r\n  }\r\n\r\n  if (props.type === 'image') {\r\n    return props.alt || value\r\n      ? h(node, 'image', {\r\n          url: resolve(h, String(props.src || '') || null),\r\n          title: wrapText(h, String(props.title || '')) || null,\r\n          alt: wrapText(h, String(props.alt || value))\r\n        })\r\n      : []\r\n  }\r\n\r\n  if (value) {\r\n    values = [[value, null]]\r\n  } else if (\r\n    // `list` is not supported on these types:\r\n    props.type !== 'password' &&\r\n    props.type !== 'file' &&\r\n    props.type !== 'submit' &&\r\n    props.type !== 'reset' &&\r\n    props.type !== 'button' &&\r\n    props.list\r\n  ) {\r\n    list = String(props.list).toUpperCase()\r\n\r\n    if (own.call(h.nodeById, list) && datalist(h.nodeById[list])) {\r\n      values = findSelectedOptions(h, h.nodeById[list], props)\r\n    }\r\n  }\r\n\r\n  if (values.length === 0) {\r\n    return\r\n  }\r\n\r\n  // Hide password value.\r\n  if (props.type === 'password') {\r\n    // Passwords don’t support `list`.\r\n    values[0] = ['•'.repeat(values[0][0].length), null]\r\n  }\r\n\r\n  if (props.type === 'url' || props.type === 'email') {\r\n    while (++index < values.length) {\r\n      value = resolve(h, values[index][0])\r\n\r\n      results.push(\r\n        h(\r\n          node,\r\n          'link',\r\n          {\r\n            title: null,\r\n            url: wrapText(h, props.type === 'email' ? 'mailto:' + value : value)\r\n          },\r\n          [{type: 'text', value: wrapText(h, values[index][1] || value)}]\r\n        )\r\n      )\r\n\r\n      if (index !== values.length - 1) {\r\n        results.push({type: 'text', value: ', '})\r\n      }\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  while (++index < values.length) {\r\n    texts.push(\r\n      values[index][1]\r\n        ? values[index][1] + ' (' + values[index][0] + ')'\r\n        : values[index][0]\r\n    )\r\n  }\r\n\r\n  return h(node, 'text', wrapText(h, texts.join(', ')))\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').ElementChild} ElementChild\r\n * @typedef {import('../types.js').MdastNode} MdastNode\r\n */\r\n\r\nimport {convertElement} from 'hast-util-is-element'\r\nimport {wrapChildren} from '../util/wrap-children.js'\r\n\r\nconst p = convertElement('p')\r\nconst input = convertElement('input')\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function li(h, node) {\r\n  const head = node.children[0]\r\n  /** @type {boolean|null} */\r\n  let checked = null\r\n  /** @type {ElementChild} */\r\n  let checkbox\r\n  /** @type {Element|undefined} */\r\n  let clone\r\n\r\n  // Check if this node starts with a checkbox.\r\n  if (p(head)) {\r\n    checkbox = head.children[0]\r\n\r\n    if (\r\n      input(checkbox) &&\r\n      checkbox.properties &&\r\n      (checkbox.properties.type === 'checkbox' ||\r\n        checkbox.properties.type === 'radio')\r\n    ) {\r\n      checked = Boolean(checkbox.properties.checked)\r\n      clone = {\r\n        ...node,\r\n        children: [\r\n          {...head, children: head.children.slice(1)},\r\n          ...node.children.slice(1)\r\n        ]\r\n      }\r\n    }\r\n  }\r\n\r\n  const content = wrapChildren(h, clone || node)\r\n\r\n  return h(node, 'listItem', {spread: content.length > 1, checked}, content)\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\nimport {convertElement} from 'hast-util-is-element'\r\nimport {hasProperty} from 'hast-util-has-property'\r\nimport {listItemsSpread} from '../util/list-items-spread.js'\r\nimport {wrapListItems} from '../util/wrap-list-items.js'\r\n\r\nconst ol = convertElement('ol')\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function list(h, node) {\r\n  const ordered = ol(node)\r\n  const children = wrapListItems(h, node)\r\n  /** @type {number|null} */\r\n  let start = null\r\n\r\n  if (ordered) {\r\n    start = hasProperty(node, 'start')\r\n      ? // @ts-expect-error: `props` exist.\r\n        Number.parseInt(String(node.properties.start), 10)\r\n      : 1\r\n  }\r\n\r\n  return h(\r\n    node,\r\n    'list',\r\n    {ordered, start, spread: listItemsSpread(children)},\r\n    children\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').Properties} Properties\r\n * @typedef {import('../types.js').ElementChild} ElementChild\r\n */\r\n\r\nimport {convertElement} from 'hast-util-is-element'\r\nimport {toString} from 'mdast-util-to-string'\r\nimport {visit, EXIT} from 'unist-util-visit'\r\nimport {all} from '../all.js'\r\nimport {resolve} from '../util/resolve.js'\r\nimport {wrapNeeded} from '../util/wrap.js'\r\n\r\nconst source = convertElement('source')\r\nconst video = convertElement('video')\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function media(h, node) {\r\n  let nodes = all(h, node)\r\n  /** @type {Properties} */\r\n  // @ts-expect-error: `props` are defined.\r\n  const properties = node.properties\r\n  const poster = video(node) && String(properties.poster || '')\r\n  let src = String(properties.src || '')\r\n  let index = -1\r\n  /** @type {boolean} */\r\n  let linkInFallbackContent = false\r\n  /** @type {ElementChild} */\r\n  let child\r\n\r\n  visit({type: 'root', children: nodes}, 'link', findLink)\r\n\r\n  // If the content links to something, or if it’s not phrasing…\r\n  if (linkInFallbackContent || wrapNeeded(nodes)) {\r\n    return nodes\r\n  }\r\n\r\n  // Find the source.\r\n  while (!src && ++index < node.children.length) {\r\n    child = node.children[index]\r\n    if (source(child)) {\r\n      // @ts-expect-error: `props` are defined.\r\n      src = String(child.properties.src || '')\r\n    }\r\n  }\r\n\r\n  // If there’s a poster defined on the video, create an image.\r\n  if (poster) {\r\n    nodes = [\r\n      {\r\n        type: 'image',\r\n        title: null,\r\n        url: resolve(h, poster),\r\n        alt: toString({children: nodes})\r\n      }\r\n    ]\r\n  }\r\n\r\n  // Link to the media resource.\r\n  return {\r\n    type: 'link',\r\n    // @ts-expect-error Types are broken.\r\n    title: node.properties.title || null,\r\n    url: resolve(h, src),\r\n    // @ts-expect-error Assume phrasing content.\r\n    children: nodes\r\n  }\r\n\r\n  function findLink() {\r\n    linkInFallbackContent = true\r\n    return EXIT\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\nimport {all} from '../all.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function p(h, node) {\r\n  const nodes = all(h, node)\r\n\r\n  if (nodes.length > 0) {\r\n    return h(node, 'paragraph', nodes)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').MdastNode} MdastNode\r\n */\r\n\r\nimport {all} from '../all.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function q(h, node) {\r\n  const expected = h.quotes[h.qNesting % h.quotes.length]\r\n\r\n  h.qNesting++\r\n  const contents = all(h, node)\r\n  h.qNesting--\r\n\r\n  contents.unshift({type: 'text', value: expected.charAt(0)})\r\n\r\n  contents.push({\r\n    type: 'text',\r\n    value: expected.length > 1 ? expected.charAt(1) : expected\r\n  })\r\n\r\n  return contents\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Root} Root\r\n */\r\n\r\nimport {all} from '../all.js'\r\nimport {wrap, wrapNeeded} from '../util/wrap.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Root} node\r\n */\r\nexport function root(h, node) {\r\n  let children = all(h, node)\r\n\r\n  if (h.document || wrapNeeded(children)) {\r\n    children = wrap(children)\r\n  }\r\n\r\n  return h(node, 'root', children)\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\nimport {findSelectedOptions} from '../util/find-selected-options.js'\r\nimport {wrapText} from '../util/wrap-text.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function select(h, node) {\r\n  const values = findSelectedOptions(h, node)\r\n  let index = -1\r\n  /** @type {Array<string>} */\r\n  const results = []\r\n  /** @type {[string, string|null]} */\r\n  let value\r\n\r\n  while (++index < values.length) {\r\n    value = values[index]\r\n    results.push(value[1] ? value[1] + ' (' + value[0] + ')' : value[0])\r\n  }\r\n\r\n  if (results.length > 0) {\r\n    return h(node, 'text', wrapText(h, results.join(', ')))\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\nimport {all} from '../all.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function strong(h, node) {\r\n  return h(node, 'strong', all(h, node))\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').MdastNode} MdastNode\r\n */\r\n\r\nimport {all} from '../all.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function tableCell(h, node) {\r\n  const wrap = h.wrapText\r\n\r\n  h.wrapText = false\r\n\r\n  const result = h(node, 'tableCell', all(h, node))\r\n\r\n  if (node.properties && (node.properties.rowSpan || node.properties.colSpan)) {\r\n    const data = result.data || (result.data = {})\r\n    if (node.properties.rowSpan) data.rowSpan = node.properties.rowSpan\r\n    if (node.properties.colSpan) data.colSpan = node.properties.colSpan\r\n  }\r\n\r\n  h.wrapText = wrap\r\n\r\n  return result\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\nimport {all} from '../all.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function tableRow(h, node) {\r\n  return h(node, 'tableRow', all(h, node))\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n * @typedef {import('../types.js').MdastNode} MdastNode\r\n * @typedef {import('../types.js').MdastTableContent} MdastTableContent\r\n * @typedef {import('../types.js').MdastRowContent} MdastRowContent\r\n * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent\r\n *\r\n * @typedef Info\r\n * @property {Array<string|null>} align\r\n * @property {boolean} headless\r\n */\r\n\r\nimport {convertElement} from 'hast-util-is-element'\r\nimport {toText} from 'hast-util-to-text'\r\nimport {visit, SKIP} from 'unist-util-visit'\r\nimport {wrapText} from '../util/wrap-text.js'\r\nimport {all} from '../all.js'\r\n\r\nconst thead = convertElement('thead')\r\nconst tr = convertElement('tr')\r\nconst cell = convertElement(['th', 'td'])\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function table(h, node) {\r\n  if (h.inTable) {\r\n    return h(node, 'text', wrapText(h, toText(node)))\r\n  }\r\n\r\n  h.inTable = true\r\n\r\n  const {headless, align} = inspect(node)\r\n  const rows = toRows(all(h, node), headless)\r\n  let columns = 1\r\n  let rowIndex = -1\r\n\r\n  while (++rowIndex < rows.length) {\r\n    const cells = rows[rowIndex].children\r\n    let cellIndex = -1\r\n\r\n    while (++cellIndex < cells.length) {\r\n      const cell = cells[cellIndex]\r\n\r\n      if (cell.data) {\r\n        const colSpan = Number.parseInt(String(cell.data.colSpan), 10) || 1\r\n        const rowSpan = Number.parseInt(String(cell.data.rowSpan), 10) || 1\r\n\r\n        if (colSpan > 1 || rowSpan > 1) {\r\n          let otherRowIndex = rowIndex - 1\r\n\r\n          while (++otherRowIndex < rowIndex + rowSpan) {\r\n            let colIndex = cellIndex - 1\r\n\r\n            while (++colIndex < cellIndex + colSpan) {\r\n              if (!rows[otherRowIndex]) {\r\n                // Don’t add rows that don’t exist.\r\n                // Browsers don’t render them either.\r\n                break\r\n              }\r\n\r\n              /** @type {Array<MdastRowContent>} */\r\n              const newCells = []\r\n\r\n              if (otherRowIndex !== rowIndex || colIndex !== cellIndex) {\r\n                newCells.push({type: 'tableCell', children: []})\r\n              }\r\n\r\n              rows[otherRowIndex].children.splice(colIndex, 0, ...newCells)\r\n            }\r\n          }\r\n        }\r\n\r\n        // Clean the data fields.\r\n        if ('colSpan' in cell.data) delete cell.data.colSpan\r\n        if ('rowSpan' in cell.data) delete cell.data.rowSpan\r\n        if (Object.keys(cell.data).length === 0) delete cell.data\r\n      }\r\n    }\r\n\r\n    if (cells.length > columns) columns = cells.length\r\n  }\r\n\r\n  // Add extra empty cells.\r\n  rowIndex = -1\r\n\r\n  while (++rowIndex < rows.length) {\r\n    const cells = rows[rowIndex].children\r\n    let cellIndex = cells.length - 1\r\n    while (++cellIndex < columns) {\r\n      cells.push({type: 'tableCell', children: []})\r\n    }\r\n  }\r\n\r\n  let alignIndex = align.length - 1\r\n  while (++alignIndex < columns) {\r\n    align.push(null)\r\n  }\r\n\r\n  h.inTable = false\r\n\r\n  return h(node, 'table', {align}, rows)\r\n}\r\n\r\n/**\r\n * Infer whether the HTML table has a head and how it aligns.\r\n *\r\n * @param {Element} node\r\n * @returns {Info}\r\n */\r\nfunction inspect(node) {\r\n  let headless = true\r\n  let rowIndex = 0\r\n  let cellIndex = 0\r\n  /** @type {Array<string|null>} */\r\n  const align = [null]\r\n\r\n  visit(node, 'element', (child) => {\r\n    if (child.tagName === 'table' && node !== child) {\r\n      return SKIP\r\n    }\r\n\r\n    // If there is a `thead`, assume there is a header row.\r\n    if (cell(child) && child.properties) {\r\n      if (!align[cellIndex]) {\r\n        align[cellIndex] = String(child.properties.align || '') || null\r\n      }\r\n\r\n      // If there is a th in the first row, assume there is a header row.\r\n      if (headless && rowIndex < 2 && child.tagName === 'th') {\r\n        headless = false\r\n      }\r\n\r\n      cellIndex++\r\n    } else if (thead(child)) {\r\n      headless = false\r\n    } else if (tr(child)) {\r\n      rowIndex++\r\n      cellIndex = 0\r\n    }\r\n  })\r\n\r\n  return {align, headless}\r\n}\r\n\r\n/**\r\n * Ensure the rows are properly structured.\r\n *\r\n * @param {Array<MdastNode>} children\r\n * @param {boolean} headless\r\n * @returns {Array<MdastTableContent>}\r\n */\r\nfunction toRows(children, headless) {\r\n  let index = -1\r\n  /** @type {Array<MdastTableContent>} */\r\n  const nodes = []\r\n  /** @type {Array<MdastRowContent>|undefined} */\r\n  let queue\r\n\r\n  // Add an empty header row.\r\n  if (headless) {\r\n    nodes.push({type: 'tableRow', children: []})\r\n  }\r\n\r\n  while (++index < children.length) {\r\n    const node = children[index]\r\n\r\n    if (node.type === 'tableRow') {\r\n      if (queue) {\r\n        node.children.unshift(...queue)\r\n        queue = undefined\r\n      }\r\n\r\n      nodes.push(node)\r\n    } else {\r\n      if (!queue) queue = []\r\n      // @ts-expect-error Assume row content.\r\n      queue.push(node)\r\n    }\r\n  }\r\n\r\n  if (queue) {\r\n    nodes[nodes.length - 1].children.push(...queue)\r\n  }\r\n\r\n  index = -1\r\n\r\n  while (++index < nodes.length) {\r\n    nodes[index].children = toCells(nodes[index].children)\r\n  }\r\n\r\n  return nodes\r\n}\r\n\r\n/**\r\n * Ensure the cells in a row are properly structured.\r\n *\r\n * @param {Array<MdastNode>} children\r\n * @returns {Array<MdastRowContent>}\r\n */\r\nfunction toCells(children) {\r\n  /** @type {Array<MdastRowContent>} */\r\n  const nodes = []\r\n  let index = -1\r\n  /** @type {MdastNode} */\r\n  let node\r\n  /** @type {Array<MdastPhrasingContent>|undefined} */\r\n  let queue\r\n\r\n  while (++index < children.length) {\r\n    node = children[index]\r\n\r\n    if (node.type === 'tableCell') {\r\n      if (queue) {\r\n        node.children.unshift(...queue)\r\n        queue = undefined\r\n      }\r\n\r\n      nodes.push(node)\r\n    } else {\r\n      if (!queue) queue = []\r\n      // @ts-expect-error Assume phrasing content.\r\n      queue.push(node)\r\n    }\r\n  }\r\n\r\n  if (queue) {\r\n    node = nodes[nodes.length - 1]\r\n\r\n    if (!node) {\r\n      node = {type: 'tableCell', children: []}\r\n      nodes.push(node)\r\n    }\r\n\r\n    node.children.push(...queue)\r\n  }\r\n\r\n  return nodes\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Text} Text\r\n */\r\n\r\nimport {wrapText} from '../util/wrap-text.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Text} node\r\n */\r\nexport function text(h, node) {\r\n  return h(node, 'text', wrapText(h, node.value))\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\nimport {toText} from 'hast-util-to-text'\r\nimport {wrapText} from '../util/wrap-text.js'\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function textarea(h, node) {\r\n  return h(node, 'text', wrapText(h, toText(node)))\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Element} Element\r\n */\r\n\r\n/**\r\n * @type {Handle}\r\n * @param {Element} node\r\n */\r\nexport function wbr(h, node) {\r\n  return h(node, 'text', '\\u200B')\r\n}\r\n", "import {all} from '../all.js'\r\nimport {wrapChildren} from '../util/wrap-children.js'\r\nimport {a} from './a.js'\r\nimport {base} from './base.js'\r\nimport {blockquote} from './blockquote.js'\r\nimport {br} from './br.js'\r\nimport {code} from './code.js'\r\nimport {comment} from './comment.js'\r\nimport {del} from './del.js'\r\nimport {dl} from './dl.js'\r\nimport {em} from './em.js'\r\nimport {heading} from './heading.js'\r\nimport {hr} from './hr.js'\r\nimport {iframe} from './iframe.js'\r\nimport {img} from './img.js'\r\nimport {inlineCode} from './inline-code.js'\r\nimport {input} from './input.js'\r\nimport {li} from './li.js'\r\nimport {list} from './list.js'\r\nimport {media} from './media.js'\r\nimport {p} from './p.js'\r\nimport {q} from './q.js'\r\nimport {root} from './root.js'\r\nimport {select} from './select.js'\r\nimport {strong} from './strong.js'\r\nimport {tableCell} from './table-cell.js'\r\nimport {tableRow} from './table-row.js'\r\nimport {table} from './table.js'\r\nimport {text} from './text.js'\r\nimport {textarea} from './textarea.js'\r\nimport {wbr} from './wbr.js'\r\n\r\nexport const handlers = {\r\n  root,\r\n  text,\r\n  comment,\r\n  doctype: ignore,\r\n\r\n  applet: ignore,\r\n  area: ignore,\r\n  basefont: ignore,\r\n  bgsound: ignore,\r\n  caption: ignore,\r\n  col: ignore,\r\n  colgroup: ignore,\r\n  command: ignore,\r\n  content: ignore,\r\n  datalist: ignore,\r\n  dialog: ignore,\r\n  element: ignore,\r\n  embed: ignore,\r\n  frame: ignore,\r\n  frameset: ignore,\r\n  isindex: ignore,\r\n  keygen: ignore,\r\n  link: ignore,\r\n  math: ignore,\r\n  menu: ignore,\r\n  menuitem: ignore,\r\n  meta: ignore,\r\n  nextid: ignore,\r\n  noembed: ignore,\r\n  noframes: ignore,\r\n  optgroup: ignore,\r\n  option: ignore,\r\n  param: ignore,\r\n  script: ignore,\r\n  shadow: ignore,\r\n  source: ignore,\r\n  spacer: ignore,\r\n  style: ignore,\r\n  svg: ignore,\r\n  template: ignore,\r\n  title: ignore,\r\n  track: ignore,\r\n\r\n  abbr: all,\r\n  acronym: all,\r\n  bdi: all,\r\n  bdo: all,\r\n  big: all,\r\n  blink: all,\r\n  button: all,\r\n  canvas: all,\r\n  cite: all,\r\n  data: all,\r\n  details: all,\r\n  dfn: all,\r\n  font: all,\r\n  ins: all,\r\n  label: all,\r\n  map: all,\r\n  marquee: all,\r\n  meter: all,\r\n  nobr: all,\r\n  noscript: all,\r\n  object: all,\r\n  output: all,\r\n  progress: all,\r\n  rb: all,\r\n  rbc: all,\r\n  rp: all,\r\n  rt: all,\r\n  rtc: all,\r\n  ruby: all,\r\n  slot: all,\r\n  small: all,\r\n  span: all,\r\n  sup: all,\r\n  sub: all,\r\n  tbody: all,\r\n  tfoot: all,\r\n  thead: all,\r\n  time: all,\r\n\r\n  address: wrapChildren,\r\n  article: wrapChildren,\r\n  aside: wrapChildren,\r\n  body: wrapChildren,\r\n  center: wrapChildren,\r\n  div: wrapChildren,\r\n  fieldset: wrapChildren,\r\n  figcaption: wrapChildren,\r\n  figure: wrapChildren,\r\n  form: wrapChildren,\r\n  footer: wrapChildren,\r\n  header: wrapChildren,\r\n  hgroup: wrapChildren,\r\n  html: wrapChildren,\r\n  legend: wrapChildren,\r\n  main: wrapChildren,\r\n  multicol: wrapChildren,\r\n  nav: wrapChildren,\r\n  picture: wrapChildren,\r\n  section: wrapChildren,\r\n\r\n  a,\r\n  audio: media,\r\n  b: strong,\r\n  base,\r\n  blockquote,\r\n  br,\r\n  code: inlineCode,\r\n  dir: list,\r\n  dl,\r\n  dt: li,\r\n  dd: li,\r\n  del,\r\n  em,\r\n  h1: heading,\r\n  h2: heading,\r\n  h3: heading,\r\n  h4: heading,\r\n  h5: heading,\r\n  h6: heading,\r\n  hr,\r\n  i: em,\r\n  iframe,\r\n  img,\r\n  image: img,\r\n  input,\r\n  kbd: inlineCode,\r\n  li,\r\n  listing: code,\r\n  mark: em,\r\n  ol: list,\r\n  p,\r\n  plaintext: code,\r\n  pre: code,\r\n  q,\r\n  s: del,\r\n  samp: inlineCode,\r\n  select,\r\n  strike: del,\r\n  strong,\r\n  summary: p,\r\n  table,\r\n  td: tableCell,\r\n  textarea,\r\n  th: tableCell,\r\n  tr: tableRow,\r\n  tt: inlineCode,\r\n  u: em,\r\n  ul: list,\r\n  var: inlineCode,\r\n  video: media,\r\n  wbr,\r\n  xmp: code\r\n}\r\n\r\nfunction ignore() {}\r\n", "/**\r\n * @typedef {import('./types.js').Node} Node\r\n * @typedef {import('./types.js').Element} Element\r\n * @typedef {import('./types.js').Options} Options\r\n * @typedef {import('./types.js').Properties} Properties\r\n * @typedef {import('./types.js').H} H\r\n * @typedef {import('./types.js').HWithoutProps} HWithoutProps\r\n * @typedef {import('./types.js').HWithProps} HWithProps\r\n * @typedef {import('./types.js').MdastNode} MdastNode\r\n * @typedef {import('./types.js').MdastRoot} MdastRoot\r\n */\r\n\r\nimport rehypeMinifyWhitespace from 'rehype-minify-whitespace'\r\nimport {convert} from 'unist-util-is'\r\nimport {visit} from 'unist-util-visit'\r\nimport {one} from './one.js'\r\nimport {handlers} from './handlers/index.js'\r\nimport {own} from './util/own.js'\r\n\r\nexport {one} from './one.js'\r\nexport {all} from './all.js'\r\n\r\nconst block = convert(['heading', 'paragraph', 'root'])\r\n\r\n/**\r\n * Transform hast to mdast.\r\n *\r\n * @param {Node} tree\r\n *   Tree (hast).\r\n * @param {Options} [options]\r\n *   Configuration (optional).\r\n */\r\nexport function toMdast(tree, options = {}) {\r\n  /** @type {Record<string, Element>} */\r\n  const byId = {}\r\n  /** @type {MdastNode|MdastRoot} */\r\n  let mdast\r\n\r\n  /**\r\n   * @type {H}\r\n   */\r\n  const h = Object.assign(\r\n    /**\r\n     * @type {HWithProps & HWithoutProps}\r\n     */\r\n    (\r\n      /**\r\n       * @param {Node} node\r\n       * @param {string} type\r\n       * @param {Properties|string|Array<Node>} [props]\r\n       * @param {string|Array<Node>} [children]\r\n       */\r\n      (node, type, props, children) => {\r\n        /** @type {Properties|undefined} */\r\n        let properties\r\n\r\n        if (typeof props === 'string' || Array.isArray(props)) {\r\n          children = props\r\n          properties = {}\r\n        } else {\r\n          properties = props\r\n        }\r\n\r\n        /** @type {Node} */\r\n        // @ts-expect-error Assume valid `type` and `children`/`value`.\r\n        const result = {type, ...properties}\r\n\r\n        if (typeof children === 'string') {\r\n          // @ts-expect-error: Looks like a literal.\r\n          result.value = children\r\n        } else if (children) {\r\n          // @ts-expect-error: Looks like a parent.\r\n          result.children = children\r\n        }\r\n\r\n        if (node.position) {\r\n          result.position = node.position\r\n        }\r\n\r\n        return result\r\n      }\r\n    ),\r\n    {\r\n      nodeById: byId,\r\n      baseFound: false,\r\n      inTable: false,\r\n      wrapText: true,\r\n      /** @type {string|null} */\r\n      frozenBaseUrl: null,\r\n      qNesting: 0,\r\n      handlers: options.handlers\r\n        ? {...handlers, ...options.handlers}\r\n        : handlers,\r\n      document: options.document,\r\n      checked: options.checked || '[x]',\r\n      unchecked: options.unchecked || '[ ]',\r\n      quotes: options.quotes || ['\"']\r\n    }\r\n  )\r\n\r\n  visit(tree, 'element', (node) => {\r\n    const id =\r\n      node.properties &&\r\n      'id' in node.properties &&\r\n      String(node.properties.id).toUpperCase()\r\n\r\n    if (id && !own.call(byId, id)) {\r\n      byId[id] = node\r\n    }\r\n  })\r\n\r\n  // @ts-expect-error: does return a transformer, that does accept any node.\r\n  rehypeMinifyWhitespace({newlines: options.newlines === true})(tree)\r\n\r\n  const result = one(h, tree, undefined)\r\n\r\n  if (!result) {\r\n    mdast = {type: 'root', children: []}\r\n  } else if (Array.isArray(result)) {\r\n    mdast = {type: 'root', children: result}\r\n  } else {\r\n    mdast = result\r\n  }\r\n\r\n  visit(mdast, 'text', ontext)\r\n\r\n  return mdast\r\n\r\n  /**\r\n   * Collapse text nodes, and fix whitespace.\r\n   * Most of this is taken care of by `rehype-minify-whitespace`, but\r\n   * we’re generating some whitespace too, and some nodes are in the end\r\n   * ignored.\r\n   * So clean up.\r\n   *\r\n   * @type {import('unist-util-visit/complex-types').BuildVisitor<MdastRoot, 'text'>}\r\n   */\r\n  function ontext(node, index, parent) {\r\n    /* c8 ignore next 3 */\r\n    if (index === null || !parent) {\r\n      return\r\n    }\r\n\r\n    const previous = parent.children[index - 1]\r\n\r\n    if (previous && previous.type === node.type) {\r\n      previous.value += node.value\r\n      parent.children.splice(index, 1)\r\n\r\n      if (previous.position && node.position) {\r\n        previous.position.end = node.position.end\r\n      }\r\n\r\n      // Iterate over the previous node again, to handle its total value.\r\n      return index - 1\r\n    }\r\n\r\n    node.value = node.value.replace(/[\\t ]*(\\r?\\n|\\r)[\\t ]*/, '$1')\r\n\r\n    // We don’t care about other phrasing nodes in between (e.g., `[ asd ]()`),\r\n    // as there the whitespace matters.\r\n    if (parent && block(parent)) {\r\n      if (!index) {\r\n        node.value = node.value.replace(/^[\\t ]+/, '')\r\n      }\r\n\r\n      if (index === parent.children.length - 1) {\r\n        node.value = node.value.replace(/[\\t ]+$/, '')\r\n      }\r\n    }\r\n\r\n    if (!node.value) {\r\n      parent.children.splice(index, 1)\r\n      return index\r\n    }\r\n  }\r\n}\r\n\r\nexport {handlers as defaultHandlers} from './handlers/index.js'\r\n", "/**\r\n * @typedef {import('hast-util-to-mdast').Options} Options\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('mdast').Root} MdastRoot\r\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\r\n */\r\n\r\nimport {toMdast} from 'hast-util-to-mdast'\r\n\r\n/**\r\n * Plugin to bridge or mutate to rehype.\r\n *\r\n * If a destination is given, runs the destination with the new mdast\r\n * tree (bridge-mode).\r\n * Without destination, returns the mdast tree: further plugins run on that\r\n * tree (mutate-mode).\r\n *\r\n * @param destination\r\n *   Optional unified processor.\r\n * @param options\r\n *   Options passed to `hast-util-to-mdast`.\r\n */\r\nconst rehypeRemark =\r\n  /**\r\n   * @type {(import('unified').Plugin<[Processor, Options?], HastRoot> & import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>)}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Processor|Options} [destination]\r\n     * @param {Options} [options]\r\n     */\r\n    function (destination, options) {\r\n      /** @type {Options|undefined} */\r\n      let settings\r\n      /** @type {Processor|undefined} */\r\n      let processor\r\n\r\n      if (typeof destination === 'function') {\r\n        processor = destination\r\n        settings = options || {}\r\n      } else {\r\n        settings = destination || {}\r\n      }\r\n\r\n      if (settings.document === undefined || settings.document === null) {\r\n        settings = Object.assign({}, settings, {document: true})\r\n      }\r\n\r\n      return processor ? bridge(processor, settings) : mutate(settings)\r\n    }\r\n  )\r\n\r\nexport default rehypeRemark\r\n\r\n/**\r\n * Bridge-mode.\r\n * Runs the destination with the new mdast tree.\r\n *\r\n * @type {import('unified').Plugin<[Processor, Options?], HastRoot>}\r\n */\r\nfunction bridge(destination, options) {\r\n  return (node, file, next) => {\r\n    destination.run(toMdast(node, options), file, (error) => {\r\n      next(error)\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Mutate-mode.\r\n * Further transformers run on the mdast tree.\r\n *\r\n * @type {import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>}\r\n */\r\nfunction mutate(options = {}) {\r\n  return (node) => {\r\n    const result = /** @type {MdastRoot} */ (toMdast(node, options))\r\n    return result\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAyFO,IAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBT,SAAUA,OAAM,MAAM,OAAO,QAAQ,SAAS;AAC5C,UAAM,QAAQ,eAAe,IAAI;AAEjC,QACE,UAAU,UACV,UAAU,SACT,OAAO,UAAU,YAChB,QAAQ,KACR,UAAU,OAAO,oBACnB;AACA,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAEA,QACE,WAAW,UACX,WAAW,SACV,CAAC,OAAO,QAAQ,CAAC,OAAO,WACzB;AACA,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACxC;AAGA,QAAI,CAACA,SAAQ,CAACA,MAAK,QAAQ,OAAOA,MAAK,SAAS,UAAU;AACxD,aAAO;AAAA,IACT;AAEA,SACG,WAAW,UAAa,WAAW,WACnC,UAAU,UAAa,UAAU,OAClC;AACA,YAAM,IAAI,MAAM,gCAAgC;AAAA,IAClD;AAEA,WAAO,MAAM,KAAK,SAASA,OAAM,OAAO,MAAM;AAAA,EAChD;AAAA;AAoBG,IAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYT,SAAU,MAAM;AACd,QAAI,SAAS,UAAa,SAAS,MAAM;AACvC,aAAO;AAAA,IACT;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO,eAAe,IAAI;AAAA,IAC5B;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO,WAAW,IAAI;AAAA,IACxB;AAEA,QAAI,OAAO,SAAS,YAAY;AAC9B,aAAO,YAAY,IAAI;AAAA,IACzB;AAEA,UAAM,IAAI,MAAM,6CAA6C;AAAA,EAC/D;AAAA;AASJ,SAAS,WAAW,OAAO;AAEzB,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,WAAO,KAAK,IAAI,eAAe,MAAM,KAAK,CAAC;AAAA,EAC7C;AAEA,SAAO,YAAY,GAAG;AAOtB,WAAS,OAAO,YAAY;AAC1B,QAAIC,SAAQ;AAEZ,WAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,UAAI,OAAOA,MAAK,EAAE,KAAK,MAAM,GAAG,UAAU,GAAG;AAC3C,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAQA,SAAS,eAAe,OAAO;AAC7B,SAAO;AAMP,WAAS,QAAQD,OAAM;AACrB,WAAO,QAAQA,KAAI,KAAKA,MAAK,YAAY;AAAA,EAC3C;AACF;AAQA,SAAS,YAAY,OAAO;AAC1B,SAAO;AAQP,WAAS,UAAUA,UAAS,YAAY;AAEtC,WAAO,QAAQA,KAAI,KAAK,QAAQ,MAAM,KAAK,MAAMA,OAAM,GAAG,UAAU,CAAC;AAAA,EACvE;AACF;AAQA,SAAS,QAAQA,OAAM;AACrB,SAAO;AAAA,IACLA,SACE,OAAOA,UAAS;AAAA,IAEhBA,MAAK,SAAS;AAAA,IAEd,OAAOA,MAAK,YAAY;AAAA,EAC5B;AACF;;;ACxQO,IAAM,WAAW,eAAe;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;;;ACuIM,IAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYT,SAAU,MAAM;AACd,QAAI,SAAS,UAAa,SAAS,MAAM;AACvC,aAAO;AAAA,IACT;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO,YAAY,IAAI;AAAA,IACzB;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO,MAAM,QAAQ,IAAI,IAAIE,YAAW,IAAI,IAAI,aAAa,IAAI;AAAA,IACnE;AAEA,QAAI,OAAO,SAAS,YAAY;AAC9B,aAAOC,aAAY,IAAI;AAAA,IACzB;AAEA,UAAM,IAAI,MAAM,8CAA8C;AAAA,EAChE;AAAA;AAOJ,SAASD,YAAW,OAAO;AAEzB,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,WAAO,KAAK,IAAI,QAAQ,MAAM,KAAK,CAAC;AAAA,EACtC;AAEA,SAAOC,aAAY,GAAG;AAOtB,WAAS,OAAO,YAAY;AAC1B,QAAIC,SAAQ;AAEZ,WAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,UAAI,OAAOA,MAAK,EAAE,KAAK,MAAM,GAAG,UAAU,EAAG,QAAO;AAAA,IACtD;AAEA,WAAO;AAAA,EACT;AACF;AAQA,SAAS,aAAa,OAAO;AAC3B,SAAOD,aAAYE,IAAG;AAMtB,WAASA,KAAIC,OAAM;AAEjB,QAAI;AAEJ,SAAK,OAAO,OAAO;AAEjB,UAAIA,MAAK,GAAG,MAAM,MAAM,GAAG,EAAG,QAAO;AAAA,IACvC;AAEA,WAAO;AAAA,EACT;AACF;AAQA,SAAS,YAAY,OAAO;AAC1B,SAAOH,aAAY,IAAI;AAKvB,WAAS,KAAKG,OAAM;AAClB,WAAOA,SAAQA,MAAK,SAAS;AAAA,EAC/B;AACF;AAQA,SAASH,aAAY,OAAO;AAC1B,SAAO;AAQP,WAAS,UAAUG,UAAS,YAAY;AACtC,WAAO;AAAA,MACLA,SACE,OAAOA,UAAS,YAChB,UAAUA;AAAA,MAEV,QAAQ,MAAM,KAAK,MAAMA,OAAM,GAAG,UAAU,CAAC;AAAA,IACjD;AAAA,EACF;AACF;AAEA,SAAS,KAAK;AACZ,SAAO;AACT;;;AChSO,SAAS,WAAW,OAAO;AAEhC,QAAM;AAAA;AAAA,IAEJ,SAAS,OAAO,UAAU,YAAY,MAAM,SAAS;AAAA;AAAA,MAEjD,MAAM,SAAS;AAAA,QACf;AAAA;AAIN,SAAO,OAAO,UAAU,YAAY,MAAM,QAAQ,gBAAgB,EAAE,MAAM;AAC5E;;;ACvBO,IAAM,SAAS;AAAA,EACprB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;;ACNO,IAAM,YAAY;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;;AC+CA,IAAM,gBAAgB,QAAQ,CAAC,WAAW,SAAS,CAAC;AAOrC,SAAR,uBAAwC,UAAU,CAAC,GAAG;AAC3D,QAAM,WAAW;AAAA,IACf,QAAQ,WAAW,kBAAkB;AAAA,EACvC;AAEA,SAAO,CAAC,SAAS;AACf,WAAO,MAAM,EAAC,UAAU,YAAY,SAAQ,CAAC;AAAA,EAC/C;AACF;AAOA,SAAS,OAAOC,OAAM,SAAS;AAC7B,MAAI,cAAcA,OAAM;AACtB,UAAM,WAAW,OAAO,OAAO,CAAC,GAAG,OAAO;AAE1C,QAAIA,MAAK,SAAS,UAAU,UAAUA,KAAI,GAAG;AAC3C,eAAS,SAAS;AAClB,eAAS,QAAQ;AAAA,IACnB;AAEA,aAAS,aAAa,gBAAgBA,OAAM,OAAO;AAEnD,WAAO,IAAIA,OAAM,QAAQ;AAAA,EAC3B;AAEA,MAAIA,MAAK,SAAS,QAAQ;AACxB,QAAI,QAAQ,eAAe,UAAU;AACnC,aAAO,WAAWA,OAAM,OAAO;AAAA,IACjC;AAGA,QAAI,QAAQ,eAAe,UAAU;AACnC,MAAAA,MAAK,QAAQ,QAAQ,SAASA,MAAK,KAAK;AAAA,IAC1C;AAAA,EAIF;AAEA,SAAO,EAAC,QAAQ,OAAO,QAAQ,cAAcA,KAAI,GAAG,cAAc,MAAK;AACzE;AAOA,SAAS,WAAWA,OAAM,SAAS;AACjC,QAAM,QAAQ,QAAQ,SAASA,MAAK,KAAK;AACzC,QAAM,SAAS,EAAC,QAAQ,OAAO,QAAQ,OAAO,cAAc,MAAK;AACjE,MAAI,QAAQ;AACZ,MAAI,MAAM,MAAM;AAEhB,MAAI,QAAQ,UAAU,UAAU,MAAM,OAAO,CAAC,CAAC,GAAG;AAChD;AAAA,EACF;AAEA,MAAI,UAAU,OAAO,UAAU,MAAM,OAAO,MAAM,CAAC,CAAC,GAAG;AACrD,QAAI,QAAQ,OAAO;AACjB;AAAA,IACF,OAAO;AACL,aAAO,eAAe;AAAA,IACxB;AAAA,EACF;AAEA,MAAI,UAAU,KAAK;AACjB,WAAO,SAAS;AAAA,EAClB,OAAO;AACL,IAAAA,MAAK,QAAQ,MAAM,MAAM,OAAO,GAAG;AAAA,EACrC;AAEA,SAAO;AACT;AAOA,SAAS,IAAI,QAAQ,SAAS;AAC5B,MAAI,SAAS,QAAQ;AACrB,QAAM,QAAQ,QAAQ;AACtB,QAAM,WAAW,OAAO;AACxB,MAAI,SAAS,SAAS;AACtB,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,QAAQ;AACvB,UAAM,SAAS;AAAA,MACb,SAAS,KAAK;AAAA,MACd,OAAO,OAAO,CAAC,GAAG,SAAS;AAAA,QACzB;AAAA,QACA,OAAO,iBAAiB,UAAU,OAAO,KAAK;AAAA,MAChD,CAAC;AAAA,IACH;AAEA,QAAI,OAAO,QAAQ;AACjB,eAAS,OAAO,OAAO,CAAC;AACxB;AACA;AAAA,IACF,WAAW,CAAC,OAAO,QAAQ;AACzB,eAAS,OAAO;AAAA,IAClB;AAIA,QAAIC,SAAQ,SAAS,KAAK,CAAC,GAAG;AAC5B,eAAS;AAAA,IACX;AAAA,EACF;AAEA,SAAO,EAAC,QAAQ,OAAO,QAAQ,OAAO,cAAc,QAAQ,UAAU,KAAK,EAAC;AAC9E;AAQA,SAAS,iBAAiB,OAAO,OAAO,OAAO;AAC7C,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,UAAMD,QAAO,MAAM,KAAK;AACxB,QAAI,SAAS,cAAcA,KAAI;AAE/B,QAAI,WAAW,UAAa,cAAcA,SAAQ,CAACE,WAAUF,KAAI,GAAG;AAClE,eAAS,iBAAiBA,MAAK,UAAU,EAAE;AAAA,IAC7C;AAEA,QAAI,OAAO,WAAW,WAAW;AAC/B,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AAcA,SAAS,cAAcA,OAAM;AAC3B,MAAIA,MAAK,SAAS,WAAW;AAC3B,QAAIC,SAAQD,KAAI,GAAG;AACjB,aAAO;AAAA,IACT;AAEA,QAAI,UAAUA,KAAI,GAAG;AACnB,aAAO;AAAA,IACT;AAAA,EAIF,WAAWA,MAAK,SAAS,QAAQ;AAC/B,QAAI,CAAC,WAAWA,KAAI,GAAG;AACrB,aAAO;AAAA,IACT;AAAA,EACF,WAAW,CAAC,cAAcA,KAAI,GAAG;AAC/B,WAAO;AAAA,EACT;AACF;AAQA,SAASC,SAAQD,OAAM;AACrB,SAAO,SAASA,KAAI,KAAK,UAAUA,OAAM,OAAQ;AACnD;AAQA,SAAS,UAAUA,OAAM;AACvB,SAAO,UAAUA,OAAM,MAAM;AAC/B;AAMA,SAASE,WAAUF,OAAM;AACvB,SACE;AAAA,IACE,gBAAgBA,SAAQA,MAAK,cAAcA,MAAK,WAAW;AAAA,EAC7D,KACA,cAAcA,KAAI,KAClB,UAAUA,OAAM,SAAU;AAE9B;AAMA,SAAS,UAAU,WAAW;AAC5B,SAAO,cAAc,OAAO,cAAc;AAC5C;AAMA,SAAS,gBAAgB,OAAO;AAC9B,QAAM,QAAQ,WAAW,KAAK,KAAK;AACnC,SAAO,QAAQ,MAAM,CAAC,IAAI;AAC5B;AAKA,SAAS,oBAAoB;AAC3B,SAAO;AACT;AAKA,SAAS,gBAAgB,SAAS;AAChC,SAAO;AAMP,WAAS,SAAS,OAAO;AACvB,WAAO,OAAO,KAAK,EAAE,QAAQ,mBAAmB,OAAO;AAAA,EACzD;AACF;AAUA,SAAS,gBAAgBA,OAAM,SAAS;AACtC,MAAI,aAAaA,SAAQA,MAAK,YAAY;AACxC,YAAQA,MAAK,SAAS;AAAA;AAAA;AAAA,MAGpB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAOA,MAAK,WAAW,OAAO,aAAa;AAAA,MAC7C,KAAK;AAAA,MACL,KAAK;AACH,eAAOA,MAAK,WAAW,SAAS,WAAW,QAAQ;AAAA,MACrD,KAAK;AACH,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAEA,SAAO,QAAQ;AACjB;;;AC3LO,IAAMG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYT,SAAU,MAAM;AACd,QAAI,SAAS,UAAa,SAAS,MAAM;AACvC,aAAOC;AAAA,IACT;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAOC,aAAY,IAAI;AAAA,IACzB;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO,MAAM,QAAQ,IAAI,IAAIC,YAAW,IAAI,IAAIC,cAAa,IAAI;AAAA,IACnE;AAEA,QAAI,OAAO,SAAS,YAAY;AAC9B,aAAOC,aAAY,IAAI;AAAA,IACzB;AAEA,UAAM,IAAI,MAAM,8CAA8C;AAAA,EAChE;AAAA;AAOJ,SAASF,YAAW,OAAO;AAEzB,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,WAAO,KAAK,IAAIH,SAAQ,MAAM,KAAK,CAAC;AAAA,EACtC;AAEA,SAAOK,aAAY,GAAG;AAOtB,WAAS,OAAO,YAAY;AAC1B,QAAIC,SAAQ;AAEZ,WAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,UAAI,OAAOA,MAAK,EAAE,KAAK,MAAM,GAAG,UAAU,EAAG,QAAO;AAAA,IACtD;AAEA,WAAO;AAAA,EACT;AACF;AAQA,SAASF,cAAa,OAAO;AAC3B,SAAOC,aAAYE,IAAG;AAMtB,WAASA,KAAIC,OAAM;AAEjB,QAAI;AAEJ,SAAK,OAAO,OAAO;AAEjB,UAAIA,MAAK,GAAG,MAAM,MAAM,GAAG,EAAG,QAAO;AAAA,IACvC;AAEA,WAAO;AAAA,EACT;AACF;AAQA,SAASN,aAAY,OAAO;AAC1B,SAAOG,aAAY,IAAI;AAKvB,WAAS,KAAKG,OAAM;AAClB,WAAOA,SAAQA,MAAK,SAAS;AAAA,EAC/B;AACF;AAQA,SAASH,aAAY,OAAO;AAC1B,SAAO;AAQP,WAAS,UAAUG,UAAS,YAAY;AACtC,WAAO;AAAA,MACLA,SACE,OAAOA,UAAS,YAChB,UAAUA;AAAA,MAEV,QAAQ,MAAM,KAAK,MAAMA,OAAM,GAAG,UAAU,CAAC;AAAA,IACjD;AAAA,EACF;AACF;AAEA,SAASP,MAAK;AACZ,SAAO;AACT;;;AC/RO,SAASQ,KAAI,GAAG,QAAQ;AAG7B,QAAM,QAAQ,OAAO,YAAY,CAAC;AAElC,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAE7B,UAAM,SAAS,IAAI,GAAG,MAAM,KAAK,GAAG,MAAM;AAE1C,QAAI,MAAM,QAAQ,MAAM,GAAG;AACzB,aAAO,KAAK,GAAG,MAAM;AAAA,IACvB,WAAW,QAAQ;AACjB,aAAO,KAAK,MAAM;AAAA,IACpB;AAAA,EACF;AAEA,MAAI,QAAQ;AACZ,MAAI,MAAM,OAAO;AAEjB,SAAO,QAAQ,OAAO,OAAO,KAAK,EAAE,SAAS,SAAS;AACpD;AAAA,EACF;AAEA,SAAO,MAAM,SAAS,OAAO,MAAM,CAAC,EAAE,SAAS,SAAS;AACtD;AAAA,EACF;AAEA,SAAO,UAAU,KAAK,QAAQ,OAAO,SACjC,SACA,OAAO,MAAM,OAAO,GAAG;AAC7B;;;AC9CO,IAAM,MAAM,CAAC,EAAE;;;ACSf,SAAS,SAAS,GAAG,OAAO;AACjC,SAAO,EAAE,WAAW,QAAQ,MAAM,QAAQ,aAAa,GAAG;AAC5D;;;ACOO,SAAS,IAAI,GAAGC,OAAM,QAAQ;AAEnC,MAAI;AAEJ,MAAIA,MAAK,SAAS,WAAW;AAC3B,QAAIA,MAAK,cAAcA,MAAK,WAAW,cAAc,UAAU;AAC7D;AAAA,IACF;AAEA,QAAI,IAAI,KAAK,EAAE,UAAUA,MAAK,OAAO,GAAG;AACtC,WAAK,EAAE,SAASA,MAAK,OAAO;AAAA,IAC9B;AAAA,EACF,WAAW,IAAI,KAAK,EAAE,UAAUA,MAAK,IAAI,GAAG;AAC1C,SAAK,EAAE,SAASA,MAAK,IAAI;AAAA,EAC3B;AAEA,MAAI,OAAO,OAAO,YAAY;AAC5B,WAAO,GAAG,GAAGA,OAAM,MAAM;AAAA,EAC3B;AAEA,SAAO,QAAQ,GAAGA,KAAI;AACxB;AAMA,SAAS,QAAQ,GAAGA,OAAM;AAExB,MAAI,OAAOA,MAAK,UAAU,UAAU;AAElC,WAAO,EAAEA,OAAM,QAAQ,SAAS,GAAGA,MAAK,KAAK,CAAC;AAAA,EAChD;AAEA,SAAOC,KAAI,GAAGD,KAAI;AACpB;;;AChDA,oBAAmB;;;ACoFZ,IAAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBT,SAAUC,OAAM,MAAM,OAAO,QAAQ,SAAS;AAC5C,UAAM,QAAQC,gBAAe,IAAI;AAEjC,QACE,UAAU,UACV,UAAU,SACT,OAAO,UAAU,YAChB,QAAQ,KACR,UAAU,OAAO,oBACnB;AACA,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAEA,QACE,WAAW,UACX,WAAW,SACV,CAAC,OAAO,QAAQ,CAAC,OAAO,WACzB;AACA,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACxC;AAGA,QAAI,CAACD,SAAQ,CAACA,MAAK,QAAQ,OAAOA,MAAK,SAAS,UAAU;AACxD,aAAO;AAAA,IACT;AAEA,SACG,WAAW,UAAa,WAAW,WACnC,UAAU,UAAa,UAAU,OAClC;AACA,YAAM,IAAI,MAAM,gCAAgC;AAAA,IAClD;AAEA,WAAO,MAAM,KAAK,SAASA,OAAM,OAAO,MAAM;AAAA,EAChD;AAAA;AAoBG,IAAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYT,SAAU,MAAM;AACd,QAAI,SAAS,UAAa,SAAS,MAAM;AACvC,aAAOC;AAAA,IACT;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAOC,gBAAe,IAAI;AAAA,IAC5B;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAOC,YAAW,IAAI;AAAA,IACxB;AAEA,QAAI,OAAO,SAAS,YAAY;AAC9B,aAAOC,aAAY,IAAI;AAAA,IACzB;AAEA,UAAM,IAAI,MAAM,6CAA6C;AAAA,EAC/D;AAAA;AASJ,SAASD,YAAW,OAAO;AAEzB,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,WAAO,KAAK,IAAIH,gBAAe,MAAM,KAAK,CAAC;AAAA,EAC7C;AAEA,SAAOI,aAAY,GAAG;AAOtB,WAAS,OAAO,YAAY;AAC1B,QAAIC,SAAQ;AAEZ,WAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,UAAI,OAAOA,MAAK,EAAE,KAAK,MAAM,GAAG,UAAU,GAAG;AAC3C,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAQA,SAASH,gBAAe,OAAO;AAC7B,SAAO;AAMP,WAAS,QAAQH,OAAM;AACrB,WAAOE,SAAQF,KAAI,KAAKA,MAAK,YAAY;AAAA,EAC3C;AACF;AAQA,SAASK,aAAY,OAAO;AAC1B,SAAO;AAQP,WAAS,UAAUL,UAAS,YAAY;AAEtC,WAAOE,SAAQF,KAAI,KAAK,QAAQ,MAAM,KAAK,MAAMA,OAAM,GAAG,UAAU,CAAC;AAAA,EACvE;AACF;AAQA,SAASE,SAAQF,OAAM;AACrB,SAAO;AAAA,IACLA,SACE,OAAOA,UAAS;AAAA,IAEhBA,MAAK,SAAS;AAAA,IAEd,OAAOA,MAAK,YAAY;AAAA,EAC5B;AACF;;;AClRA,IAAMO,OAAM,CAAC,EAAE;AAYR,SAAS,YAAYC,OAAM,OAAO;AACvC,QAAM,QACJ,OAAO,UAAU,YACjB,OAAOA,KAAI,KACXA,MAAK,SAAS,aACdA,MAAK,cACLD,KAAI,KAAKC,MAAK,YAAY,KAAK,KAC/BA,MAAK,WAAW,KAAK;AAEvB,SAAO,UAAU,QAAQ,UAAU,UAAa,UAAU;AAC5D;AAMA,SAAS,OAAO,OAAO;AACrB,SAAO,QAAQ,SAAS,OAAO,UAAU,YAAY,UAAU,KAAK;AACtE;;;ACpBO,IAAMC,YAAWC,gBAAe;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;;;ACHD,IAAM,OAAO,oBAAI,IAAI,CAAC,YAAY,YAAY,YAAY,CAAC;AAapD,SAAS,aAAaC,OAAM;AACjC,MAAI,CAACC,WAAUD,OAAM,MAAM,GAAG;AAC5B,WAAO;AAAA,EACT;AAEA,MAAI,YAAYA,OAAM,UAAU,GAAG;AACjC,WAAO;AAAA,EACT;AAEA,QAAM,QAAQA,MAAK,cAAc,CAAC;AAClC,QAAM,MAAM,MAAM,OAAO,CAAC;AAC1B,MAAI,QAAQ;AAEZ,MAAI,CAAC,MAAM,QAAQ,GAAG,KAAK,IAAI,WAAW,GAAG;AAC3C,WAAO;AAAA,EACT;AAEA,SAAO,EAAE,QAAQ,IAAI,QAAQ;AAC3B,QAAI,CAAC,KAAK,IAAI,OAAO,IAAI,KAAK,CAAC,CAAC,GAAG;AACjC,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;;;AClDA,IAAM,QAAQE,gBAAe;AAAA,EAC3B;AAAA,EACA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAED,IAAM,OAAOA,gBAAe,MAAM;AAU3B,SAASC,UAAS,OAAO;AAC9B,SAAO;AAAA,IACL,KAAK,KAAK,MACP,MAAM,SAAS,UACd,MAAM,KAAK,KACXC,UAAS,KAAK,KACd,aAAa,KAAK,KACjB,KAAK,KAAK,KAAK,YAAY,OAAO,UAAU;AAAA,EACnD;AACF;AAMA,SAAS,KAAK,OAAO;AAEnB,SAAO,SAAS,OAAO,UAAU,YAAY,UAAU;AACzD;;;ALhFO,SAAS,KAAK,OAAO;AAC1B,SAAO,KAAK,OAAO,UAAU;AAM7B,WAAS,WAAWC,QAAO;AACzB,UAAM,OAAOA,OAAM,CAAC;AAEpB,QACEA,OAAM,WAAW,KACjB,KAAK,SAAS,WACb,KAAK,UAAU,OAAO,KAAK,UAAU,OACtC;AACA,aAAO,CAAC;AAAA,IACV;AAEA,WAAO,EAAC,MAAM,aAAa,UAAUA,OAAK;AAAA,EAC5C;AACF;AAUO,SAAS,WAAW,OAAO;AAChC,MAAI,QAAQ;AAEZ,MAAIC;AAEJ,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,IAAAA,QAAO,MAAM,KAAK;AAElB,QAAI,CAACC,UAASD,KAAI,KAAM,cAAcA,SAAQ,WAAWA,MAAK,QAAQ,GAAI;AACxE,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AASA,SAAS,KAAK,OAAO,YAAY,eAAe;AAC9C,QAAM,cAAc,iBAAiB;AAErC,QAAM,YAAY,QAAQ,KAAK;AAE/B,MAAI,SAAS,CAAC;AACd,MAAI,QAAQ;AAEZ,MAAI;AAEJ,MAAIA;AAEJ,SAAO,EAAE,QAAQ,UAAU,QAAQ;AACjC,IAAAA,QAAO,UAAU,KAAK;AAEtB,QAAIC,UAASD,KAAI,GAAG;AAClB,UAAI,CAAC,MAAO,SAAQ,CAAC;AACrB,YAAM,KAAKA,KAAI;AAAA,IACjB,OAAO;AACL,UAAI,OAAO;AACT,iBAAS,OAAO,OAAO,WAAW,KAAK,CAAC;AACxC,gBAAQ;AAAA,MACV;AAEA,eAAS,OAAO,OAAO,YAAYA,KAAI,CAAC;AAAA,IAC1C;AAAA,EACF;AAEA,MAAI,OAAO;AACT,aAAS,OAAO,OAAO,WAAW,KAAK,CAAC;AAAA,EAC1C;AAEA,SAAO;AACT;AAQA,SAAS,QAAQ,OAAO;AAEtB,MAAI,YAAY,CAAC;AACjB,MAAI,QAAQ;AAEZ,MAAIA;AAEJ,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,IAAAA,QAAO,MAAM,KAAK;AAWlB,SACGA,MAAK,SAAS,YAAYA,MAAK,SAAS,WACzC,WAAWA,MAAK,QAAQ,GACxB;AACA,kBAAY,UAAU,OAAO,MAAMA,KAAI,CAAC;AAAA,IAC1C,OAAO;AACL,gBAAU,KAAKA,KAAI;AAAA,IACrB;AAAA,EACF;AAEA,SAAO;AACT;AAMA,SAAS,MAAMA,OAAM;AAEnB,SAAO,KAAKA,MAAK,UAAU,YAAY,aAAa;AAUpD,WAAS,cAAc,OAAO;AAC5B,QAAI,cAAc,SAAS,cAAcA,OAAM;AAC7C,YAAM,EAAC,UAAU,GAAG,KAAI,IAAIA;AAC5B,aAAO;AAAA,QACL,GAAG;AAAA;AAAA,QAEH,UAAU,CAAC,EAAC,OAAG,cAAAE,SAAO,MAAM,CAAC,GAAG,IAAI,GAAG,UAAU,MAAM,SAAQ,CAAC;AAAA,MAClE;AAAA,IACF;AAEA,WAAO,EAAC,GAAG,MAAK;AAAA,EAClB;AAQA,WAAS,WAAW,OAAO;AAEzB,UAAM,EAAC,UAAU,GAAG,KAAI,IAAIF;AAE5B,WAAO,EAAC,OAAG,cAAAE,SAAO,MAAM,CAAC,GAAG,IAAI,GAAG,UAAU,MAAK;AAAA,EACpD;AACF;AAUA,SAASD,UAASD,OAAM;AACtB,SAAOA,MAAK,QAAQA,MAAK,KAAK,QAC1BC,UAAa;AAAA,IACX,MAAM;AAAA,IACN,SAASD,MAAK,KAAK;AAAA,IACnB,YAAY,CAAC;AAAA,IACb,UAAU,CAAC;AAAA,EACb,CAAC,IACD,SAAcA,KAAI;AACxB;AAOA,SAAS,SAAS,GAAG;AACnB,SAAO;AACT;;;AMjMO,SAAS,aAAa,GAAGG,OAAM;AACpC,SAAO,KAAKC,KAAI,GAAGD,KAAI,CAAC;AAC1B;;;ACPO,SAAS,QAAQ,GAAG,KAAK;AAC9B,MAAI,QAAQ,QAAQ,QAAQ,QAAW;AACrC,WAAO;AAAA,EACT;AAEA,MAAI,EAAE,eAAe;AACnB,WAAO,OAAO,IAAI,IAAI,KAAK,EAAE,aAAa,CAAC;AAAA,EAC7C;AAEA,SAAO;AACT;;;ACNO,SAAS,EAAE,GAAGE,OAAM;AAGzB,QAAM,QAAQA,MAAK;AACnB,SAAO;AAAA,IACLA;AAAA,IACA;AAAA,IACA;AAAA,MACE,OAAO,MAAM,SAAS;AAAA,MACtB,KAAK,QAAQ,GAAG,OAAO,MAAM,QAAQ,EAAE,KAAK,IAAI;AAAA,IAClD;AAAA,IACAC,KAAI,GAAGD,KAAI;AAAA,EACb;AACF;;;ACjBO,SAAS,KAAK,GAAGE,OAAM;AAC5B,MAAI,CAAC,EAAE,WAAW;AAChB,MAAE,gBACA,OAAQA,MAAK,cAAcA,MAAK,WAAW,QAAS,EAAE,KAAK;AAC7D,MAAE,YAAY;AAAA,EAChB;AACF;;;ACJO,SAAS,WAAW,GAAGC,OAAM;AAClC,SAAO,EAAEA,OAAM,cAAc,aAAa,GAAGA,KAAI,CAAC;AACpD;;;ACJO,SAAS,GAAG,GAAGC,OAAM;AAC1B,SAAO,EAAE,WAAW,EAAEA,OAAM,OAAO,IAAI,EAAEA,OAAM,QAAQ,GAAG;AAC5D;;;ACsJO,IAAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYT,SAAU,MAAM;AACd,QAAI,SAAS,UAAa,SAAS,MAAM;AACvC,aAAOC;AAAA,IACT;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAOC,gBAAe,IAAI;AAAA,IAC5B;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAOC,YAAW,IAAI;AAAA,IACxB;AAEA,QAAI,OAAO,SAAS,YAAY;AAC9B,aAAOC,aAAY,IAAI;AAAA,IACzB;AAEA,UAAM,IAAI,MAAM,6CAA6C;AAAA,EAC/D;AAAA;AASJ,SAASD,YAAW,OAAO;AAEzB,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,WAAO,KAAK,IAAIH,gBAAe,MAAM,KAAK,CAAC;AAAA,EAC7C;AAEA,SAAOI,aAAY,GAAG;AAOtB,WAAS,OAAO,YAAY;AAC1B,QAAIC,SAAQ;AAEZ,WAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,UAAI,OAAOA,MAAK,EAAE,KAAK,MAAM,GAAG,UAAU,GAAG;AAC3C,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAQA,SAASH,gBAAe,OAAO;AAC7B,SAAO;AAMP,WAAS,QAAQI,OAAM;AACrB,WAAOL,SAAQK,KAAI,KAAKA,MAAK,YAAY;AAAA,EAC3C;AACF;AAQA,SAASF,aAAY,OAAO;AAC1B,SAAO;AAQP,WAAS,UAAUE,UAAS,YAAY;AAEtC,WAAOL,SAAQK,KAAI,KAAK,QAAQ,MAAM,KAAK,MAAMA,OAAM,GAAG,UAAU,CAAC;AAAA,EACvE;AACF;AAQA,SAASL,SAAQK,OAAM;AACrB,SAAO;AAAA,IACLA,SACE,OAAOA,UAAS;AAAA,IAEhBA,MAAK,SAAS;AAAA,IAEd,OAAOA,MAAK,YAAY;AAAA,EAC5B;AACF;;;ACtHO,IAAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYT,SAAU,MAAM;AACd,QAAI,SAAS,UAAa,SAAS,MAAM;AACvC,aAAOC;AAAA,IACT;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAOC,aAAY,IAAI;AAAA,IACzB;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO,MAAM,QAAQ,IAAI,IAAIC,YAAW,IAAI,IAAIC,cAAa,IAAI;AAAA,IACnE;AAEA,QAAI,OAAO,SAAS,YAAY;AAC9B,aAAOC,aAAY,IAAI;AAAA,IACzB;AAEA,UAAM,IAAI,MAAM,8CAA8C;AAAA,EAChE;AAAA;AAOJ,SAASF,YAAW,OAAO;AAEzB,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,WAAO,KAAK,IAAIH,SAAQ,MAAM,KAAK,CAAC;AAAA,EACtC;AAEA,SAAOK,aAAY,GAAG;AAOtB,WAAS,OAAO,YAAY;AAC1B,QAAIC,SAAQ;AAEZ,WAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,UAAI,OAAOA,MAAK,EAAE,KAAK,MAAM,GAAG,UAAU,EAAG,QAAO;AAAA,IACtD;AAEA,WAAO;AAAA,EACT;AACF;AAQA,SAASF,cAAa,OAAO;AAC3B,SAAOC,aAAYE,IAAG;AAMtB,WAASA,KAAIC,OAAM;AAEjB,QAAI;AAEJ,SAAK,OAAO,OAAO;AAEjB,UAAIA,MAAK,GAAG,MAAM,MAAM,GAAG,EAAG,QAAO;AAAA,IACvC;AAEA,WAAO;AAAA,EACT;AACF;AAQA,SAASN,aAAY,OAAO;AAC1B,SAAOG,aAAY,IAAI;AAKvB,WAAS,KAAKG,OAAM;AAClB,WAAOA,SAAQA,MAAK,SAAS;AAAA,EAC/B;AACF;AAQA,SAASH,aAAY,OAAO;AAC1B,SAAO;AAQP,WAAS,UAAUG,UAAS,YAAY;AACtC,WAAO;AAAA,MACLA,SACE,OAAOA,UAAS,YAChB,UAAUA;AAAA,MAEV,QAAQ,MAAM,KAAK,MAAMA,OAAM,GAAG,UAAU,CAAC;AAAA,IACjD;AAAA,EACF;AACF;AAEA,SAASP,MAAK;AACZ,SAAO;AACT;;;ACvRO,IAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcT,SAAU,QAAQ,OAAO,MAAM;AAC7B,UAAMQ,MAAKC,SAAQ,IAAI;AAEvB,QAAI,CAAC,UAAU,CAAC,OAAO,QAAQ,CAAC,OAAO,UAAU;AAC/C,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACxC;AAEA,QAAI,OAAO,UAAU,UAAU;AAC7B,UAAI,QAAQ,KAAK,UAAU,OAAO,mBAAmB;AACnD,cAAM,IAAI,MAAM,0CAA0C;AAAA,MAC5D;AAAA,IACF,OAAO;AACL,cAAQ,OAAO,SAAS,QAAQ,KAAK;AAErC,UAAI,QAAQ,GAAG;AACb,cAAM,IAAI,MAAM,8BAA8B;AAAA,MAChD;AAAA,IACF;AAEA,WAAO,EAAE,QAAQ,OAAO,SAAS,QAAQ;AACvC,UAAID,IAAG,OAAO,SAAS,KAAK,GAAG,OAAO,MAAM,GAAG;AAC7C,eAAO,OAAO,SAAS,KAAK;AAAA,MAC9B;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;;;ACZJ,IAAM,kBAAkB;AACxB,IAAM,oBAAoB;AAE1B,IAAME,MAAKC,gBAAe,IAAI;AAC9B,IAAM,IAAIA,gBAAe,GAAG;AAC5B,IAAM,OAAOA,gBAAe,CAAC,MAAM,IAAI,CAAC;AACxC,IAAM,MAAMA,gBAAe,IAAI;AAI/B,IAAM,cAAcA,gBAAe;AAAA;AAAA,EAEjC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AACF,CAAC;AAGD,IAAM,iBAAiBA,gBAAe;AAAA,EACpmCM,SAAS,OAAO,MAAM,UAAU,CAAC,GAAG;AACzC,QAAM,WAAW,cAAc,OAAO,KAAK,WAAW,CAAC;AACvD,QAAMC,SAAQ,eAAe,IAAI;AACjC,QAAMC,cAAa,gBAAgB,MAAM;AAAA,IACvC,YAAY,QAAQ,cAAc;AAAA,IAClC,aAAa;AAAA,IACb,YAAY;AAAA,EACd,CAAC;AAGD,QAAM,UAAU,CAAC;AAUjB,MAAI,KAAK,SAAS,UAAU,KAAK,SAAS,WAAW;AACnD,YAAQ;AAAA,MACN,GAAG,YAAY,MAAM;AAAA,QACnB,YAAAA;AAAA,QACA,aAAa;AAAA,QACb,YAAY;AAAA,MACd,CAAC;AAAA,IACH;AAAA,EACF;AAaA,MAAI,QAAQ;AAGZ,SAAO,EAAE,QAAQ,SAAS,QAAQ;AAMhC,YAAQ;AAAA,MAEN,GAAG,oBAAoB,SAAS,KAAK,GAAG,MAAM;AAAA,QAC5C,YAAAA;AAAA,QACA,aAAa,QAAQ,SAAYD;AAAA,QACjC,YACE,QAAQ,SAAS,SAAS,IAAIF,IAAG,SAAS,QAAQ,CAAC,CAAC,IAAIE;AAAA,MAC5D,CAAC;AAAA,IACH;AAAA,EACF;AAUA,QAAM,SAAS,CAAC;AAEhB,MAAI;AAEJ,UAAQ;AAER,SAAO,EAAE,QAAQ,QAAQ,QAAQ;AAC/B,UAAM,QAAQ,QAAQ,KAAK;AAE3B,QAAI,OAAO,UAAU,UAAU;AAC7B,UAAI,UAAU,UAAa,QAAQ,MAAO,SAAQ;AAAA,IACpD,WAAW,OAAO;AAChB,UAAI,UAAU,UAAa,QAAQ,IAAI;AACrC,eAAO,KAAK,KAAK,OAAO,KAAK,KAAK,GAAG;AAAA,MACvC;AAEA,cAAQ;AACR,aAAO,KAAK,KAAK;AAAA,IACnB;AAAA,EACF;AAGA,SAAO,OAAO,KAAK,EAAE;AACvB;AAUA,SAAS,oBAAoBE,OAAM,QAAQ,MAAM;AAC/C,MAAIA,MAAK,SAAS,WAAW;AAC3B,WAAO,eAAeA,OAAM,QAAQ,IAAI;AAAA,EAC1C;AAEA,MAAIA,MAAK,SAAS,QAAQ;AACxB,WAAO,KAAK,eAAe,WACvB,YAAYA,OAAM,IAAI,IACtB,eAAeA,KAAI;AAAA,EACzB;AAEA,SAAO,CAAC;AACV;AAYA,SAAS,eAAeA,OAAM,QAAQ,MAAM;AAE1C,QAAMD,cAAa,gBAAgBC,OAAM,IAAI;AAC7C,QAAM,WAAWA,MAAK,YAAY,CAAC;AACnC,MAAI,QAAQ;AAEZ,MAAI,QAAQ,CAAC;AAIb,MAAI,YAAYA,KAAI,GAAG;AACrB,WAAO;AAAA,EACT;AAGA,MAAIC;AAEJ,MAAI;AAiBJ,MAAIL,IAAGI,KAAI,GAAG;AACZ,aAAS;AAAA,EACX,WAUS,IAAIA,KAAI,KAAK,UAAU,QAAQA,OAAM,GAAG,GAAG;AAClD,aAAS;AAAA,EACX,WAIS,EAAEA,KAAI,GAAG;AAChB,IAAAC,UAAS;AACT,aAAS;AAAA,EACX,WAKS,eAAeD,KAAI,GAAG;AAC7B,IAAAC,UAAS;AACT,aAAS;AAAA,EACX;AAKA,SAAO,EAAE,QAAQ,SAAS,QAAQ;AAChC,YAAQ,MAAM;AAAA,MACZ,oBAAoB,SAAS,KAAK,GAAGD,OAAM;AAAA,QACzC,YAAAD;AAAA,QACA,aAAa,QAAQ,SAAYE;AAAA,QACjC,YACE,QAAQ,SAAS,SAAS,IAAIL,IAAG,SAAS,QAAQ,CAAC,CAAC,IAAI;AAAA,MAC5D,CAAC;AAAA,IACH;AAAA,EACF;AAQA,MAAI,KAAKI,KAAI,KAAK,UAAU,QAAQA,OAAM,IAAI,GAAG;AAC/C,UAAM,KAAK,GAAI;AAAA,EACjB;AAGA,MAAIC,QAAQ,OAAM,QAAQA,OAAM;AAChC,MAAI,OAAQ,OAAM,KAAK,MAAM;AAE7B,SAAO;AACT;AA0BA,SAAS,YAAYD,OAAM,MAAM;AAC/B,QAAM,QAAQ,OAAOA,MAAK,KAAK;AAE/B,QAAM,QAAQ,CAAC;AAEf,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AAEZ,SAAO,SAAS,MAAM,QAAQ;AAC5B,oBAAgB,YAAY;AAE5B,UAAM,QAAQ,gBAAgB,KAAK,KAAK;AACxC,UAAM,MAAM,SAAS,WAAW,QAAQ,MAAM,QAAQ,MAAM;AAE5D,UAAM;AAAA;AAAA;AAAA,MAGJ;AAAA;AAAA;AAAA;AAAA,QAIE,MACG,MAAM,OAAO,GAAG,EAChB,QAAQ,mDAAmD,EAAE;AAAA,QAChE,UAAU,IAAI,KAAK,cAAc;AAAA,QACjC,QAAQ,MAAM,SAAS,KAAK,aAAa;AAAA,MAC3C;AAAA,IACF;AAEA,YAAQ,MAAM;AAAA,EAChB;AAOA,MAAI,QAAQ;AAEZ,MAAI;AAEJ,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAI7B,QACE,MAAM,KAAK,EAAE,WAAW,MAAM,KAAK,EAAE,SAAS,CAAC,MAAM,QACpD,QAAQ,MAAM,SAAS,KACtB,MAAM,QAAQ,CAAC,EAAE,WAAW,CAAC,MAAM,MACrC;AACA,aAAO,KAAK,MAAM,KAAK,CAAC;AACxB,aAAO;AAAA,IACT,WAkBS,MAAM,KAAK,GAAG;AACrB,UAAI,OAAO,SAAS,SAAU,QAAO,KAAK,IAAI;AAC9C,aAAO,KAAK,MAAM,KAAK,CAAC;AACxB,aAAO;AAAA,IACT,WAAW,UAAU,KAAK,UAAU,MAAM,SAAS,GAAG;AAIpD,aAAO,KAAK,CAAC;AAAA,IACf;AAAA,EACF;AAEA,SAAO;AACT;AAUA,SAAS,eAAeA,OAAM;AAC5B,SAAO,CAAC,OAAOA,MAAK,KAAK,CAAC;AAC5B;AAmBA,SAAS,6BAA6B,OAAO,aAAa,YAAY;AAEpE,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AAEZ,MAAI;AAEJ,SAAO,QAAQ,MAAM,QAAQ;AAC3B,sBAAkB,YAAY;AAC9B,UAAM,QAAQ,kBAAkB,KAAK,KAAK;AAC1C,UAAM,QAAQ,MAAM,QAAQ,MAAM;AAIlC,QAAI,CAAC,SAAS,CAAC,OAAO,SAAS,CAAC,aAAa;AAC3C,aAAO,KAAK,EAAE;AAAA,IAChB;AAEA,QAAI,UAAU,KAAK;AACjB,aAAO,KAAK,MAAM,MAAM,OAAO,GAAG,CAAC;AAAA,IACrC;AAEA,YAAQ,QAAQ,MAAM,MAAM,CAAC,EAAE,SAAS;AAAA,EAC1C;AAKA,MAAI,UAAU,OAAO,CAAC,YAAY;AAChC,WAAO,KAAK,EAAE;AAAA,EAChB;AAEA,SAAO,OAAO,KAAK,GAAG;AACxB;AAcA,SAAS,gBAAgBA,OAAM,MAAM;AACnC,MAAIA,MAAK,SAAS,WAAW;AAC3B,UAAM,QAAQA,MAAK,cAAc,CAAC;AAClC,YAAQA,MAAK,SAAS;AAAA,MACpB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK,OAAO;AACV,eAAO;AAAA,MACT;AAAA,MAEA,KAAK,QAAQ;AACX,eAAO;AAAA,MACT;AAAA,MAEA,KAAK,OAAO;AACV,eAAO,MAAM,OAAO,aAAa;AAAA,MACnC;AAAA,MAEA,KAAK;AAAA,MACL,KAAK,MAAM;AACT,eAAO,MAAM,SAAS,WAAW,KAAK;AAAA,MACxC;AAAA,MAEA,KAAK,YAAY;AACf,eAAO;AAAA,MACT;AAAA,MAEA;AAAA,IACF;AAAA,EACF;AAEA,SAAO,KAAK;AACd;AAGA,SAAS,OAAOA,OAAM;AACpB,SAAO,SAASA,MAAK,cAAc,CAAC,GAAG,MAAM;AAC/C;AAGA,SAAS,aAAaA,OAAM;AAC1B,SAAOA,MAAK,YAAY,YAAY,EAAEA,MAAK,cAAc,CAAC,GAAG;AAC/D;;;ACllBO,SAAS,kBAAkB,OAAO;AACvC,QAAME,SAAQ,OAAO,KAAK;AAC1B,MAAI,MAAMA,OAAM;AAEhB,SAAO,MAAM,GAAG;AACd,UAAMC,QAAOD,OAAM,YAAY,MAAM,CAAC;AACtC,QAAIC,UAAS,WAAcA,UAAS,MAAMA,UAAS,KAAK;AACtD;AAAA,IACF,OAAO;AACL;AAAA,IACF;AAAA,EACF;AAEA,SAAOD,OAAM,MAAM,GAAG,GAAG;AAC3B;;;ACXA,IAAM,SAAS;AAEf,IAAM,MAAME,gBAAe,KAAK;AAChC,IAAM,SAASA,gBAAe,MAAM;AAM7B,SAAS,KAAK,GAAGC,OAAM;AAC5B,QAAM,WAAWA,MAAK;AACtB,MAAI,QAAQ;AAEZ,MAAI;AAEJ,MAAI;AAEJ,MAAI,IAAIA,KAAI,GAAG;AACb,WAAO,EAAE,QAAQ,SAAS,QAAQ;AAChC,YAAM,QAAQ,SAAS,KAAK;AAE5B,UACE,OAAO,KAAK,KACZ,MAAM,cACN,MAAM,WAAW,aACjB,MAAM,QAAQ,MAAM,WAAW,SAAS,GACxC;AACA,oBAAY,MAAM,WAAW;AAC7B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,MAAI,WAAW;AACb,YAAQ;AAER,WAAO,EAAE,QAAQ,UAAU,QAAQ;AACjC,UAAI,OAAO,UAAU,KAAK,CAAC,EAAE,MAAM,GAAG,OAAO,MAAM,MAAM,QAAQ;AAC/D,eAAO,OAAO,UAAU,KAAK,CAAC,EAAE,MAAM,OAAO,MAAM;AACnD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA,IACLA;AAAA,IACA;AAAA,IACA,EAAC,MAAM,QAAQ,MAAM,MAAM,KAAI;AAAA,IAC/B,kBAAkB,SAAS,GAAG,OAAOA,KAAI,CAAC,CAAC;AAAA,EAC7C;AACF;;;ACnDO,SAAS,QAAQ,GAAGC,OAAM;AAC/B,SAAO,EAAEA,OAAM,QAAQ,SAAS,SAAS,GAAGA,MAAK,KAAK,IAAI,KAAK;AACjE;;;ACDO,SAAS,IAAI,GAAGC,OAAM;AAC3B,SAAO,EAAEA,OAAM,UAAUC,KAAI,GAAGD,KAAI,CAAC;AACvC;;;ACLO,SAAS,gBAAgB,UAAU;AACxC,MAAI,QAAQ;AAEZ,MAAI,SAAS,SAAS,GAAG;AACvB,WAAO,EAAE,QAAQ,SAAS,QAAQ;AAChC,UAAI,SAAS,KAAK,EAAE,QAAQ;AAC1B,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;;;ACPO,SAAS,cAAc,GAAGE,OAAM;AACrC,QAAM,WAAWC,KAAI,GAAGD,KAAI;AAC5B,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,SAAS,QAAQ;AAChC,UAAM,QAAQ,SAAS,KAAK;AAC5B,QAAI,MAAM,SAAS,YAAY;AAC7B,eAAS,KAAK,IAAI;AAAA,QAChB,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,SAAS;AAAA;AAAA,QAET,UAAU,CAAC,KAAK;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAGA,SAAO;AACT;;;ACbA,IAAM,MAAME,gBAAe,KAAK;AAChC,IAAM,KAAKA,gBAAe,IAAI;AAC9B,IAAM,KAAKA,gBAAe,IAAI;AAMvB,SAAS,GAAG,GAAGC,OAAM;AAC1B,QAAM,WAAWA,MAAK;AACtB,MAAI,QAAQ;AAEZ,MAAI,QAAQ,CAAC;AAEb,QAAM,SAAS,CAAC;AAEhB,MAAI,QAAQ,EAAC,QAAQ,CAAC,GAAG,aAAa,CAAC,EAAC;AAExC,MAAI;AAEJ,MAAI;AAGJ,SAAO,EAAE,QAAQ,SAAS,QAAQ;AAChC,YAAQ,SAAS,KAAK;AACtB,YAAQ,MAAM,OAAO,IAAI,KAAK,IAAI,MAAM,WAAW,KAAK;AAAA,EAC1D;AAEA,UAAQ;AAGR,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,YAAQ,MAAM,KAAK;AAEnB,QAAI,GAAG,KAAK,GAAG;AACb,UAAI,GAAG,MAAM,QAAQ,CAAC,CAAC,GAAG;AACxB,eAAO,KAAK,KAAK;AACjB,gBAAQ,EAAC,QAAQ,CAAC,GAAG,aAAa,CAAC,EAAC;AAAA,MACtC;AAEA,YAAM,OAAO,KAAK,KAAK;AAAA,IACzB,OAAO;AACL,YAAM,YAAY,KAAK,KAAK;AAAA,IAC9B;AAAA,EACF;AAEA,SAAO,KAAK,KAAK;AAGjB,UAAQ;AAER,QAAMC,WAAU,CAAC;AAEjB,SAAO,EAAE,QAAQ,OAAO,QAAQ;AAC9B,aAAS;AAAA,MACP,GAAG,OAAO,GAAG,OAAO,KAAK,EAAE,MAAM;AAAA,MACjC,GAAG,OAAO,GAAG,OAAO,KAAK,EAAE,WAAW;AAAA,IACxC;AAEA,QAAI,OAAO,SAAS,GAAG;AACrB,MAAAA,SAAQ,KAAK;AAAA,QACX,MAAM;AAAA,QACN,QAAQ,OAAO,SAAS;AAAA,QACxB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AAAA,EACF;AAGA,MAAIA,SAAQ,SAAS,GAAG;AACtB,WAAO;AAAA,MACLD;AAAA,MACA;AAAA,MACA,EAAC,SAAS,OAAO,OAAO,MAAM,QAAQ,gBAAgBC,QAAO,EAAC;AAAA,MAC9DA;AAAA,IACF;AAAA,EACF;AACF;AAOA,SAAS,OAAO,GAAG,UAAU;AAC3B,QAAM,QAAQ,cAAc,GAAG,EAAC,MAAM,WAAW,SAAS,KAAK,SAAQ,CAAC;AAExE,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,CAAC;AAAA,EACV;AAEA,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,MAAM,CAAC,EAAE;AAAA,EAClB;AAEA,SAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO;AAAA,MACP,QAAQ,gBAAgB,KAAK;AAAA,MAC7B,UAAU;AAAA,IACZ;AAAA,EACF;AACF;;;ACjHO,SAAS,GAAG,GAAGC,OAAM;AAC1B,SAAO,EAAEA,OAAM,YAAYC,KAAI,GAAGD,KAAI,CAAC;AACzC;;;ACDO,SAAS,QAAQ,GAAGE,OAAM;AAG/B,QAAM,QAAQ,OAAOA,MAAK,QAAQ,OAAO,CAAC,CAAC,KAAK;AAChD,QAAMC,QAAO,EAAE;AAEf,IAAE,WAAW;AACb,QAAM,SAAS,EAAED,OAAM,WAAW,EAAC,MAAK,GAAGE,KAAI,GAAGF,KAAI,CAAC;AACvD,IAAE,WAAWC;AAEb,SAAO;AACT;;;ACdO,SAAS,GAAG,GAAGE,OAAM;AAC1B,SAAO,EAAEA,OAAM,eAAe;AAChC;;;ACEO,SAAS,OAAO,GAAGC,OAAM;AAG9B,QAAM,QAAQA,MAAK;AACnB,QAAM,MAAM,OAAO,MAAM,OAAO,EAAE;AAClC,QAAM,QAAQ,OAAO,MAAM,SAAS,EAAE;AAMtC,MAAI,OAAO,OAAO;AAChB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,OAAO;AAAA,MACP,KAAK,QAAQ,GAAG,GAAG;AAAA,MACnB,UAAU,CAAC,EAAC,MAAM,QAAQ,OAAO,SAAS,GAAG,KAAK,EAAC,CAAC;AAAA,IACtD;AAAA,EACF;AACF;;;ACpBO,SAAS,IAAI,GAAGC,OAAM;AAG3B,QAAM,QAAQA,MAAK;AACnB,SAAO,EAAEA,OAAM,SAAS;AAAA,IACtB,KAAK,QAAQ,GAAG,OAAO,MAAM,OAAO,EAAE,KAAK,IAAI;AAAA,IAC/C,OAAO,MAAM,SAAS;AAAA,IACtB,KAAK,MAAM,OAAO;AAAA,EACpB,CAAC;AACH;;;ACTO,SAAS,WAAW,GAAGC,OAAM;AAClC,SAAO,EAAEA,OAAM,cAAc,SAAS,GAAG,OAAOA,KAAI,CAAC,CAAC;AACxD;;;ACDA,IAAM,SAASC,gBAAe,QAAQ;AAQ/B,SAAS,oBAAoB,GAAGC,OAAM,YAAY;AAGvD,QAAM,QAAQ,cAAcA,MAAK;AACjC,MAAI,UAAU,YAAYA,KAAI;AAC9B,QAAM,OACJ,KAAK,IAAI,OAAO,SAAS,OAAO,MAAM,IAAI,GAAG,EAAE,GAAG,CAAC,MAClD,MAAM,WAAW,IAAI;AACxB,MAAI,QAAQ;AAEZ,QAAM,kBAAkB,CAAC;AAEzB,QAAM,SAAS,CAAC;AAEhB,SAAO,EAAE,QAAQ,QAAQ,QAAQ;AAC/B,QAAI,YAAY,QAAQ,KAAK,GAAG,UAAU,GAAG;AAC3C,sBAAgB,KAAK,QAAQ,KAAK,CAAC;AAAA,IACrC;AAAA,EACF;AAEA,QAAMC,QAAO,gBAAgB,SAAS,IAAI,kBAAkB;AAC5D,YAAUA,MAAK,MAAM,GAAG,IAAI;AAC5B,UAAQ;AAER,SAAO,EAAE,QAAQ,QAAQ,QAAQ;AAC/B,UAAMC,UAAS,QAAQ,KAAK;AAC5B,UAAMC,WAAU,SAAS,GAAG,OAAOD,OAAM,CAAC;AAG1C,UAAME,SAAQF,QAAO;AACrB,UAAM,QAAQC,YAAW,OAAOC,OAAM,SAAS,EAAE;AACjD,UAAM,QAAQ,OAAOA,OAAM,SAAS,EAAE,KAAKD;AAC3C,WAAO,KAAK,CAAC,OAAO,UAAU,QAAQ,OAAO,KAAK,CAAC;AAAA,EACrD;AAEA,SAAO;AACT;AAKA,SAAS,YAAYH,OAAM;AACzB,QAAM,WAAWA,MAAK;AACtB,MAAI,QAAQ;AAEZ,MAAI,UAAU,CAAC;AAEf,MAAI;AAEJ,SAAO,EAAE,QAAQ,SAAS,QAAQ;AAChC,YAAQ,SAAS,KAAK;AAGtB,QAAI,MAAM,QAAQ,MAAM,QAAQ,GAAG;AAEjC,gBAAU,QAAQ,OAAO,YAAY,KAAK,CAAC;AAAA,IAC7C;AAEA,QAAI,OAAO,KAAK,KAAK,CAAC,YAAY,OAAO,UAAU,GAAG;AACpD,cAAQ,KAAK,KAAK;AAAA,IACpB;AAAA,EACF;AAEA,SAAO;AACT;;;ACxEA,IAAM,WAAWK,gBAAe,UAAU;AAOnC,SAAS,MAAM,GAAGC,OAAM;AAG7B,QAAM,QAAQA,MAAK;AACnB,MAAI,QAAQ,OAAO,MAAM,SAAS,MAAM,eAAe,EAAE;AAEzD,QAAM,UAAU,CAAC;AAEjB,QAAM,QAAQ,CAAC;AAEf,MAAI,SAAS,CAAC;AACd,MAAI,QAAQ;AAEZ,MAAIC;AAEJ,MAAI,MAAM,YAAY,MAAM,SAAS,YAAY,MAAM,SAAS,QAAQ;AACtE;AAAA,EACF;AAEA,MAAI,MAAM,SAAS,cAAc,MAAM,SAAS,SAAS;AACvD,WAAO;AAAA,MACLD;AAAA,MACA;AAAA,MACA,SAAS,GAAG,EAAE,MAAM,UAAU,YAAY,WAAW,CAAC;AAAA,IACxD;AAAA,EACF;AAEA,MAAI,MAAM,SAAS,SAAS;AAC1B,WAAO,MAAM,OAAO,QAChB,EAAEA,OAAM,SAAS;AAAA,MACf,KAAK,QAAQ,GAAG,OAAO,MAAM,OAAO,EAAE,KAAK,IAAI;AAAA,MAC/C,OAAO,SAAS,GAAG,OAAO,MAAM,SAAS,EAAE,CAAC,KAAK;AAAA,MACjD,KAAK,SAAS,GAAG,OAAO,MAAM,OAAO,KAAK,CAAC;AAAA,IAC7C,CAAC,IACD,CAAC;AAAA,EACP;AAEA,MAAI,OAAO;AACT,aAAS,CAAC,CAAC,OAAO,IAAI,CAAC;AAAA,EACzB;AAAA;AAAA,IAEE,MAAM,SAAS,cACf,MAAM,SAAS,UACf,MAAM,SAAS,YACf,MAAM,SAAS,WACf,MAAM,SAAS,YACf,MAAM;AAAA,IACN;AACA,IAAAC,QAAO,OAAO,MAAM,IAAI,EAAE,YAAY;AAEtC,QAAI,IAAI,KAAK,EAAE,UAAUA,KAAI,KAAK,SAAS,EAAE,SAASA,KAAI,CAAC,GAAG;AAC5D,eAAS,oBAAoB,GAAG,EAAE,SAASA,KAAI,GAAG,KAAK;AAAA,IACzD;AAAA,EACF;AAEA,MAAI,OAAO,WAAW,GAAG;AACvB;AAAA,EACF;AAGA,MAAI,MAAM,SAAS,YAAY;AAE7B,WAAO,CAAC,IAAI,CAAC,IAAI,OAAO,OAAO,CAAC,EAAE,CAAC,EAAE,MAAM,GAAG,IAAI;AAAA,EACpD;AAEA,MAAI,MAAM,SAAS,SAAS,MAAM,SAAS,SAAS;AAClD,WAAO,EAAE,QAAQ,OAAO,QAAQ;AAC9B,cAAQ,QAAQ,GAAG,OAAO,KAAK,EAAE,CAAC,CAAC;AAEnC,cAAQ;AAAA,QACN;AAAA,UACED;AAAA,UACA;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,KAAK,SAAS,GAAG,MAAM,SAAS,UAAU,YAAY,QAAQ,KAAK;AAAA,UACrE;AAAA,UACA,CAAC,EAAC,MAAM,QAAQ,OAAO,SAAS,GAAG,OAAO,KAAK,EAAE,CAAC,KAAK,KAAK,EAAC,CAAC;AAAA,QAChE;AAAA,MACF;AAEA,UAAI,UAAU,OAAO,SAAS,GAAG;AAC/B,gBAAQ,KAAK,EAAC,MAAM,QAAQ,OAAO,KAAI,CAAC;AAAA,MAC1C;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,SAAO,EAAE,QAAQ,OAAO,QAAQ;AAC9B,UAAM;AAAA,MACJ,OAAO,KAAK,EAAE,CAAC,IACX,OAAO,KAAK,EAAE,CAAC,IAAI,OAAO,OAAO,KAAK,EAAE,CAAC,IAAI,MAC7C,OAAO,KAAK,EAAE,CAAC;AAAA,IACrB;AAAA,EACF;AAEA,SAAO,EAAEA,OAAM,QAAQ,SAAS,GAAG,MAAM,KAAK,IAAI,CAAC,CAAC;AACtD;;;AC5GA,IAAME,KAAIC,gBAAe,GAAG;AAC5B,IAAMC,SAAQD,gBAAe,OAAO;AAM7B,SAAS,GAAG,GAAGE,OAAM;AAC1B,QAAM,OAAOA,MAAK,SAAS,CAAC;AAE5B,MAAI,UAAU;AAEd,MAAI;AAEJ,MAAI;AAGJ,MAAIH,GAAE,IAAI,GAAG;AACX,eAAW,KAAK,SAAS,CAAC;AAE1B,QACEE,OAAM,QAAQ,KACd,SAAS,eACR,SAAS,WAAW,SAAS,cAC5B,SAAS,WAAW,SAAS,UAC/B;AACA,gBAAU,QAAQ,SAAS,WAAW,OAAO;AAC7C,cAAQ;AAAA,QACN,GAAGC;AAAA,QACH,UAAU;AAAA,UACR,EAAC,GAAG,MAAM,UAAU,KAAK,SAAS,MAAM,CAAC,EAAC;AAAA,UAC1C,GAAGA,MAAK,SAAS,MAAM,CAAC;AAAA,QAC1B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,QAAMC,WAAU,aAAa,GAAG,SAASD,KAAI;AAE7C,SAAO,EAAEA,OAAM,YAAY,EAAC,QAAQC,SAAQ,SAAS,GAAG,QAAO,GAAGA,QAAO;AAC3E;;;ACxCA,IAAM,KAAKC,gBAAe,IAAI;AAMvB,SAASC,MAAK,GAAGC,OAAM;AAC5B,QAAM,UAAU,GAAGA,KAAI;AACvB,QAAM,WAAW,cAAc,GAAGA,KAAI;AAEtC,MAAI,QAAQ;AAEZ,MAAI,SAAS;AACX,YAAQ,YAAYA,OAAM,OAAO;AAAA;AAAA,MAE7B,OAAO,SAAS,OAAOA,MAAK,WAAW,KAAK,GAAG,EAAE;AAAA,QACjD;AAAA,EACN;AAEA,SAAO;AAAA,IACLA;AAAA,IACA;AAAA,IACA,EAAC,SAAS,OAAO,QAAQ,gBAAgB,QAAQ,EAAC;AAAA,IAClD;AAAA,EACF;AACF;;;ACrBA,IAAM,SAASC,gBAAe,QAAQ;AACtC,IAAM,QAAQA,gBAAe,OAAO;AAM7B,SAAS,MAAM,GAAGC,OAAM;AAC7B,MAAI,QAAQC,KAAI,GAAGD,KAAI;AAGvB,QAAM,aAAaA,MAAK;AACxB,QAAM,SAAS,MAAMA,KAAI,KAAK,OAAO,WAAW,UAAU,EAAE;AAC5D,MAAI,MAAM,OAAO,WAAW,OAAO,EAAE;AACrC,MAAI,QAAQ;AAEZ,MAAI,wBAAwB;AAE5B,MAAI;AAEJ,QAAM,EAAC,MAAM,QAAQ,UAAU,MAAK,GAAG,QAAQ,QAAQ;AAGvD,MAAI,yBAAyB,WAAW,KAAK,GAAG;AAC9C,WAAO;AAAA,EACT;AAGA,SAAO,CAAC,OAAO,EAAE,QAAQA,MAAK,SAAS,QAAQ;AAC7C,YAAQA,MAAK,SAAS,KAAK;AAC3B,QAAI,OAAO,KAAK,GAAG;AAEjB,YAAM,OAAO,MAAM,WAAW,OAAO,EAAE;AAAA,IACzC;AAAA,EACF;AAGA,MAAI,QAAQ;AACV,YAAQ;AAAA,MACN;AAAA,QACE,MAAM;AAAA,QACN,OAAO;AAAA,QACP,KAAK,QAAQ,GAAG,MAAM;AAAA,QACtB,KAAK,SAAS,EAAC,UAAU,MAAK,CAAC;AAAA,MACjC;AAAA,IACF;AAAA,EACF;AAGA,SAAO;AAAA,IACL,MAAM;AAAA;AAAA,IAEN,OAAOA,MAAK,WAAW,SAAS;AAAA,IAChC,KAAK,QAAQ,GAAG,GAAG;AAAA;AAAA,IAEnB,UAAU;AAAA,EACZ;AAEA,WAAS,WAAW;AAClB,4BAAwB;AACxB,WAAO;AAAA,EACT;AACF;;;ACjEO,SAASE,GAAE,GAAGC,OAAM;AACzB,QAAM,QAAQC,KAAI,GAAGD,KAAI;AAEzB,MAAI,MAAM,SAAS,GAAG;AACpB,WAAO,EAAEA,OAAM,aAAa,KAAK;AAAA,EACnC;AACF;;;ACLO,SAAS,EAAE,GAAGE,OAAM;AACzB,QAAM,WAAW,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,MAAM;AAEtD,IAAE;AACF,QAAM,WAAWC,KAAI,GAAGD,KAAI;AAC5B,IAAE;AAEF,WAAS,QAAQ,EAAC,MAAM,QAAQ,OAAO,SAAS,OAAO,CAAC,EAAC,CAAC;AAE1D,WAAS,KAAK;AAAA,IACZ,MAAM;AAAA,IACN,OAAO,SAAS,SAAS,IAAI,SAAS,OAAO,CAAC,IAAI;AAAA,EACpD,CAAC;AAED,SAAO;AACT;;;ACfO,SAAS,KAAK,GAAGE,OAAM;AAC5B,MAAI,WAAWC,KAAI,GAAGD,KAAI;AAE1B,MAAI,EAAE,YAAY,WAAW,QAAQ,GAAG;AACtC,eAAW,KAAK,QAAQ;AAAA,EAC1B;AAEA,SAAO,EAAEA,OAAM,QAAQ,QAAQ;AACjC;;;ACRO,SAAS,OAAO,GAAGE,OAAM;AAC9B,QAAM,SAAS,oBAAoB,GAAGA,KAAI;AAC1C,MAAI,QAAQ;AAEZ,QAAM,UAAU,CAAC;AAEjB,MAAI;AAEJ,SAAO,EAAE,QAAQ,OAAO,QAAQ;AAC9B,YAAQ,OAAO,KAAK;AACpB,YAAQ,KAAK,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,OAAO,MAAM,CAAC,IAAI,MAAM,MAAM,CAAC,CAAC;AAAA,EACrE;AAEA,MAAI,QAAQ,SAAS,GAAG;AACtB,WAAO,EAAEA,OAAM,QAAQ,SAAS,GAAG,QAAQ,KAAK,IAAI,CAAC,CAAC;AAAA,EACxD;AACF;;;ACjBO,SAAS,OAAO,GAAGC,OAAM;AAC9B,SAAO,EAAEA,OAAM,UAAUC,KAAI,GAAGD,KAAI,CAAC;AACvC;;;ACDO,SAAS,UAAU,GAAGE,OAAM;AACjC,QAAMC,QAAO,EAAE;AAEf,IAAE,WAAW;AAEb,QAAM,SAAS,EAAED,OAAM,aAAaE,KAAI,GAAGF,KAAI,CAAC;AAEhD,MAAIA,MAAK,eAAeA,MAAK,WAAW,WAAWA,MAAK,WAAW,UAAU;AAC3E,UAAM,OAAO,OAAO,SAAS,OAAO,OAAO,CAAC;AAC5C,QAAIA,MAAK,WAAW,QAAS,MAAK,UAAUA,MAAK,WAAW;AAC5D,QAAIA,MAAK,WAAW,QAAS,MAAK,UAAUA,MAAK,WAAW;AAAA,EAC9D;AAEA,IAAE,WAAWC;AAEb,SAAO;AACT;;;ACjBO,SAAS,SAAS,GAAGE,OAAM;AAChC,SAAO,EAAEA,OAAM,YAAYC,KAAI,GAAGD,KAAI,CAAC;AACzC;;;ACMA,IAAM,QAAQE,gBAAe,OAAO;AACpC,IAAM,KAAKA,gBAAe,IAAI;AAC9B,IAAMC,QAAOD,gBAAe,CAAC,MAAM,IAAI,CAAC;AAMjC,SAAS,MAAM,GAAGE,OAAM;AAC7B,MAAI,EAAE,SAAS;AACb,WAAO,EAAEA,OAAM,QAAQ,SAAS,GAAG,OAAOA,KAAI,CAAC,CAAC;AAAA,EAClD;AAEA,IAAE,UAAU;AAEZ,QAAM,EAAC,UAAU,MAAK,IAAI,QAAQA,KAAI;AACtC,QAAM,OAAO,OAAOC,KAAI,GAAGD,KAAI,GAAG,QAAQ;AAC1C,MAAI,UAAU;AACd,MAAI,WAAW;AAEf,SAAO,EAAE,WAAW,KAAK,QAAQ;AAC/B,UAAM,QAAQ,KAAK,QAAQ,EAAE;AAC7B,QAAI,YAAY;AAEhB,WAAO,EAAE,YAAY,MAAM,QAAQ;AACjC,YAAMD,QAAO,MAAM,SAAS;AAE5B,UAAIA,MAAK,MAAM;AACb,cAAM,UAAU,OAAO,SAAS,OAAOA,MAAK,KAAK,OAAO,GAAG,EAAE,KAAK;AAClE,cAAM,UAAU,OAAO,SAAS,OAAOA,MAAK,KAAK,OAAO,GAAG,EAAE,KAAK;AAElE,YAAI,UAAU,KAAK,UAAU,GAAG;AAC9B,cAAI,gBAAgB,WAAW;AAE/B,iBAAO,EAAE,gBAAgB,WAAW,SAAS;AAC3C,gBAAI,WAAW,YAAY;AAE3B,mBAAO,EAAE,WAAW,YAAY,SAAS;AACvC,kBAAI,CAAC,KAAK,aAAa,GAAG;AAGxB;AAAA,cACF;AAGA,oBAAM,WAAW,CAAC;AAElB,kBAAI,kBAAkB,YAAY,aAAa,WAAW;AACxD,yBAAS,KAAK,EAAC,MAAM,aAAa,UAAU,CAAC,EAAC,CAAC;AAAA,cACjD;AAEA,mBAAK,aAAa,EAAE,SAAS,OAAO,UAAU,GAAG,GAAG,QAAQ;AAAA,YAC9D;AAAA,UACF;AAAA,QACF;AAGA,YAAI,aAAaA,MAAK,KAAM,QAAOA,MAAK,KAAK;AAC7C,YAAI,aAAaA,MAAK,KAAM,QAAOA,MAAK,KAAK;AAC7C,YAAI,OAAO,KAAKA,MAAK,IAAI,EAAE,WAAW,EAAG,QAAOA,MAAK;AAAA,MACvD;AAAA,IACF;AAEA,QAAI,MAAM,SAAS,QAAS,WAAU,MAAM;AAAA,EAC9C;AAGA,aAAW;AAEX,SAAO,EAAE,WAAW,KAAK,QAAQ;AAC/B,UAAM,QAAQ,KAAK,QAAQ,EAAE;AAC7B,QAAI,YAAY,MAAM,SAAS;AAC/B,WAAO,EAAE,YAAY,SAAS;AAC5B,YAAM,KAAK,EAAC,MAAM,aAAa,UAAU,CAAC,EAAC,CAAC;AAAA,IAC9C;AAAA,EACF;AAEA,MAAI,aAAa,MAAM,SAAS;AAChC,SAAO,EAAE,aAAa,SAAS;AAC7B,UAAM,KAAK,IAAI;AAAA,EACjB;AAEA,IAAE,UAAU;AAEZ,SAAO,EAAEC,OAAM,SAAS,EAAC,MAAK,GAAG,IAAI;AACvC;AAQA,SAAS,QAAQA,OAAM;AACrB,MAAI,WAAW;AACf,MAAI,WAAW;AACf,MAAI,YAAY;AAEhB,QAAM,QAAQ,CAAC,IAAI;AAEnB,QAAMA,OAAM,WAAW,CAAC,UAAU;AAChC,QAAI,MAAM,YAAY,WAAWA,UAAS,OAAO;AAC/C,aAAO;AAAA,IACT;AAGA,QAAID,MAAK,KAAK,KAAK,MAAM,YAAY;AACnC,UAAI,CAAC,MAAM,SAAS,GAAG;AACrB,cAAM,SAAS,IAAI,OAAO,MAAM,WAAW,SAAS,EAAE,KAAK;AAAA,MAC7D;AAGA,UAAI,YAAY,WAAW,KAAK,MAAM,YAAY,MAAM;AACtD,mBAAW;AAAA,MACb;AAEA;AAAA,IACF,WAAW,MAAM,KAAK,GAAG;AACvB,iBAAW;AAAA,IACb,WAAW,GAAG,KAAK,GAAG;AACpB;AACA,kBAAY;AAAA,IACd;AAAA,EACF,CAAC;AAED,SAAO,EAAC,OAAO,SAAQ;AACzB;AASA,SAAS,OAAO,UAAU,UAAU;AAClC,MAAI,QAAQ;AAEZ,QAAM,QAAQ,CAAC;AAEf,MAAI;AAGJ,MAAI,UAAU;AACZ,UAAM,KAAK,EAAC,MAAM,YAAY,UAAU,CAAC,EAAC,CAAC;AAAA,EAC7C;AAEA,SAAO,EAAE,QAAQ,SAAS,QAAQ;AAChC,UAAMC,QAAO,SAAS,KAAK;AAE3B,QAAIA,MAAK,SAAS,YAAY;AAC5B,UAAI,OAAO;AACT,QAAAA,MAAK,SAAS,QAAQ,GAAG,KAAK;AAC9B,gBAAQ;AAAA,MACV;AAEA,YAAM,KAAKA,KAAI;AAAA,IACjB,OAAO;AACL,UAAI,CAAC,MAAO,SAAQ,CAAC;AAErB,YAAM,KAAKA,KAAI;AAAA,IACjB;AAAA,EACF;AAEA,MAAI,OAAO;AACT,UAAM,MAAM,SAAS,CAAC,EAAE,SAAS,KAAK,GAAG,KAAK;AAAA,EAChD;AAEA,UAAQ;AAER,SAAO,EAAE,QAAQ,MAAM,QAAQ;AAC7B,UAAM,KAAK,EAAE,WAAW,QAAQ,MAAM,KAAK,EAAE,QAAQ;AAAA,EACvD;AAEA,SAAO;AACT;AAQA,SAAS,QAAQ,UAAU;AAEzB,QAAM,QAAQ,CAAC;AACf,MAAI,QAAQ;AAEZ,MAAIA;AAEJ,MAAI;AAEJ,SAAO,EAAE,QAAQ,SAAS,QAAQ;AAChC,IAAAA,QAAO,SAAS,KAAK;AAErB,QAAIA,MAAK,SAAS,aAAa;AAC7B,UAAI,OAAO;AACT,QAAAA,MAAK,SAAS,QAAQ,GAAG,KAAK;AAC9B,gBAAQ;AAAA,MACV;AAEA,YAAM,KAAKA,KAAI;AAAA,IACjB,OAAO;AACL,UAAI,CAAC,MAAO,SAAQ,CAAC;AAErB,YAAM,KAAKA,KAAI;AAAA,IACjB;AAAA,EACF;AAEA,MAAI,OAAO;AACT,IAAAA,QAAO,MAAM,MAAM,SAAS,CAAC;AAE7B,QAAI,CAACA,OAAM;AACT,MAAAA,QAAO,EAAC,MAAM,aAAa,UAAU,CAAC,EAAC;AACvC,YAAM,KAAKA,KAAI;AAAA,IACjB;AAEA,IAAAA,MAAK,SAAS,KAAK,GAAG,KAAK;AAAA,EAC7B;AAEA,SAAO;AACT;;;ACrOO,SAAS,KAAK,GAAGE,OAAM;AAC5B,SAAO,EAAEA,OAAM,QAAQ,SAAS,GAAGA,MAAK,KAAK,CAAC;AAChD;;;ACDO,SAAS,SAAS,GAAGC,OAAM;AAChC,SAAO,EAAEA,OAAM,QAAQ,SAAS,GAAG,OAAOA,KAAI,CAAC,CAAC;AAClD;;;ACLO,SAAS,IAAI,GAAGC,OAAM;AAC3B,SAAO,EAAEA,OAAM,QAAQ,GAAQ;AACjC;;;ACqBO,IAAM,WAAW;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAS;AAAA,EAET,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,UAAU;AAAA,EACV,SAAS;AAAA,EACT,SAAS;AAAA,EACT,KAAK;AAAA,EACL,UAAU;AAAA,EACV,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,OAAO;AAAA,EACP,OAAO;AAAA,EACP,UAAU;AAAA,EACV,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,UAAU;AAAA,EACV,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,KAAK;AAAA,EACL,UAAU;AAAA,EACV,OAAO;AAAA,EACP,OAAO;AAAA,EAEP,MAAMC;AAAA,EACN,SAASA;AAAA,EACT,KAAKA;AAAA,EACL,KAAKA;AAAA,EACL,KAAKA;AAAA,EACL,OAAOA;AAAA,EACP,QAAQA;AAAA,EACR,QAAQA;AAAA,EACR,MAAMA;AAAA,EACN,MAAMA;AAAA,EACN,SAASA;AAAA,EACT,KAAKA;AAAA,EACL,MAAMA;AAAA,EACN,KAAKA;AAAA,EACL,OAAOA;AAAA,EACP,KAAKA;AAAA,EACL,SAASA;AAAA,EACT,OAAOA;AAAA,EACP,MAAMA;AAAA,EACN,UAAUA;AAAA,EACV,QAAQA;AAAA,EACR,QAAQA;AAAA,EACR,UAAUA;AAAA,EACV,IAAIA;AAAA,EACJ,KAAKA;AAAA,EACL,IAAIA;AAAA,EACJ,IAAIA;AAAA,EACJ,KAAKA;AAAA,EACL,MAAMA;AAAA,EACN,MAAMA;AAAA,EACN,OAAOA;AAAA,EACP,MAAMA;AAAA,EACN,KAAKA;AAAA,EACL,KAAKA;AAAA,EACL,OAAOA;AAAA,EACP,OAAOA;AAAA,EACP,OAAOA;AAAA,EACP,MAAMA;AAAA,EAEN,SAAS;AAAA,EACT,SAAS;AAAA,EACT,OAAO;AAAA,EACP,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,UAAU;AAAA,EACV,KAAK;AAAA,EACL,SAAS;AAAA,EACT,SAAS;AAAA,EAET;AAAA,EACA,OAAO;AAAA,EACP,GAAG;AAAA,EACH;AAAA,EACA;AAAA,EACA;AAAA,EACA,MAAM;AAAA,EACN,KAAKC;AAAA,EACL;AAAA,EACA,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ;AAAA,EACA;AAAA,EACA,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ;AAAA,EACA,GAAG;AAAA,EACH;AAAA,EACA;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA,KAAK;AAAA,EACL;AAAA,EACA,SAAS;AAAA,EACT,MAAM;AAAA,EACN,IAAIA;AAAA,EACJ,GAAAC;AAAA,EACA,WAAW;AAAA,EACX,KAAK;AAAA,EACL;AAAA,EACA,GAAG;AAAA,EACH,MAAM;AAAA,EACN;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,SAASA;AAAA,EACT;AAAA,EACA,IAAI;AAAA,EACJ;AAAA,EACA,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,GAAG;AAAA,EACH,IAAID;AAAA,EACJ,KAAK;AAAA,EACL,OAAO;AAAA,EACP;AAAA,EACA,KAAK;AACP;AAEA,SAAS,SAAS;AAAC;;;ACxKnB,IAAM,QAAQE,SAAQ,CAAC,WAAW,aAAa,MAAM,CAAC;AAU/C,SAAS,QAAQ,MAAM,UAAU,CAAC,GAAG;AAE1C,QAAM,OAAO,CAAC;AAEd,MAAI;AAKJ,QAAM,IAAI,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWb,CAACC,OAAM,MAAM,OAAO,aAAa;AAE/B,UAAI;AAEJ,UAAI,OAAO,UAAU,YAAY,MAAM,QAAQ,KAAK,GAAG;AACrD,mBAAW;AACX,qBAAa,CAAC;AAAA,MAChB,OAAO;AACL,qBAAa;AAAA,MACf;AAIA,YAAMC,UAAS,EAAC,MAAM,GAAG,WAAU;AAEnC,UAAI,OAAO,aAAa,UAAU;AAEhC,QAAAA,QAAO,QAAQ;AAAA,MACjB,WAAW,UAAU;AAEnB,QAAAA,QAAO,WAAW;AAAA,MACpB;AAEA,UAAID,MAAK,UAAU;AACjB,QAAAC,QAAO,WAAWD,MAAK;AAAA,MACzB;AAEA,aAAOC;AAAA,IACT;AAAA,IAEF;AAAA,MACE,UAAU;AAAA,MACV,WAAW;AAAA,MACX,SAAS;AAAA,MACT,UAAU;AAAA;AAAA,MAEV,eAAe;AAAA,MACf,UAAU;AAAA,MACV,UAAU,QAAQ,WACd,EAAC,GAAG,UAAU,GAAG,QAAQ,SAAQ,IACjC;AAAA,MACJ,UAAU,QAAQ;AAAA,MAClB,SAAS,QAAQ,WAAW;AAAA,MAC5B,WAAW,QAAQ,aAAa;AAAA,MAChC,QAAQ,QAAQ,UAAU,CAAC,GAAG;AAAA,IAChC;AAAA,EACF;AAEA,QAAM,MAAM,WAAW,CAACD,UAAS;AAC/B,UAAM,KACJA,MAAK,cACL,QAAQA,MAAK,cACb,OAAOA,MAAK,WAAW,EAAE,EAAE,YAAY;AAEzC,QAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE,GAAG;AAC7B,WAAK,EAAE,IAAIA;AAAA,IACb;AAAA,EACF,CAAC;AAGD,yBAAuB,EAAC,UAAU,QAAQ,aAAa,KAAI,CAAC,EAAE,IAAI;AAElE,QAAM,SAAS,IAAI,GAAG,MAAM,MAAS;AAErC,MAAI,CAAC,QAAQ;AACX,YAAQ,EAAC,MAAM,QAAQ,UAAU,CAAC,EAAC;AAAA,EACrC,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,YAAQ,EAAC,MAAM,QAAQ,UAAU,OAAM;AAAA,EACzC,OAAO;AACL,YAAQ;AAAA,EACV;AAEA,QAAM,OAAO,QAAQ,MAAM;AAE3B,SAAO;AAWP,WAAS,OAAOA,OAAM,OAAO,QAAQ;AAEnC,QAAI,UAAU,QAAQ,CAAC,QAAQ;AAC7B;AAAA,IACF;AAEA,UAAM,WAAW,OAAO,SAAS,QAAQ,CAAC;AAE1C,QAAI,YAAY,SAAS,SAASA,MAAK,MAAM;AAC3C,eAAS,SAASA,MAAK;AACvB,aAAO,SAAS,OAAO,OAAO,CAAC;AAE/B,UAAI,SAAS,YAAYA,MAAK,UAAU;AACtC,iBAAS,SAAS,MAAMA,MAAK,SAAS;AAAA,MACxC;AAGA,aAAO,QAAQ;AAAA,IACjB;AAEA,IAAAA,MAAK,QAAQA,MAAK,MAAM,QAAQ,0BAA0B,IAAI;AAI9D,QAAI,UAAU,MAAM,MAAM,GAAG;AAC3B,UAAI,CAAC,OAAO;AACV,QAAAA,MAAK,QAAQA,MAAK,MAAM,QAAQ,WAAW,EAAE;AAAA,MAC/C;AAEA,UAAI,UAAU,OAAO,SAAS,SAAS,GAAG;AACxC,QAAAA,MAAK,QAAQA,MAAK,MAAM,QAAQ,WAAW,EAAE;AAAA,MAC/C;AAAA,IACF;AAEA,QAAI,CAACA,MAAK,OAAO;AACf,aAAO,SAAS,OAAO,OAAO,CAAC;AAC/B,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;AC1JA,IAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASF,SAAU,aAAa,SAAS;AAE9B,QAAI;AAEJ,QAAI;AAEJ,QAAI,OAAO,gBAAgB,YAAY;AACrC,kBAAY;AACZ,iBAAW,WAAW,CAAC;AAAA,IACzB,OAAO;AACL,iBAAW,eAAe,CAAC;AAAA,IAC7B;AAEA,QAAI,SAAS,aAAa,UAAa,SAAS,aAAa,MAAM;AACjE,iBAAW,OAAO,OAAO,CAAC,GAAG,UAAU,EAAC,UAAU,KAAI,CAAC;AAAA,IACzD;AAEA,WAAO,YAAY,OAAO,WAAW,QAAQ,IAAI,OAAO,QAAQ;AAAA,EAClE;AAAA;AAGJ,IAAO,cAAQ;AAQf,SAAS,OAAO,aAAa,SAAS;AACpC,SAAO,CAACE,OAAM,MAAM,SAAS;AAC3B,gBAAY,IAAI,QAAQA,OAAM,OAAO,GAAG,MAAM,CAAC,UAAU;AACvD,WAAK,KAAK;AAAA,IACZ,CAAC;AAAA,EACH;AACF;AAQA,SAAS,OAAO,UAAU,CAAC,GAAG;AAC5B,SAAO,CAACA,UAAS;AACf,UAAM;AAAA;AAAA,MAAmC,QAAQA,OAAM,OAAO;AAAA;AAC9D,WAAO;AAAA,EACT;AACF;",
  "names": ["node", "index", "anyFactory", "castFactory", "index", "all", "node", "node", "content", "skippable", "convert", "ok", "typeFactory", "anyFactory", "propsFactory", "castFactory", "index", "all", "node", "all", "node", "all", "isElement", "node", "convertElement", "element", "tagNameFactory", "anyFactory", "castFactory", "index", "own", "node", "embedded", "convertElement", "node", "isElement", "convertElement", "phrasing", "embedded", "nodes", "node", "phrasing", "extend", "node", "all", "node", "all", "node", "node", "node", "convertElement", "element", "tagNameFactory", "anyFactory", "castFactory", "index", "node", "convert", "ok", "typeFactory", "anyFactory", "propsFactory", "castFactory", "index", "all", "node", "is", "convert", "br", "convertElement", "block", "whitespace", "node", "prefix", "input", "code", "convertElement", "node", "node", "node", "all", "node", "all", "convertElement", "node", "content", "node", "all", "node", "wrap", "all", "node", "node", "node", "node", "convertElement", "node", "list", "option", "content", "props", "convertElement", "node", "list", "p", "convertElement", "input", "node", "content", "convertElement", "list", "node", "convertElement", "node", "all", "p", "node", "all", "node", "all", "node", "all", "node", "node", "all", "node", "wrap", "all", "node", "all", "convertElement", "cell", "node", "all", "node", "node", "node", "all", "list", "p", "convert", "node", "result", "node"]
}
